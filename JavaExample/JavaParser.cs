//
// This is the grammar specification from the Final Draft of the generic spec.
//
////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007 IBM Corporation.
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the Eclipse Public License v1.0
// which accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
//Contributors:
//    Philippe Charles (pcharles@us.ibm.com) - initial API and implementation

////////////////////////////////////////////////////////////////////////////////

namespace LpgJava
{


    //#line 157 "dtParserTemplateF.gi

using LPG2.Runtime;
using System;

    //#line 18 "GJavaParser.g



    //#line 164 "dtParserTemplateF.gi

public class JavaParser : object , RuleAction
{
    private PrsStream prsStream = null;
    
    private bool unimplementedSymbolsWarning = false;

    private static ParseTable prsTable = new JavaParserprs();
    public ParseTable getParseTable() { return prsTable; }

    private DeterministicParser dtParser = null;
    public DeterministicParser getParser() { return dtParser; }

    private void setResult(object _object) { dtParser.setSym1(_object); }
    public object getRhsSym(int i) { return dtParser.getSym(i); }

    public int getRhsTokenIndex(int i) { return dtParser.getToken(i); }
    public IToken getRhsIToken(int i) { return prsStream.getIToken(getRhsTokenIndex(i)); }
    
    public int getRhsFirstTokenIndex(int i) { return dtParser.getFirstToken(i); }
    public IToken getRhsFirstIToken(int i) { return prsStream.getIToken(getRhsFirstTokenIndex(i)); }

    public int getRhsLastTokenIndex(int i) { return dtParser.getLastToken(i); }
    public IToken getRhsLastIToken(int i) { return prsStream.getIToken(getRhsLastTokenIndex(i)); }

    public int getLeftSpan() { return dtParser.getFirstToken(); }
    public IToken getLeftIToken()  { return prsStream.getIToken(getLeftSpan()); }

    public int getRightSpan() { return dtParser.getLastToken(); }
    public IToken getRightIToken() { return prsStream.getIToken(getRightSpan()); }

    public int getRhsErrorTokenIndex(int i)
    {
        int index = dtParser.getToken(i);
        IToken err = prsStream.getIToken(index);
        return (err is ErrorToken ? index : 0);
    }
    public ErrorToken getRhsErrorIToken(int i)
    {
        int index = dtParser.getToken(i);
        IToken err = prsStream.getIToken(index);
        return (ErrorToken) (err is ErrorToken ? err : null);
    }

    public void reset(ILexStream lexStream)
    {
        prsStream = new PrsStream(lexStream);
        dtParser.reset(prsStream);

        try
        {
            prsStream.remapTerminalSymbols(orderedTerminalSymbols(), prsTable.getEoftSymbol());
        }
        catch(NullExportedSymbolsException e) {
        }
        catch(NullTerminalSymbolsException e) {
        }
        catch(UnimplementedTerminalsException e)
        {
            if (unimplementedSymbolsWarning) {
                ArrayListHelper<int> unimplemented_symbols =  new ArrayListHelper<int>( e.getSymbols());
                Console.Out.WriteLine("The Lexer will not scan the following token(s):");
                for (int i = 0; i < unimplemented_symbols.Count; i++)
                {
                    int  id = unimplemented_symbols.get(i);
                    Console.Out.WriteLine("    " + JavaParsersym.orderedTerminalSymbols[id]);               
                }
                Console.Out.WriteLine();
            }
        }
        catch(UndefinedEofSymbolException e)
        {
            throw (new UndefinedEofSymbolException
                                ("The Lexer does not implement the Eof symbol " +
                                 JavaParsersym.orderedTerminalSymbols[prsTable.getEoftSymbol()]));
        }
    }
    
    public JavaParser()
    {
        try
        {
            dtParser = new DeterministicParser(prsStream, prsTable, (RuleAction) this);
        }
        catch (NotDeterministicParseTableException e)
        {
            throw (new NotDeterministicParseTableException
                                ("Regenerate JavaParserprs.cs with -NOBACKTRACK option"));
        }
        catch (BadParseSymFileException e)
        {
            throw (new BadParseSymFileException("Bad Parser Symbol File -- JavaParsersym.cs. Regenerate JavaParserprs.cs"));
        }
    }

    public JavaParser(ILexStream lexStream): this()
    {
       
        reset(lexStream);
    }

    public int numTokenKinds() { return JavaParsersym.numTokenKinds; }
    public string[] orderedTerminalSymbols() { return JavaParsersym.orderedTerminalSymbols; }
    public string getTokenKindName(int kind) { return JavaParsersym.orderedTerminalSymbols[kind]; }            
    public int getEOFTokenKind() { return prsTable.getEoftSymbol(); }
    public IPrsStream getIPrsStream() { return prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public PrsStream getPrsStream() { return prsStream; }

    /**
     * @deprecated replaced by {@link #getIPrsStream()}
     *
     */
    public PrsStream getParseStream() { return prsStream; }

    public Ast parser()
    {
        return parser(null, 0);
    }
        
    public Ast parser(Monitor monitor)
    {
        return parser(monitor, 0);
    }
        
    public Ast parser(int error_repair_count)
    {
        return parser(null, error_repair_count);
    }
        
    public Ast parser(Monitor monitor, int error_repair_count)
    {
        dtParser.setMonitor(monitor);

        try
        {
            return (Ast) dtParser.parse();
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnose(e.error_token);
        }

        return null;
    }

    //
    // Additional entry points, if any
    //
    
    public Ast parseClassBodyDeclarationsopt()
    {
        return parseClassBodyDeclarationsopt(null, 0);
    }
        
    public Ast parseClassBodyDeclarationsopt(Monitor monitor)
    {
        return parseClassBodyDeclarationsopt(monitor, 0);
    }
        
    public Ast parseClassBodyDeclarationsopt(int error_repair_count)
    {
        return parseClassBodyDeclarationsopt(null, error_repair_count);
    }
        
    public void resetParseClassBodyDeclarationsopt()
    {
        dtParser.resetParserEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker);
    }
    
    public Ast parseClassBodyDeclarationsopt(Monitor monitor, int error_repair_count)
    {
        dtParser.setMonitor(monitor);
        
        try
        {
            return (Ast) dtParser.parseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker);
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnoseEntry(JavaParsersym.TK_ClassBodyDeclarationsoptMarker, e.error_token);
        }

        return null;
    }

    public Ast parseLPGUserAction()
    {
        return parseLPGUserAction(null, 0);
    }
        
    public Ast parseLPGUserAction(Monitor monitor)
    {
        return parseLPGUserAction(monitor, 0);
    }
        
    public Ast parseLPGUserAction(int error_repair_count)
    {
        return parseLPGUserAction(null, error_repair_count);
    }
        
    public void resetParseLPGUserAction()
    {
        dtParser.resetParserEntry(JavaParsersym.TK_LPGUserActionMarker);
    }
    
    public Ast parseLPGUserAction(Monitor monitor, int error_repair_count)
    {
        dtParser.setMonitor(monitor);
        
        try
        {
            return (Ast) dtParser.parseEntry(JavaParsersym.TK_LPGUserActionMarker);
        }
        catch (BadParseException e)
        {
            prsStream.reset(e.error_token); // point to error token

            DiagnoseParser diagnoseParser = new DiagnoseParser(prsStream, prsTable);
            diagnoseParser.diagnoseEntry(JavaParsersym.TK_LPGUserActionMarker, e.error_token);
        }

        return null;
    }

    public abstract class Ast : IAst
    {
        public IAst getNextAst() { return null; }
        protected IToken leftIToken,
                         rightIToken;
        protected IAst parent = null;
        public void setParent(IAst parent) { this.parent = parent; }
        public IAst getParent() { return parent; }

        public IToken getLeftIToken() { return leftIToken; }
        public IToken getRightIToken() { return rightIToken; }
        public IToken[] getPrecedingAdjuncts() { return leftIToken.getPrecedingAdjuncts(); }
        public IToken[] getFollowingAdjuncts() { return rightIToken.getFollowingAdjuncts(); }

        public override string ToString()
        {
            return leftIToken.getILexStream().ToString(leftIToken.getStartOffset(), rightIToken.getEndOffset());
        }

        public Ast(IToken token) { this.leftIToken = this.rightIToken = token; }
        public Ast(IToken leftIToken, IToken rightIToken)
        {
            this.leftIToken = leftIToken;
            this.rightIToken = rightIToken;
        }

      public  void initialize() {}

        /**
         * A list of all children of this node, excluding the null ones.
         */
        public System.Collections.ArrayList getChildren()
        {
             ArrayListEx<object> list = new ArrayListEx<object>(getAllChildren()) ;
            int k = -1;
            for (int i = 0; i < list.Count; i++)
            {
                object element = list.get(i);
                if (element != null)
                {
                    if (++k != i)
                        list.set(k, element);
                }
            }
            for (int i = list.Count - 1; i > k; i--) // remove extraneous elements
                list.remove(i);
            return list;
        }

        /**
         * A list of all children of this node, including the null ones.
         */
        public abstract System.Collections.ArrayList getAllChildren();

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Ast)) return false;
            Ast other = (Ast) o;
            return getLeftIToken().getILexStream() == other.getLeftIToken().getILexStream() &&
                   getLeftIToken().getTokenIndex() == other.getLeftIToken().getTokenIndex() &&
                   getRightIToken().getILexStream() == other.getRightIToken().getILexStream() &&
                   getRightIToken().getTokenIndex() == other.getRightIToken().getTokenIndex();
        }

        public override int GetHashCode()
        {
            int hash = 7;
            if (getLeftIToken().getILexStream() != null) hash = hash * 31 + getLeftIToken().getILexStream().GetHashCode();
            hash = hash * 31 + getLeftIToken().getTokenIndex();
            if (getRightIToken().getILexStream() != null) hash = hash * 31 + getRightIToken().getILexStream().GetHashCode();
            hash = hash * 31 + getRightIToken().getTokenIndex();
            return hash;
        }
        public abstract void accept(Visitor v);
        public abstract void accept(ArgumentVisitor v, object o);
        public abstract object accept(ResultVisitor v);
        public abstract object accept(ResultArgumentVisitor v, object o);
        public virtual void accept(IAstVisitor v) {}
    }

    public abstract class AbstractAstList : Ast , IAbstractArrayList<Ast>
    {
        private bool leftRecursive;
        private ArrayListEx<Ast> list=new ArrayListEx<Ast>();
        public int size() { return list.Count; }
        public  System.Collections.ArrayList getList() { return list; }
        public Ast getElementAt(int i) { return (Ast) list.get(leftRecursive ? i : list.Count - 1 - i); }
        public System.Collections.ArrayList getArrayList()
        {
            if (! leftRecursive) // reverse the list 
            {
                for (int i = 0, n = list.Count - 1; i < n; i++, n--)
                {
                    dynamic ith = list.get(i),
                           nth = list.get(n);
                    list.set(i, nth);
                    list.set(n, ith);
                }
                leftRecursive = true;
            }
            return list;
        }
        /**
         * @deprecated replaced by {@link #addElement()}
         *
         */
        public bool add(Ast element)
        {
            addElement(element);
            return true;
        }

        public void addElement(Ast element)
        {
            list.Add(element);
            if (leftRecursive)
                 rightIToken = element.getRightIToken();
            else leftIToken = element.getLeftIToken();
        }

        public AbstractAstList(IToken leftIToken, IToken rightIToken, bool leftRecursive):base(leftIToken, rightIToken)
        {
            this.leftRecursive = leftRecursive;
           
        }

        public AbstractAstList(Ast element, bool leftRecursive)
            :this(element.getLeftIToken(), element.getRightIToken(), leftRecursive)
        {
            list.Add(element);
        }

        /**
         * Make a copy of the list and return it. Note that we obtain the local list by
         * invoking getArrayList so as to make sure that the list we return is in proper order.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            return (System.Collections.ArrayList) getArrayList().Clone();
        }

    }

     public   class AstToken : Ast , IAstToken
    {
        public AstToken(IToken token) :base(token){  }
        public IToken getIToken() { return leftIToken; }
        public override string ToString() { return leftIToken.ToString(); }

        /**
         * A token class has no children. So, we return the empty list.
         */
        public override System.Collections.ArrayList getAllChildren() { return new System.Collections.ArrayList(); }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AstToken)) return false;
            AstToken other = (AstToken) o;
            return getIToken().getILexStream() == other.getIToken().getILexStream() &&
                   getIToken().getTokenIndex() == other.getIToken().getTokenIndex();
        }

        public override int GetHashCode()
        {
            int hash = 7;
            if (getIToken().getILexStream() != null) hash = hash * 31 + getIToken().getILexStream().GetHashCode();
            hash = hash * 31 + getIToken().getTokenIndex();
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    public interface IRootForJavaParser
    {
        public IToken getLeftIToken();
        public IToken getRightIToken();

        void accept(Visitor v);
        void accept(ArgumentVisitor v, object o);
        object accept(ResultVisitor v);
        object accept(ResultArgumentVisitor v, object o);
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>ResultType
     *<li>VariableModifier
     *<li>MethodBody
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>Commaopt
     *<li>Ellipsisopt
     *<li>LPGUserAction0
     *<li>LPGUserAction1
     *<li>LPGUserAction2
     *<li>LPGUserAction3
     *<li>LPGUserAction4
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>AssignmentOperator0
     *<li>AssignmentOperator1
     *<li>AssignmentOperator2
     *<li>AssignmentOperator3
     *<li>AssignmentOperator4
     *<li>AssignmentOperator5
     *<li>AssignmentOperator6
     *<li>AssignmentOperator7
     *<li>AssignmentOperator8
     *<li>AssignmentOperator9
     *<li>AssignmentOperator10
     *<li>AssignmentOperator11
     *</ul>
     *</b>
     */
    public interface IAstToken:IRootForJavaParser    {
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Commaopt</b>
     */
    public interface ICommaopt : IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>Ellipsisopt</b>
     */
    public interface IEllipsisopt : IAstToken {}

    /**
     * is implemented by <b>CompilationUnit</b>
     */
    public interface ICompilationUnit:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>LPGUserAction0
     *<li>LPGUserAction1
     *<li>LPGUserAction2
     *<li>LPGUserAction3
     *<li>LPGUserAction4
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface ILPGUserAction : IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface Iidentifier : IAstToken, ITypeName, ITypeVariable, IPackageName, IExpressionName, IMethodName, IPackageOrTypeName, IAmbiguousName, IVariableDeclaratorId, ISimpleTypeName, ISimpleName, IEnumConstant, Iidentifieropt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IBlockStatementsopt : ILPGUserAction {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    public interface IType : IResultType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>PrimitiveType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    public interface IPrimitiveType : IType, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *</ul>
     *</b>
     */
    public interface IReferenceType : IType, IActualTypeArgument {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    public interface INumericType : IPrimitiveType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *</ul>
     *</b>
     */
    public interface IIntegralType : INumericType, IAstToken {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    public interface IFloatingPointType : INumericType, IAstToken {}

    /**
     * is implemented by <b>ClassType</b>
     */
    public interface IClassOrInterfaceType : IReferenceType {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ITypeVariable : IReferenceType, IExceptionType {}

    /**
     * is implemented by <b>ArrayType</b>
     */
    public interface IArrayType : IReferenceType {}

    /**
     * is implemented by <b>ClassType</b>
     */
    public interface IClassType : IClassOrInterfaceType, IExceptionType {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    public interface ITypeName : IClassName {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    public interface ITypeArgumentsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>InterfaceType</b>
     */
    public interface IInterfaceType : IInterfaceTypeList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>TypeName
     *</ul>
     *</b>
     */
    public interface IClassName:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeParameter</b>
     */
    public interface ITypeParameter : ITypeParameterList {}

    /**
     * is implemented by <b>TypeBound</b>
     */
    public interface ITypeBoundopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeBound</b>
     */
    public interface ITypeBound : ITypeBoundopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    public interface IAdditionalBoundListopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AdditionalBoundList
     *<li>AdditionalBound
     *</ul>
     *</b>
     */
    public interface IAdditionalBoundList : IAdditionalBoundListopt {}

    /**
     * is implemented by <b>AdditionalBound</b>
     */
    public interface IAdditionalBound : IAdditionalBoundList {}

    /**
     * is implemented by <b>TypeArguments</b>
     */
    public interface ITypeArguments : ITypeArgumentsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>ActualTypeArgumentList
     *<li>Wildcard
     *</ul>
     *</b>
     */
    public interface IActualTypeArgumentList:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ArrayType
     *<li>Wildcard
     *</ul>
     *</b>
     */
    public interface IActualTypeArgument : IActualTypeArgumentList {}

    /**
     * is implemented by <b>Wildcard</b>
     */
    public interface IWildcard : IActualTypeArgument {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds0
     *<li>WildcardBounds1
     *</ul>
     *</b>
     */
    public interface IWildcardBoundsOpt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>WildcardBounds0
     *<li>WildcardBounds1
     *</ul>
     *</b>
     */
    public interface IWildcardBounds : IWildcardBoundsOpt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageName
     *</ul>
     *</b>
     */
    public interface IPackageName:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *</ul>
     *</b>
     */
    public interface IExpressionName : IPostfixExpression, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>AmbiguousName
     *</ul>
     *</b>
     */
    public interface IAmbiguousName:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>MethodName
     *</ul>
     *</b>
     */
    public interface IMethodName:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PackageOrTypeName
     *</ul>
     *</b>
     */
    public interface IPackageOrTypeName:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    public interface IPackageDeclarationopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ImportDeclarations
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclarations : IImportDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SingleTypeImportDeclaration
     *<li>TypeImportOnDemandDeclaration
     *<li>SingleStaticImportDeclaration
     *<li>StaticImportOnDemandDeclaration
     *</ul>
     *</b>
     */
    public interface IImportDeclaration : IImportDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclarations
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclarations : ITypeDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeDeclaration
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface ITypeDeclaration : ITypeDeclarations, IAstToken {}

    /**
     * is implemented by <b>PackageDeclaration</b>
     */
    public interface IPackageDeclaration : IPackageDeclarationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>SingleTypeImportDeclaration</b>
     */
    public interface ISingleTypeImportDeclaration : IImportDeclaration {}

    /**
     * is implemented by <b>TypeImportOnDemandDeclaration</b>
     */
    public interface ITypeImportOnDemandDeclaration : IImportDeclaration {}

    /**
     * is implemented by <b>SingleStaticImportDeclaration</b>
     */
    public interface ISingleStaticImportDeclaration : IImportDeclaration {}

    /**
     * is implemented by <b>StaticImportOnDemandDeclaration</b>
     */
    public interface IStaticImportOnDemandDeclaration : IImportDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *</ul>
     *</b>
     */
    public interface IClassDeclaration : ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration, IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceDeclaration : ITypeDeclaration, IClassMemberDeclaration, IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>NormalClassDeclaration</b>
     */
    public interface INormalClassDeclaration : IClassDeclaration {}

    /**
     * is implemented by <b>EnumDeclaration</b>
     */
    public interface IEnumDeclaration : IClassDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    public interface IClassModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>TypeParameters</b>
     */
    public interface ITypeParametersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Super</b>
     */
    public interface ISuperopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Interfaces</b>
     */
    public interface IInterfacesopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    public interface IClassBody : IClassBodyopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    public interface IClassModifiers : IClassModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ClassModifier0
     *<li>ClassModifier1
     *<li>ClassModifier2
     *<li>ClassModifier3
     *<li>ClassModifier4
     *<li>ClassModifier5
     *<li>ClassModifier6
     *</ul>
     *</b>
     */
    public interface IClassModifier : IClassModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotation : IClassModifier, IFieldModifier, IInterfaceModifier, IConstantModifier, IAnnotations, IElementValue {}

    /**
     * is implemented by <b>TypeParameters</b>
     */
    public interface ITypeParameters : ITypeParametersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TypeParameter
     *<li>TypeParameterList
     *</ul>
     *</b>
     */
    public interface ITypeParameterList:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Super</b>
     */
    public interface ISuper : ISuperopt {}

    /**
     * is implemented by <b>Interfaces</b>
     */
    public interface IInterfaces : IInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceType
     *<li>InterfaceTypeList
     *</ul>
     *</b>
     */
    public interface IInterfaceTypeList:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassBodyDeclarations
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclarations : IClassBodyDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>StaticInitializer
     *<li>ConstructorDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IClassBodyDeclaration : IClassBodyDeclarations {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>ClassMemberDeclaration
     *<li>FieldDeclaration
     *<li>MethodDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IClassMemberDeclaration : IClassBodyDeclaration, IAstToken {}

    /**
     * is implemented by <b>Block</b>
     */
    public interface IInstanceInitializer : IClassBodyDeclaration {}

    /**
     * is implemented by <b>StaticInitializer</b>
     */
    public interface IStaticInitializer : IClassBodyDeclaration {}

    /**
     * is implemented by <b>ConstructorDeclaration</b>
     */
    public interface IConstructorDeclaration : IClassBodyDeclaration {}

    /**
     * is implemented by <b>FieldDeclaration</b>
     */
    public interface IFieldDeclaration : IClassMemberDeclaration {}

    /**
     * is implemented by <b>MethodDeclaration</b>
     */
    public interface IMethodDeclaration : IClassMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    public interface IFieldModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarators
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclarators:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclarator
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclarator : IVariableDeclarators {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>VariableDeclaratorId
     *</ul>
     *</b>
     */
    public interface IVariableDeclaratorId : IVariableDeclarator {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IVariableInitializer : IVariableInitializers {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IExpression : IVariableInitializer, IArgumentList, IConstantExpression, IExpressionopt {}

    /**
     * is implemented by <b>ArrayInitializer</b>
     */
    public interface IArrayInitializer : IVariableInitializer {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    public interface IFieldModifiers : IFieldModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>FieldModifier0
     *<li>FieldModifier1
     *<li>FieldModifier2
     *<li>FieldModifier3
     *<li>FieldModifier4
     *<li>FieldModifier5
     *<li>FieldModifier6
     *</ul>
     *</b>
     */
    public interface IFieldModifier : IFieldModifiers, IAstToken {}

    /**
     * is implemented by <b>MethodHeader</b>
     */
    public interface IMethodHeader:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodBody
     *<li>Block
     *</ul>
     *</b>
     */
    public interface IMethodBody : IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    public interface IMethodModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>PrimitiveType
     *<li>ClassType
     *<li>ArrayType
     *<li>ResultType
     *<li>IntegralType0
     *<li>IntegralType1
     *<li>IntegralType2
     *<li>IntegralType3
     *<li>IntegralType4
     *<li>FloatingPointType0
     *<li>FloatingPointType1
     *</ul>
     *</b>
     */
    public interface IResultType : IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodDeclarator0
     *<li>MethodDeclarator1
     *</ul>
     *</b>
     */
    public interface IMethodDeclarator:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Throws</b>
     */
    public interface IThrowsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameterListopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameterList
     *<li>LastFormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameterList : IFormalParameterListopt {}

    /**
     * is implemented by <b>LastFormalParameter</b>
     */
    public interface ILastFormalParameter : IFormalParameterList {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FormalParameters
     *<li>FormalParameter
     *</ul>
     *</b>
     */
    public interface IFormalParameters:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>FormalParameter</b>
     */
    public interface IFormalParameter : IFormalParameters {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifiers
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifiers : IVariableModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>VariableModifier
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IVariableModifier : IVariableModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *</ul>
     *</b>
     */
    public interface IAnnotations : IVariableModifier, IMethodModifier, IConstructorModifier, IAbstractMethodModifier, IAnnotationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    public interface IMethodModifiers : IMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>MethodModifier0
     *<li>MethodModifier1
     *<li>MethodModifier2
     *<li>MethodModifier3
     *<li>MethodModifier4
     *<li>MethodModifier5
     *<li>MethodModifier6
     *<li>MethodModifier7
     *<li>MethodModifier8
     *</ul>
     *</b>
     */
    public interface IMethodModifier : IMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>Throws</b>
     */
    public interface IThrows : IThrowsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *<li>ExceptionTypeList
     *</ul>
     *</b>
     */
    public interface IExceptionTypeList:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ClassType
     *</ul>
     *</b>
     */
    public interface IExceptionType : IExceptionTypeList {}

    /**
     * is implemented by <b>Block</b>
     */
    public interface IBlock : IMethodBody, IInstanceInitializer, IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    public interface IConstructorModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ConstructorDeclarator</b>
     */
    public interface IConstructorDeclarator:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ConstructorBody</b>
     */
    public interface IConstructorBody:IRootForJavaParser    {
    }

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ISimpleTypeName:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstructorModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    public interface IConstructorModifiers : IConstructorModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstructorModifier0
     *<li>ConstructorModifier1
     *<li>ConstructorModifier2
     *</ul>
     *</b>
     */
    public interface IConstructorModifier : IConstructorModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation0
     *<li>ExplicitConstructorInvocation1
     *<li>ExplicitConstructorInvocation2
     *</ul>
     *</b>
     */
    public interface IExplicitConstructorInvocationopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExplicitConstructorInvocation0
     *<li>ExplicitConstructorInvocation1
     *<li>ExplicitConstructorInvocation2
     *</ul>
     *</b>
     */
    public interface IExplicitConstructorInvocation : IExplicitConstructorInvocationopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IArgumentListopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    public interface IPrimary : IPostfixExpression {}

    /**
     * is implemented by <b>EnumBody</b>
     */
    public interface IEnumBody:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstantsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    public interface IEnumBodyDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstants
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstants : IEnumConstantsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>EnumConstant
     *</ul>
     *</b>
     */
    public interface IEnumConstant : IEnumConstants {}

    /**
     * is implemented by <b>Arguments</b>
     */
    public interface IArgumentsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>ClassBody</b>
     */
    public interface IClassBodyopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Arguments</b>
     */
    public interface IArguments : IArgumentsopt {}

    /**
     * is implemented by <b>EnumBodyDeclarations</b>
     */
    public interface IEnumBodyDeclarations : IEnumBodyDeclarationsopt {}

    /**
     * is implemented by <b>NormalInterfaceDeclaration</b>
     */
    public interface INormalInterfaceDeclaration : IInterfaceDeclaration {}

    /**
     * is implemented by <b>AnnotationTypeDeclaration</b>
     */
    public interface IAnnotationTypeDeclaration : IInterfaceDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    public interface IInterfaceModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces0
     *<li>ExtendsInterfaces1
     *</ul>
     *</b>
     */
    public interface IExtendsInterfacesopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>InterfaceBody</b>
     */
    public interface IInterfaceBody:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>InterfaceModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    public interface IInterfaceModifiers : IInterfaceModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>InterfaceModifier0
     *<li>InterfaceModifier1
     *<li>InterfaceModifier2
     *<li>InterfaceModifier3
     *<li>InterfaceModifier4
     *<li>InterfaceModifier5
     *</ul>
     *</b>
     */
    public interface IInterfaceModifier : IInterfaceModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ExtendsInterfaces0
     *<li>ExtendsInterfaces1
     *</ul>
     *</b>
     */
    public interface IExtendsInterfaces : IExtendsInterfacesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclarations
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclarations : IInterfaceMemberDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>InterfaceMemberDeclaration
     *<li>ConstantDeclaration
     *<li>AbstractMethodDeclaration
     *<li>AnnotationTypeDeclaration
     *</ul>
     *</b>
     */
    public interface IInterfaceMemberDeclaration : IInterfaceMemberDeclarations, IAstToken {}

    /**
     * is implemented by <b>ConstantDeclaration</b>
     */
    public interface IConstantDeclaration : IInterfaceMemberDeclaration, IAnnotationTypeElementDeclaration {}

    /**
     * is implemented by <b>AbstractMethodDeclaration</b>
     */
    public interface IAbstractMethodDeclaration : IInterfaceMemberDeclaration {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    public interface IConstantModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ConstantModifiers
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    public interface IConstantModifiers : IConstantModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>ConstantModifier0
     *<li>ConstantModifier1
     *<li>ConstantModifier2
     *</ul>
     *</b>
     */
    public interface IConstantModifier : IConstantModifiers, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifiersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AbstractMethodModifiers
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifiers : IAbstractMethodModifiersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Annotations
     *<li>NormalAnnotation
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>AbstractMethodModifier0
     *<li>AbstractMethodModifier1
     *</ul>
     *</b>
     */
    public interface IAbstractMethodModifier : IAbstractMethodModifiers, IAstToken {}

    /**
     * is implemented by <b>AnnotationTypeBody</b>
     */
    public interface IAnnotationTypeBody:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclarationsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclarations
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclarations : IAnnotationTypeElementDeclarationsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>NormalInterfaceDeclaration
     *<li>ConstantDeclaration
     *<li>AnnotationTypeDeclaration
     *<li>AnnotationTypeElementDeclaration0
     *<li>AnnotationTypeElementDeclaration1
     *</ul>
     *</b>
     */
    public interface IAnnotationTypeElementDeclaration : IAnnotationTypeElementDeclarations, IAstToken {}

    /**
     * is implemented by <b>DefaultValue</b>
     */
    public interface IDefaultValueopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>DefaultValue</b>
     */
    public interface IDefaultValue : IDefaultValueopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IElementValue : IElementValues {}

    /**
     * is implemented by <b>NormalAnnotation</b>
     */
    public interface INormalAnnotation : IAnnotation {}

    /**
     * is implemented by <b>MarkerAnnotation</b>
     */
    public interface IMarkerAnnotation : IAnnotation {}

    /**
     * is implemented by <b>SingleElementAnnotation</b>
     */
    public interface ISingleElementAnnotation : IAnnotation {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    public interface IElementValuePairsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ElementValuePairs
     *<li>ElementValuePair
     *</ul>
     *</b>
     */
    public interface IElementValuePairs : IElementValuePairsopt {}

    /**
     * is implemented by <b>ElementValuePair</b>
     */
    public interface IElementValuePair : IElementValuePairs {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface ISimpleName:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IConditionalExpression : IElementValue, IAssignmentExpression {}

    /**
     * is implemented by <b>ElementValueArrayInitializer</b>
     */
    public interface IElementValueArrayInitializer : IElementValue {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IElementValuesopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>NormalAnnotation
     *<li>ElementValueArrayInitializer
     *<li>ElementValues
     *<li>MarkerAnnotation
     *<li>SingleElementAnnotation
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IElementValues : IElementValuesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IVariableInitializersopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArrayInitializer
     *<li>VariableInitializers
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IVariableInitializers : IVariableInitializersopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>BlockStatements
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IBlockStatements : IBlockStatementsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>NormalClassDeclaration
     *<li>EnumDeclaration
     *<li>Block
     *<li>LocalVariableDeclarationStatement
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IBlockStatement : IBlockStatements {}

    /**
     * is implemented by <b>LocalVariableDeclarationStatement</b>
     */
    public interface ILocalVariableDeclarationStatement : IBlockStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenStatement
     *<li>IfThenElseStatement
     *<li>EmptyStatement
     *<li>LabeledStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatement
     *<li>DoStatement
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IStatement : IBlockStatement {}

    /**
     * is implemented by <b>LocalVariableDeclaration</b>
     */
    public interface ILocalVariableDeclaration : IForInit {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>EmptyStatement
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>DoStatement
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IStatementWithoutTrailingSubstatement : IStatement, IStatementNoShortIf {}

    /**
     * is implemented by <b>LabeledStatement</b>
     */
    public interface ILabeledStatement : IStatement {}

    /**
     * is implemented by <b>IfThenStatement</b>
     */
    public interface IIfThenStatement : IStatement {}

    /**
     * is implemented by <b>IfThenElseStatement</b>
     */
    public interface IIfThenElseStatement : IStatement {}

    /**
     * is implemented by <b>WhileStatement</b>
     */
    public interface IWhileStatement : IStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>BasicForStatement
     *<li>EnhancedForStatement
     *</ul>
     *</b>
     */
    public interface IForStatement : IStatement {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>EmptyStatement</b>
     */
    public interface IEmptyStatement : IStatementWithoutTrailingSubstatement, IAstToken {}

    /**
     * is implemented by <b>ExpressionStatement</b>
     */
    public interface IExpressionStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssertStatement0
     *<li>AssertStatement1
     *</ul>
     *</b>
     */
    public interface IAssertStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SwitchStatement</b>
     */
    public interface ISwitchStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>DoStatement</b>
     */
    public interface IDoStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>BreakStatement</b>
     */
    public interface IBreakStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ContinueStatement</b>
     */
    public interface IContinueStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ReturnStatement</b>
     */
    public interface IReturnStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>SynchronizedStatement</b>
     */
    public interface ISynchronizedStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by <b>ThrowStatement</b>
     */
    public interface IThrowStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface ITryStatement : IStatementWithoutTrailingSubstatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Block
     *<li>IfThenElseStatementNoShortIf
     *<li>EmptyStatement
     *<li>LabeledStatementNoShortIf
     *<li>ExpressionStatement
     *<li>SwitchStatement
     *<li>WhileStatementNoShortIf
     *<li>DoStatement
     *<li>ForStatementNoShortIf
     *<li>BreakStatement
     *<li>ContinueStatement
     *<li>ReturnStatement
     *<li>ThrowStatement
     *<li>SynchronizedStatement
     *<li>AssertStatement0
     *<li>AssertStatement1
     *<li>TryStatement0
     *<li>TryStatement1
     *</ul>
     *</b>
     */
    public interface IStatementNoShortIf:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>LabeledStatementNoShortIf</b>
     */
    public interface ILabeledStatementNoShortIf : IStatementNoShortIf {}

    /**
     * is implemented by <b>IfThenElseStatementNoShortIf</b>
     */
    public interface IIfThenElseStatementNoShortIf : IStatementNoShortIf {}

    /**
     * is implemented by <b>WhileStatementNoShortIf</b>
     */
    public interface IWhileStatementNoShortIf : IStatementNoShortIf {}

    /**
     * is implemented by <b>ForStatementNoShortIf</b>
     */
    public interface IForStatementNoShortIf : IStatementNoShortIf {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IStatementExpression : IStatementExpressionList {}

    /**
     * is implemented by <b>Assignment</b>
     */
    public interface IAssignment : IStatementExpression, IAssignmentExpression {}

    /**
     * is implemented by <b>PreIncrementExpression</b>
     */
    public interface IPreIncrementExpression : IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PreDecrementExpression</b>
     */
    public interface IPreDecrementExpression : IStatementExpression, IUnaryExpression {}

    /**
     * is implemented by <b>PostIncrementExpression</b>
     */
    public interface IPostIncrementExpression : IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by <b>PostDecrementExpression</b>
     */
    public interface IPostDecrementExpression : IStatementExpression, IPostfixExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IMethodInvocation : IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *</ul>
     *</b>
     */
    public interface IClassInstanceCreationExpression : IStatementExpression, IPrimaryNoNewArray {}

    /**
     * is implemented by <b>SwitchBlock</b>
     */
    public interface ISwitchBlock:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    public interface ISwitchBlockStatementGroupsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    public interface ISwitchLabelsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchBlockStatementGroups
     *<li>SwitchBlockStatementGroup
     *</ul>
     *</b>
     */
    public interface ISwitchBlockStatementGroups : ISwitchBlockStatementGroupsopt {}

    /**
     * is implemented by <b>SwitchBlockStatementGroup</b>
     */
    public interface ISwitchBlockStatementGroup : ISwitchBlockStatementGroups {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabels
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    public interface ISwitchLabels : ISwitchLabelsopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>SwitchLabel0
     *<li>SwitchLabel1
     *<li>SwitchLabel2
     *</ul>
     *</b>
     */
    public interface ISwitchLabel : ISwitchLabels {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IConstantExpression:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>BasicForStatement</b>
     */
    public interface IBasicForStatement : IForStatement {}

    /**
     * is implemented by <b>EnhancedForStatement</b>
     */
    public interface IEnhancedForStatement : IForStatement {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IForInitopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IExpressionopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IForUpdateopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>LocalVariableDeclaration
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IForInit : IForInitopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IStatementExpressionList : IForInit, IForUpdate {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>StatementExpressionList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>Assignment
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *</ul>
     *</b>
     */
    public interface IForUpdate : IForUpdateopt {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by <b>identifier</b>
     */
    public interface Iidentifieropt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    public interface ICatches : ICatchesopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Catches
     *<li>CatchClause
     *</ul>
     *</b>
     */
    public interface ICatchesopt:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>Finally</b>
     */
    public interface IFinally:IRootForJavaParser    {
    }

    /**
     * is implemented by <b>CatchClause</b>
     */
    public interface ICatchClause : ICatches {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    public interface IPrimaryNoNewArray : IPrimary, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *</ul>
     *</b>
     */
    public interface IArrayCreationExpression : IPrimary {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *</ul>
     *</b>
     */
    public interface ILiteral : IPrimaryNoNewArray, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *</ul>
     *</b>
     */
    public interface IFieldAccess : IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    public interface IArrayAccess : IPrimaryNoNewArray, ILeftHandSide {}

    /**
     * is always implemented by <b>AstToken</b>. It is also implemented by:
     *<b>
     *<ul>
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *</ul>
     *</b>
     */
    public interface IBooleanLiteral : ILiteral, IAstToken {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>ArgumentList
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IArgumentList : IArgumentListopt {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>DimExprs
     *<li>DimExpr
     *</ul>
     *</b>
     */
    public interface IDimExprs:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims0
     *<li>Dims1
     *</ul>
     *</b>
     */
    public interface IDimsopt:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>Dims0
     *<li>Dims1
     *</ul>
     *</b>
     */
    public interface IDims : IDimsopt {}

    /**
     * is implemented by <b>DimExpr</b>
     */
    public interface IDimExpr : IDimExprs {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    public interface IPostfixExpression : IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    public interface IUnaryExpression : IMultiplicativeExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    public interface IUnaryExpressionNotPlusMinus : IUnaryExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>CastExpression0
     *<li>CastExpression1
     *</ul>
     *</b>
     */
    public interface ICastExpression : IUnaryExpressionNotPlusMinus {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *</ul>
     *</b>
     */
    public interface IMultiplicativeExpression : IAdditiveExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *</ul>
     *</b>
     */
    public interface IAdditiveExpression : IShiftExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *</ul>
     *</b>
     */
    public interface IShiftExpression : IRelationalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *</ul>
     *</b>
     */
    public interface IRelationalExpression : IEqualityExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IEqualityExpression : IAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IAndExpression : IExclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IExclusiveOrExpression : IInclusiveOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IInclusiveOrExpression : IConditionalAndExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IConditionalAndExpression : IConditionalOrExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IConditionalOrExpression : IConditionalExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>PostIncrementExpression
     *<li>PostDecrementExpression
     *<li>PreIncrementExpression
     *<li>PreDecrementExpression
     *<li>AndExpression
     *<li>ExclusiveOrExpression
     *<li>InclusiveOrExpression
     *<li>ConditionalAndExpression
     *<li>ConditionalOrExpression
     *<li>ConditionalExpression
     *<li>Assignment
     *<li>PrimaryNoNewArray0
     *<li>PrimaryNoNewArray1
     *<li>PrimaryNoNewArray2
     *<li>PrimaryNoNewArray3
     *<li>PrimaryNoNewArray4
     *<li>Literal0
     *<li>Literal1
     *<li>Literal2
     *<li>Literal3
     *<li>Literal4
     *<li>Literal5
     *<li>Literal6
     *<li>BooleanLiteral0
     *<li>BooleanLiteral1
     *<li>ClassInstanceCreationExpression0
     *<li>ClassInstanceCreationExpression1
     *<li>ArrayCreationExpression0
     *<li>ArrayCreationExpression1
     *<li>ArrayCreationExpression2
     *<li>ArrayCreationExpression3
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>MethodInvocation0
     *<li>MethodInvocation1
     *<li>MethodInvocation2
     *<li>MethodInvocation3
     *<li>MethodInvocation4
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *<li>UnaryExpression0
     *<li>UnaryExpression1
     *<li>UnaryExpressionNotPlusMinus0
     *<li>UnaryExpressionNotPlusMinus1
     *<li>CastExpression0
     *<li>CastExpression1
     *<li>MultiplicativeExpression0
     *<li>MultiplicativeExpression1
     *<li>MultiplicativeExpression2
     *<li>AdditiveExpression0
     *<li>AdditiveExpression1
     *<li>ShiftExpression0
     *<li>ShiftExpression1
     *<li>ShiftExpression2
     *<li>RelationalExpression0
     *<li>RelationalExpression1
     *<li>RelationalExpression2
     *<li>RelationalExpression3
     *<li>RelationalExpression4
     *<li>EqualityExpression0
     *<li>EqualityExpression1
     *</ul>
     *</b>
     */
    public interface IAssignmentExpression : IExpression {}

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>identifier
     *<li>ExpressionName
     *<li>FieldAccess0
     *<li>FieldAccess1
     *<li>FieldAccess2
     *<li>ArrayAccess0
     *<li>ArrayAccess1
     *</ul>
     *</b>
     */
    public interface ILeftHandSide:IRootForJavaParser    {
    }

    /**
     * is implemented by:
     *<b>
     *<ul>
     *<li>AssignmentOperator0
     *<li>AssignmentOperator1
     *<li>AssignmentOperator2
     *<li>AssignmentOperator3
     *<li>AssignmentOperator4
     *<li>AssignmentOperator5
     *<li>AssignmentOperator6
     *<li>AssignmentOperator7
     *<li>AssignmentOperator8
     *<li>AssignmentOperator9
     *<li>AssignmentOperator10
     *<li>AssignmentOperator11
     *</ul>
     *</b>
     */
    public interface IAssignmentOperator : IAstToken {}

    /**
     *<b>
    *<li>Rule 3:  identifier ::= IDENTIFIER
     *</b>
     */
    public class identifier : AstToken , Iidentifier
    {
        private JavaParser environment;
        public JavaParser getEnvironment() { return environment; }

        public IToken getIDENTIFIER() { return leftIToken; }

        public identifier(JavaParser environment, IToken token)            :base(token)
        {
            this.environment = environment;
            initialize();
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }

    //#line 186 "GJavaParser.g


        }

    /**
     *<em>
    *<li>Rule 12:  PrimitiveType ::= NumericType
     *</em>
     *<p>
     *<b>
    *<li>Rule 13:  PrimitiveType ::= boolean
     *</b>
     */
    public class PrimitiveType : AstToken , IPrimitiveType
    {
        public IToken getboolean() { return leftIToken; }

        public PrimitiveType(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 27:  ClassType ::= TypeName TypeArgumentsopt
     *</b>
     */
    public class ClassType : Ast , IClassType
    {
        private ITypeName _TypeName;
        private TypeArguments _TypeArgumentsopt;

        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }

        public ClassType(IToken leftIToken, IToken rightIToken,
                         ITypeName _TypeName,
                         TypeArguments _TypeArgumentsopt)
            :base(leftIToken, rightIToken)

        {
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeName != null)  list.Add(_TypeName);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassType)) return false;
            if (! base.Equals(o)) return false;
            ClassType other = (ClassType) o;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
     *</b>
     */
    public class InterfaceType : Ast , IInterfaceType
    {
        private ITypeName _TypeName;
        private TypeArguments _TypeArgumentsopt;

        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }

        public InterfaceType(IToken leftIToken, IToken rightIToken,
                             ITypeName _TypeName,
                             TypeArguments _TypeArgumentsopt)
            :base(leftIToken, rightIToken)

        {
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeName != null)  list.Add(_TypeName);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InterfaceType)) return false;
            if (! base.Equals(o)) return false;
            InterfaceType other = (InterfaceType) o;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 29:  TypeName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 30:  TypeName ::= TypeName . identifier
     *</b>
     */
    public class TypeName : Ast , ITypeName
    {
        private ITypeName _TypeName;
        private AstToken _DOT;
        private identifier _identifier;

        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public TypeName(IToken leftIToken, IToken rightIToken,
                        ITypeName _TypeName,
                        AstToken _DOT,
                        identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeName != null)  list.Add(_TypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeName)) return false;
            if (! base.Equals(o)) return false;
            TypeName other = (TypeName) o;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 33:  ArrayType ::= Type [ ]
     *</b>
     */
    public class ArrayType : Ast , IArrayType
    {
        private IType _Type;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public ArrayType(IToken leftIToken, IToken rightIToken,
                         IType _Type,
                         AstToken _LBRACKET,
                         AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Type != null)  list.Add(_Type);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayType)) return false;
            if (! base.Equals(o)) return false;
            ArrayType other = (ArrayType) o;
            if (! _Type.Equals(other._Type)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
     *</b>
     */
    public class TypeParameter : Ast , ITypeParameter
    {
        private identifier _TypeVariable;
        private TypeBound _TypeBoundopt;

        public identifier getTypeVariable() { return _TypeVariable; }
        public void setTypeVariable(identifier _TypeVariable) { this._TypeVariable = _TypeVariable; }
        /**
         * The value returned by <b>getTypeBoundopt</b> may be <b>null</b>
         */
        public TypeBound getTypeBoundopt() { return _TypeBoundopt; }
        public void setTypeBoundopt(TypeBound _TypeBoundopt) { this._TypeBoundopt = _TypeBoundopt; }

        public TypeParameter(IToken leftIToken, IToken rightIToken,
                             identifier _TypeVariable,
                             TypeBound _TypeBoundopt)
            :base(leftIToken, rightIToken)

        {
            this._TypeVariable = _TypeVariable;
            ((Ast) _TypeVariable).setParent(this);
            this._TypeBoundopt = _TypeBoundopt;
            if (_TypeBoundopt != null) ((Ast) _TypeBoundopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeVariable != null)  list.Add(_TypeVariable);
            if(_TypeBoundopt != null)  list.Add(_TypeBoundopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeParameter)) return false;
            if (! base.Equals(o)) return false;
            TypeParameter other = (TypeParameter) o;
            if (! _TypeVariable.Equals(other._TypeVariable)) return false;
            if (_TypeBoundopt == null)
                if (other._TypeBoundopt != null) return false;
                else{}// continue
            else if (! _TypeBoundopt.Equals(other._TypeBoundopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeVariable.GetHashCode());
            hash = hash * 31 + (_TypeBoundopt == null ? 0 : _TypeBoundopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
     *</b>
     */
    public class TypeBound : Ast , ITypeBound
    {
        private AstToken _extends;
        private ClassType _ClassOrInterfaceType;
        private IAdditionalBoundListopt _AdditionalBoundListopt;

        public AstToken getextends() { return _extends; }
        public void setextends(AstToken _extends) { this._extends = _extends; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public void setClassOrInterfaceType(ClassType _ClassOrInterfaceType) { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getAdditionalBoundListopt</b> may be <b>null</b>
         */
        public IAdditionalBoundListopt getAdditionalBoundListopt() { return _AdditionalBoundListopt; }
        public void setAdditionalBoundListopt(IAdditionalBoundListopt _AdditionalBoundListopt) { this._AdditionalBoundListopt = _AdditionalBoundListopt; }

        public TypeBound(IToken leftIToken, IToken rightIToken,
                         AstToken _extends,
                         ClassType _ClassOrInterfaceType,
                         IAdditionalBoundListopt _AdditionalBoundListopt)
            :base(leftIToken, rightIToken)

        {
            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._AdditionalBoundListopt = _AdditionalBoundListopt;
            if (_AdditionalBoundListopt != null) ((Ast) _AdditionalBoundListopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_extends != null)  list.Add(_extends);
            if(_ClassOrInterfaceType != null)  list.Add(_ClassOrInterfaceType);
            if(_AdditionalBoundListopt != null)  list.Add(_AdditionalBoundListopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeBound)) return false;
            if (! base.Equals(o)) return false;
            TypeBound other = (TypeBound) o;
            if (! _extends.Equals(other._extends)) return false;
            if (! _ClassOrInterfaceType.Equals(other._ClassOrInterfaceType)) return false;
            if (_AdditionalBoundListopt == null)
                if (other._AdditionalBoundListopt != null) return false;
                else{}// continue
            else if (! _AdditionalBoundListopt.Equals(other._AdditionalBoundListopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_extends.GetHashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.GetHashCode());
            hash = hash * 31 + (_AdditionalBoundListopt == null ? 0 : _AdditionalBoundListopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 36:  AdditionalBoundList ::= AdditionalBound
     *</em>
     *<p>
     *<b>
    *<li>Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
     *</b>
     */
    public class AdditionalBoundList : Ast , IAdditionalBoundList
    {
        private IAdditionalBoundList _AdditionalBoundList;
        private AdditionalBound _AdditionalBound;

        public IAdditionalBoundList getAdditionalBoundList() { return _AdditionalBoundList; }
        public void setAdditionalBoundList(IAdditionalBoundList _AdditionalBoundList) { this._AdditionalBoundList = _AdditionalBoundList; }
        public AdditionalBound getAdditionalBound() { return _AdditionalBound; }
        public void setAdditionalBound(AdditionalBound _AdditionalBound) { this._AdditionalBound = _AdditionalBound; }

        public AdditionalBoundList(IToken leftIToken, IToken rightIToken,
                                   IAdditionalBoundList _AdditionalBoundList,
                                   AdditionalBound _AdditionalBound)
            :base(leftIToken, rightIToken)

        {
            this._AdditionalBoundList = _AdditionalBoundList;
            ((Ast) _AdditionalBoundList).setParent(this);
            this._AdditionalBound = _AdditionalBound;
            ((Ast) _AdditionalBound).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AdditionalBoundList != null)  list.Add(_AdditionalBoundList);
            if(_AdditionalBound != null)  list.Add(_AdditionalBound);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AdditionalBoundList)) return false;
            if (! base.Equals(o)) return false;
            AdditionalBoundList other = (AdditionalBoundList) o;
            if (! _AdditionalBoundList.Equals(other._AdditionalBoundList)) return false;
            if (! _AdditionalBound.Equals(other._AdditionalBound)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AdditionalBoundList.GetHashCode());
            hash = hash * 31 + (_AdditionalBound.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 38:  AdditionalBound ::= & InterfaceType
     *</b>
     */
    public class AdditionalBound : Ast , IAdditionalBound
    {
        private AstToken _AND;
        private InterfaceType _InterfaceType;

        public AstToken getAND() { return _AND; }
        public void setAND(AstToken _AND) { this._AND = _AND; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }
        public void setInterfaceType(InterfaceType _InterfaceType) { this._InterfaceType = _InterfaceType; }

        public AdditionalBound(IToken leftIToken, IToken rightIToken,
                               AstToken _AND,
                               InterfaceType _InterfaceType)
            :base(leftIToken, rightIToken)

        {
            this._AND = _AND;
            ((Ast) _AND).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AND != null)  list.Add(_AND);
            if(_InterfaceType != null)  list.Add(_InterfaceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AdditionalBound)) return false;
            if (! base.Equals(o)) return false;
            AdditionalBound other = (AdditionalBound) o;
            if (! _AND.Equals(other._AND)) return false;
            if (! _InterfaceType.Equals(other._InterfaceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AND.GetHashCode());
            hash = hash * 31 + (_InterfaceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
     *</b>
     */
    public class TypeArguments : Ast , ITypeArguments
    {
        private AstToken _LESS;
        private IActualTypeArgumentList _ActualTypeArgumentList;
        private AstToken _GREATER;

        public AstToken getLESS() { return _LESS; }
        public void setLESS(AstToken _LESS) { this._LESS = _LESS; }
        public IActualTypeArgumentList getActualTypeArgumentList() { return _ActualTypeArgumentList; }
        public void setActualTypeArgumentList(IActualTypeArgumentList _ActualTypeArgumentList) { this._ActualTypeArgumentList = _ActualTypeArgumentList; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }

        public TypeArguments(IToken leftIToken, IToken rightIToken,
                             AstToken _LESS,
                             IActualTypeArgumentList _ActualTypeArgumentList,
                             AstToken _GREATER)
            :base(leftIToken, rightIToken)

        {
            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            ((Ast) _ActualTypeArgumentList).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LESS != null)  list.Add(_LESS);
            if(_ActualTypeArgumentList != null)  list.Add(_ActualTypeArgumentList);
            if(_GREATER != null)  list.Add(_GREATER);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeArguments)) return false;
            if (! base.Equals(o)) return false;
            TypeArguments other = (TypeArguments) o;
            if (! _LESS.Equals(other._LESS)) return false;
            if (! _ActualTypeArgumentList.Equals(other._ActualTypeArgumentList)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LESS.GetHashCode());
            hash = hash * 31 + (_ActualTypeArgumentList.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
     *</em>
     *<p>
     *<b>
    *<li>Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
     *</b>
     */
    public class ActualTypeArgumentList : Ast , IActualTypeArgumentList
    {
        private IActualTypeArgumentList _ActualTypeArgumentList;
        private AstToken _COMMA;
        private IActualTypeArgument _ActualTypeArgument;

        public IActualTypeArgumentList getActualTypeArgumentList() { return _ActualTypeArgumentList; }
        public void setActualTypeArgumentList(IActualTypeArgumentList _ActualTypeArgumentList) { this._ActualTypeArgumentList = _ActualTypeArgumentList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IActualTypeArgument getActualTypeArgument() { return _ActualTypeArgument; }
        public void setActualTypeArgument(IActualTypeArgument _ActualTypeArgument) { this._ActualTypeArgument = _ActualTypeArgument; }

        public ActualTypeArgumentList(IToken leftIToken, IToken rightIToken,
                                      IActualTypeArgumentList _ActualTypeArgumentList,
                                      AstToken _COMMA,
                                      IActualTypeArgument _ActualTypeArgument)
            :base(leftIToken, rightIToken)

        {
            this._ActualTypeArgumentList = _ActualTypeArgumentList;
            ((Ast) _ActualTypeArgumentList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ActualTypeArgument = _ActualTypeArgument;
            ((Ast) _ActualTypeArgument).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ActualTypeArgumentList != null)  list.Add(_ActualTypeArgumentList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_ActualTypeArgument != null)  list.Add(_ActualTypeArgument);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ActualTypeArgumentList)) return false;
            if (! base.Equals(o)) return false;
            ActualTypeArgumentList other = (ActualTypeArgumentList) o;
            if (! _ActualTypeArgumentList.Equals(other._ActualTypeArgumentList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _ActualTypeArgument.Equals(other._ActualTypeArgument)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ActualTypeArgumentList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_ActualTypeArgument.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 44:  Wildcard ::= ? WildcardBoundsOpt
     *</b>
     */
    public class Wildcard : Ast , IWildcard
    {
        private AstToken _QUESTION;
        private IWildcardBoundsOpt _WildcardBoundsOpt;

        public AstToken getQUESTION() { return _QUESTION; }
        public void setQUESTION(AstToken _QUESTION) { this._QUESTION = _QUESTION; }
        /**
         * The value returned by <b>getWildcardBoundsOpt</b> may be <b>null</b>
         */
        public IWildcardBoundsOpt getWildcardBoundsOpt() { return _WildcardBoundsOpt; }
        public void setWildcardBoundsOpt(IWildcardBoundsOpt _WildcardBoundsOpt) { this._WildcardBoundsOpt = _WildcardBoundsOpt; }

        public Wildcard(IToken leftIToken, IToken rightIToken,
                        AstToken _QUESTION,
                        IWildcardBoundsOpt _WildcardBoundsOpt)
            :base(leftIToken, rightIToken)

        {
            this._QUESTION = _QUESTION;
            ((Ast) _QUESTION).setParent(this);
            this._WildcardBoundsOpt = _WildcardBoundsOpt;
            if (_WildcardBoundsOpt != null) ((Ast) _WildcardBoundsOpt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_QUESTION != null)  list.Add(_QUESTION);
            if(_WildcardBoundsOpt != null)  list.Add(_WildcardBoundsOpt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Wildcard)) return false;
            if (! base.Equals(o)) return false;
            Wildcard other = (Wildcard) o;
            if (! _QUESTION.Equals(other._QUESTION)) return false;
            if (_WildcardBoundsOpt == null)
                if (other._WildcardBoundsOpt != null) return false;
                else{}// continue
            else if (! _WildcardBoundsOpt.Equals(other._WildcardBoundsOpt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_QUESTION.GetHashCode());
            hash = hash * 31 + (_WildcardBoundsOpt == null ? 0 : _WildcardBoundsOpt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 47:  PackageName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 48:  PackageName ::= PackageName . identifier
     *</b>
     */
    public class PackageName : Ast , IPackageName
    {
        private IPackageName _PackageName;
        private AstToken _DOT;
        private identifier _identifier;

        public IPackageName getPackageName() { return _PackageName; }
        public void setPackageName(IPackageName _PackageName) { this._PackageName = _PackageName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public PackageName(IToken leftIToken, IToken rightIToken,
                           IPackageName _PackageName,
                           AstToken _DOT,
                           identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._PackageName = _PackageName;
            ((Ast) _PackageName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PackageName != null)  list.Add(_PackageName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PackageName)) return false;
            if (! base.Equals(o)) return false;
            PackageName other = (PackageName) o;
            if (! _PackageName.Equals(other._PackageName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PackageName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 49:  ExpressionName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 50:  ExpressionName ::= AmbiguousName . identifier
     *</b>
     */
    public class ExpressionName : Ast , IExpressionName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public void setAmbiguousName(IAmbiguousName _AmbiguousName) { this._AmbiguousName = _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public ExpressionName(IToken leftIToken, IToken rightIToken,
                              IAmbiguousName _AmbiguousName,
                              AstToken _DOT,
                              identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AmbiguousName != null)  list.Add(_AmbiguousName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExpressionName)) return false;
            if (! base.Equals(o)) return false;
            ExpressionName other = (ExpressionName) o;
            if (! _AmbiguousName.Equals(other._AmbiguousName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AmbiguousName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 51:  MethodName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 52:  MethodName ::= AmbiguousName . identifier
     *</b>
     */
    public class MethodName : Ast , IMethodName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public void setAmbiguousName(IAmbiguousName _AmbiguousName) { this._AmbiguousName = _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public MethodName(IToken leftIToken, IToken rightIToken,
                          IAmbiguousName _AmbiguousName,
                          AstToken _DOT,
                          identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AmbiguousName != null)  list.Add(_AmbiguousName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodName)) return false;
            if (! base.Equals(o)) return false;
            MethodName other = (MethodName) o;
            if (! _AmbiguousName.Equals(other._AmbiguousName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AmbiguousName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 53:  PackageOrTypeName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
     *</b>
     */
    public class PackageOrTypeName : Ast , IPackageOrTypeName
    {
        private IPackageOrTypeName _PackageOrTypeName;
        private AstToken _DOT;
        private identifier _identifier;

        public IPackageOrTypeName getPackageOrTypeName() { return _PackageOrTypeName; }
        public void setPackageOrTypeName(IPackageOrTypeName _PackageOrTypeName) { this._PackageOrTypeName = _PackageOrTypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public PackageOrTypeName(IToken leftIToken, IToken rightIToken,
                                 IPackageOrTypeName _PackageOrTypeName,
                                 AstToken _DOT,
                                 identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._PackageOrTypeName = _PackageOrTypeName;
            ((Ast) _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PackageOrTypeName != null)  list.Add(_PackageOrTypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PackageOrTypeName)) return false;
            if (! base.Equals(o)) return false;
            PackageOrTypeName other = (PackageOrTypeName) o;
            if (! _PackageOrTypeName.Equals(other._PackageOrTypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PackageOrTypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 55:  AmbiguousName ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 56:  AmbiguousName ::= AmbiguousName . identifier
     *</b>
     */
    public class AmbiguousName : Ast , IAmbiguousName
    {
        private IAmbiguousName _AmbiguousName;
        private AstToken _DOT;
        private identifier _identifier;

        public IAmbiguousName getAmbiguousName() { return _AmbiguousName; }
        public void setAmbiguousName(IAmbiguousName _AmbiguousName) { this._AmbiguousName = _AmbiguousName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public AmbiguousName(IToken leftIToken, IToken rightIToken,
                             IAmbiguousName _AmbiguousName,
                             AstToken _DOT,
                             identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._AmbiguousName = _AmbiguousName;
            ((Ast) _AmbiguousName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AmbiguousName != null)  list.Add(_AmbiguousName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AmbiguousName)) return false;
            if (! base.Equals(o)) return false;
            AmbiguousName other = (AmbiguousName) o;
            if (! _AmbiguousName.Equals(other._AmbiguousName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AmbiguousName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
     *</b>
     */
    public class CompilationUnit : Ast , ICompilationUnit
    {
        private PackageDeclaration _PackageDeclarationopt;
        private IImportDeclarationsopt _ImportDeclarationsopt;
        private ITypeDeclarationsopt _TypeDeclarationsopt;

        /**
         * The value returned by <b>getPackageDeclarationopt</b> may be <b>null</b>
         */
        public PackageDeclaration getPackageDeclarationopt() { return _PackageDeclarationopt; }
        public void setPackageDeclarationopt(PackageDeclaration _PackageDeclarationopt) { this._PackageDeclarationopt = _PackageDeclarationopt; }
        /**
         * The value returned by <b>getImportDeclarationsopt</b> may be <b>null</b>
         */
        public IImportDeclarationsopt getImportDeclarationsopt() { return _ImportDeclarationsopt; }
        public void setImportDeclarationsopt(IImportDeclarationsopt _ImportDeclarationsopt) { this._ImportDeclarationsopt = _ImportDeclarationsopt; }
        /**
         * The value returned by <b>getTypeDeclarationsopt</b> may be <b>null</b>
         */
        public ITypeDeclarationsopt getTypeDeclarationsopt() { return _TypeDeclarationsopt; }
        public void setTypeDeclarationsopt(ITypeDeclarationsopt _TypeDeclarationsopt) { this._TypeDeclarationsopt = _TypeDeclarationsopt; }

        public CompilationUnit(IToken leftIToken, IToken rightIToken,
                               PackageDeclaration _PackageDeclarationopt,
                               IImportDeclarationsopt _ImportDeclarationsopt,
                               ITypeDeclarationsopt _TypeDeclarationsopt)
            :base(leftIToken, rightIToken)

        {
            this._PackageDeclarationopt = _PackageDeclarationopt;
            if (_PackageDeclarationopt != null) ((Ast) _PackageDeclarationopt).setParent(this);
            this._ImportDeclarationsopt = _ImportDeclarationsopt;
            if (_ImportDeclarationsopt != null) ((Ast) _ImportDeclarationsopt).setParent(this);
            this._TypeDeclarationsopt = _TypeDeclarationsopt;
            if (_TypeDeclarationsopt != null) ((Ast) _TypeDeclarationsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PackageDeclarationopt != null)  list.Add(_PackageDeclarationopt);
            if(_ImportDeclarationsopt != null)  list.Add(_ImportDeclarationsopt);
            if(_TypeDeclarationsopt != null)  list.Add(_TypeDeclarationsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is CompilationUnit)) return false;
            if (! base.Equals(o)) return false;
            CompilationUnit other = (CompilationUnit) o;
            if (_PackageDeclarationopt == null)
                if (other._PackageDeclarationopt != null) return false;
                else{}// continue
            else if (! _PackageDeclarationopt.Equals(other._PackageDeclarationopt)) return false;
            if (_ImportDeclarationsopt == null)
                if (other._ImportDeclarationsopt != null) return false;
                else{}// continue
            else if (! _ImportDeclarationsopt.Equals(other._ImportDeclarationsopt)) return false;
            if (_TypeDeclarationsopt == null)
                if (other._TypeDeclarationsopt != null) return false;
                else{}// continue
            else if (! _TypeDeclarationsopt.Equals(other._TypeDeclarationsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PackageDeclarationopt == null ? 0 : _PackageDeclarationopt.GetHashCode());
            hash = hash * 31 + (_ImportDeclarationsopt == null ? 0 : _ImportDeclarationsopt.GetHashCode());
            hash = hash * 31 + (_TypeDeclarationsopt == null ? 0 : _TypeDeclarationsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 58:  ImportDeclarations ::= ImportDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
     *</b>
     */
    public class ImportDeclarations : Ast , IImportDeclarations
    {
        private IImportDeclarations _ImportDeclarations;
        private IImportDeclaration _ImportDeclaration;

        public IImportDeclarations getImportDeclarations() { return _ImportDeclarations; }
        public void setImportDeclarations(IImportDeclarations _ImportDeclarations) { this._ImportDeclarations = _ImportDeclarations; }
        public IImportDeclaration getImportDeclaration() { return _ImportDeclaration; }
        public void setImportDeclaration(IImportDeclaration _ImportDeclaration) { this._ImportDeclaration = _ImportDeclaration; }

        public ImportDeclarations(IToken leftIToken, IToken rightIToken,
                                  IImportDeclarations _ImportDeclarations,
                                  IImportDeclaration _ImportDeclaration)
            :base(leftIToken, rightIToken)

        {
            this._ImportDeclarations = _ImportDeclarations;
            ((Ast) _ImportDeclarations).setParent(this);
            this._ImportDeclaration = _ImportDeclaration;
            ((Ast) _ImportDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ImportDeclarations != null)  list.Add(_ImportDeclarations);
            if(_ImportDeclaration != null)  list.Add(_ImportDeclaration);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ImportDeclarations)) return false;
            if (! base.Equals(o)) return false;
            ImportDeclarations other = (ImportDeclarations) o;
            if (! _ImportDeclarations.Equals(other._ImportDeclarations)) return false;
            if (! _ImportDeclaration.Equals(other._ImportDeclaration)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ImportDeclarations.GetHashCode());
            hash = hash * 31 + (_ImportDeclaration.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 60:  TypeDeclarations ::= TypeDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
     *</b>
     */
    public class TypeDeclarations : Ast , ITypeDeclarations
    {
        private ITypeDeclarations _TypeDeclarations;
        private ITypeDeclaration _TypeDeclaration;

        public ITypeDeclarations getTypeDeclarations() { return _TypeDeclarations; }
        public void setTypeDeclarations(ITypeDeclarations _TypeDeclarations) { this._TypeDeclarations = _TypeDeclarations; }
        public ITypeDeclaration getTypeDeclaration() { return _TypeDeclaration; }
        public void setTypeDeclaration(ITypeDeclaration _TypeDeclaration) { this._TypeDeclaration = _TypeDeclaration; }

        public TypeDeclarations(IToken leftIToken, IToken rightIToken,
                                ITypeDeclarations _TypeDeclarations,
                                ITypeDeclaration _TypeDeclaration)
            :base(leftIToken, rightIToken)

        {
            this._TypeDeclarations = _TypeDeclarations;
            ((Ast) _TypeDeclarations).setParent(this);
            this._TypeDeclaration = _TypeDeclaration;
            ((Ast) _TypeDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeDeclarations != null)  list.Add(_TypeDeclarations);
            if(_TypeDeclaration != null)  list.Add(_TypeDeclaration);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeDeclarations)) return false;
            if (! base.Equals(o)) return false;
            TypeDeclarations other = (TypeDeclarations) o;
            if (! _TypeDeclarations.Equals(other._TypeDeclarations)) return false;
            if (! _TypeDeclaration.Equals(other._TypeDeclaration)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeDeclarations.GetHashCode());
            hash = hash * 31 + (_TypeDeclaration.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
     *</b>
     */
    public class PackageDeclaration : Ast , IPackageDeclaration
    {
        private IAnnotationsopt _Annotationsopt;
        private AstToken _package;
        private IPackageName _PackageName;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public IAnnotationsopt getAnnotationsopt() { return _Annotationsopt; }
        public void setAnnotationsopt(IAnnotationsopt _Annotationsopt) { this._Annotationsopt = _Annotationsopt; }
        public AstToken getpackage() { return _package; }
        public void setpackage(AstToken _package) { this._package = _package; }
        public IPackageName getPackageName() { return _PackageName; }
        public void setPackageName(IPackageName _PackageName) { this._PackageName = _PackageName; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public PackageDeclaration(IToken leftIToken, IToken rightIToken,
                                  IAnnotationsopt _Annotationsopt,
                                  AstToken _package,
                                  IPackageName _PackageName,
                                  AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt != null) ((Ast) _Annotationsopt).setParent(this);
            this._package = _package;
            ((Ast) _package).setParent(this);
            this._PackageName = _PackageName;
            ((Ast) _PackageName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Annotationsopt != null)  list.Add(_Annotationsopt);
            if(_package != null)  list.Add(_package);
            if(_PackageName != null)  list.Add(_PackageName);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PackageDeclaration)) return false;
            if (! base.Equals(o)) return false;
            PackageDeclaration other = (PackageDeclaration) o;
            if (_Annotationsopt == null)
                if (other._Annotationsopt != null) return false;
                else{}// continue
            else if (! _Annotationsopt.Equals(other._Annotationsopt)) return false;
            if (! _package.Equals(other._package)) return false;
            if (! _PackageName.Equals(other._PackageName)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Annotationsopt == null ? 0 : _Annotationsopt.GetHashCode());
            hash = hash * 31 + (_package.GetHashCode());
            hash = hash * 31 + (_PackageName.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
     *</b>
     */
    public class SingleTypeImportDeclaration : Ast , ISingleTypeImportDeclaration
    {
        private AstToken _import;
        private ITypeName _TypeName;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public void setimport(AstToken _import) { this._import = _import; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public SingleTypeImportDeclaration(IToken leftIToken, IToken rightIToken,
                                           AstToken _import,
                                           ITypeName _TypeName,
                                           AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._import = _import;
            ((Ast) _import).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_import != null)  list.Add(_import);
            if(_TypeName != null)  list.Add(_TypeName);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SingleTypeImportDeclaration)) return false;
            if (! base.Equals(o)) return false;
            SingleTypeImportDeclaration other = (SingleTypeImportDeclaration) o;
            if (! _import.Equals(other._import)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_import.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
     *</b>
     */
    public class TypeImportOnDemandDeclaration : Ast , ITypeImportOnDemandDeclaration
    {
        private AstToken _import;
        private IPackageOrTypeName _PackageOrTypeName;
        private AstToken _DOT;
        private AstToken _MULTIPLY;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public void setimport(AstToken _import) { this._import = _import; }
        public IPackageOrTypeName getPackageOrTypeName() { return _PackageOrTypeName; }
        public void setPackageOrTypeName(IPackageOrTypeName _PackageOrTypeName) { this._PackageOrTypeName = _PackageOrTypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public void setMULTIPLY(AstToken _MULTIPLY) { this._MULTIPLY = _MULTIPLY; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public TypeImportOnDemandDeclaration(IToken leftIToken, IToken rightIToken,
                                             AstToken _import,
                                             IPackageOrTypeName _PackageOrTypeName,
                                             AstToken _DOT,
                                             AstToken _MULTIPLY,
                                             AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._import = _import;
            ((Ast) _import).setParent(this);
            this._PackageOrTypeName = _PackageOrTypeName;
            ((Ast) _PackageOrTypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_import != null)  list.Add(_import);
            if(_PackageOrTypeName != null)  list.Add(_PackageOrTypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_MULTIPLY != null)  list.Add(_MULTIPLY);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeImportOnDemandDeclaration)) return false;
            if (! base.Equals(o)) return false;
            TypeImportOnDemandDeclaration other = (TypeImportOnDemandDeclaration) o;
            if (! _import.Equals(other._import)) return false;
            if (! _PackageOrTypeName.Equals(other._PackageOrTypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _MULTIPLY.Equals(other._MULTIPLY)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_import.GetHashCode());
            hash = hash * 31 + (_PackageOrTypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_MULTIPLY.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
     *</b>
     */
    public class SingleStaticImportDeclaration : Ast , ISingleStaticImportDeclaration
    {
        private AstToken _import;
        private AstToken _static;
        private ITypeName _TypeName;
        private AstToken _DOT;
        private identifier _identifier;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public void setimport(AstToken _import) { this._import = _import; }
        public AstToken getstatic() { return _static; }
        public void setstatic(AstToken _static) { this._static = _static; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public SingleStaticImportDeclaration(IToken leftIToken, IToken rightIToken,
                                             AstToken _import,
                                             AstToken _static,
                                             ITypeName _TypeName,
                                             AstToken _DOT,
                                             identifier _identifier,
                                             AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._import = _import;
            ((Ast) _import).setParent(this);
            this._static = _static;
            ((Ast) _static).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_import != null)  list.Add(_import);
            if(_static != null)  list.Add(_static);
            if(_TypeName != null)  list.Add(_TypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SingleStaticImportDeclaration)) return false;
            if (! base.Equals(o)) return false;
            SingleStaticImportDeclaration other = (SingleStaticImportDeclaration) o;
            if (! _import.Equals(other._import)) return false;
            if (! _static.Equals(other._static)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_import.GetHashCode());
            hash = hash * 31 + (_static.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
     *</b>
     */
    public class StaticImportOnDemandDeclaration : Ast , IStaticImportOnDemandDeclaration
    {
        private AstToken _import;
        private AstToken _static;
        private ITypeName _TypeName;
        private AstToken _DOT;
        private AstToken _MULTIPLY;
        private AstToken _SEMICOLON;

        public AstToken getimport() { return _import; }
        public void setimport(AstToken _import) { this._import = _import; }
        public AstToken getstatic() { return _static; }
        public void setstatic(AstToken _static) { this._static = _static; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public void setMULTIPLY(AstToken _MULTIPLY) { this._MULTIPLY = _MULTIPLY; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public StaticImportOnDemandDeclaration(IToken leftIToken, IToken rightIToken,
                                               AstToken _import,
                                               AstToken _static,
                                               ITypeName _TypeName,
                                               AstToken _DOT,
                                               AstToken _MULTIPLY,
                                               AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._import = _import;
            ((Ast) _import).setParent(this);
            this._static = _static;
            ((Ast) _static).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_import != null)  list.Add(_import);
            if(_static != null)  list.Add(_static);
            if(_TypeName != null)  list.Add(_TypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_MULTIPLY != null)  list.Add(_MULTIPLY);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is StaticImportOnDemandDeclaration)) return false;
            if (! base.Equals(o)) return false;
            StaticImportOnDemandDeclaration other = (StaticImportOnDemandDeclaration) o;
            if (! _import.Equals(other._import)) return false;
            if (! _static.Equals(other._static)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _MULTIPLY.Equals(other._MULTIPLY)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_import.GetHashCode());
            hash = hash * 31 + (_static.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_MULTIPLY.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 71:  TypeDeclaration ::= ClassDeclaration
    *<li>Rule 72:  TypeDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 73:  TypeDeclaration ::= ;
     *</b>
     */
    public class TypeDeclaration : AstToken , ITypeDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public TypeDeclaration(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
     *</b>
     */
    public class NormalClassDeclaration : Ast , INormalClassDeclaration
    {
        private IClassModifiersopt _ClassModifiersopt;
        private AstToken _class;
        private identifier _identifier;
        private TypeParameters _TypeParametersopt;
        private Super _Superopt;
        private Interfaces _Interfacesopt;
        private ClassBody _ClassBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public IClassModifiersopt getClassModifiersopt() { return _ClassModifiersopt; }
        public void setClassModifiersopt(IClassModifiersopt _ClassModifiersopt) { this._ClassModifiersopt = _ClassModifiersopt; }
        public AstToken getclass() { return _class; }
        public void setclass(AstToken _class) { this._class = _class; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public void setTypeParametersopt(TypeParameters _TypeParametersopt) { this._TypeParametersopt = _TypeParametersopt; }
        /**
         * The value returned by <b>getSuperopt</b> may be <b>null</b>
         */
        public Super getSuperopt() { return _Superopt; }
        public void setSuperopt(Super _Superopt) { this._Superopt = _Superopt; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public Interfaces getInterfacesopt() { return _Interfacesopt; }
        public void setInterfacesopt(Interfaces _Interfacesopt) { this._Interfacesopt = _Interfacesopt; }
        public ClassBody getClassBody() { return _ClassBody; }
        public void setClassBody(ClassBody _ClassBody) { this._ClassBody = _ClassBody; }

        public NormalClassDeclaration(IToken leftIToken, IToken rightIToken,
                                      IClassModifiersopt _ClassModifiersopt,
                                      AstToken _class,
                                      identifier _identifier,
                                      TypeParameters _TypeParametersopt,
                                      Super _Superopt,
                                      Interfaces _Interfacesopt,
                                      ClassBody _ClassBody)
            :base(leftIToken, rightIToken)

        {
            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt != null) ((Ast) _ClassModifiersopt).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._Superopt = _Superopt;
            if (_Superopt != null) ((Ast) _Superopt).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt != null) ((Ast) _Interfacesopt).setParent(this);
            this._ClassBody = _ClassBody;
            ((Ast) _ClassBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassModifiersopt != null)  list.Add(_ClassModifiersopt);
            if(_class != null)  list.Add(_class);
            if(_identifier != null)  list.Add(_identifier);
            if(_TypeParametersopt != null)  list.Add(_TypeParametersopt);
            if(_Superopt != null)  list.Add(_Superopt);
            if(_Interfacesopt != null)  list.Add(_Interfacesopt);
            if(_ClassBody != null)  list.Add(_ClassBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is NormalClassDeclaration)) return false;
            if (! base.Equals(o)) return false;
            NormalClassDeclaration other = (NormalClassDeclaration) o;
            if (_ClassModifiersopt == null)
                if (other._ClassModifiersopt != null) return false;
                else{}// continue
            else if (! _ClassModifiersopt.Equals(other._ClassModifiersopt)) return false;
            if (! _class.Equals(other._class)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else{}// continue
            else if (! _TypeParametersopt.Equals(other._TypeParametersopt)) return false;
            if (_Superopt == null)
                if (other._Superopt != null) return false;
                else{}// continue
            else if (! _Superopt.Equals(other._Superopt)) return false;
            if (_Interfacesopt == null)
                if (other._Interfacesopt != null) return false;
                else{}// continue
            else if (! _Interfacesopt.Equals(other._Interfacesopt)) return false;
            if (! _ClassBody.Equals(other._ClassBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassModifiersopt == null ? 0 : _ClassModifiersopt.GetHashCode());
            hash = hash * 31 + (_class.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.GetHashCode());
            hash = hash * 31 + (_Superopt == null ? 0 : _Superopt.GetHashCode());
            hash = hash * 31 + (_Interfacesopt == null ? 0 : _Interfacesopt.GetHashCode());
            hash = hash * 31 + (_ClassBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 77:  ClassModifiers ::= ClassModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
     *</b>
     */
    public class ClassModifiers : Ast , IClassModifiers
    {
        private IClassModifiers _ClassModifiers;
        private IClassModifier _ClassModifier;

        public IClassModifiers getClassModifiers() { return _ClassModifiers; }
        public void setClassModifiers(IClassModifiers _ClassModifiers) { this._ClassModifiers = _ClassModifiers; }
        public IClassModifier getClassModifier() { return _ClassModifier; }
        public void setClassModifier(IClassModifier _ClassModifier) { this._ClassModifier = _ClassModifier; }

        public ClassModifiers(IToken leftIToken, IToken rightIToken,
                              IClassModifiers _ClassModifiers,
                              IClassModifier _ClassModifier)
            :base(leftIToken, rightIToken)

        {
            this._ClassModifiers = _ClassModifiers;
            ((Ast) _ClassModifiers).setParent(this);
            this._ClassModifier = _ClassModifier;
            ((Ast) _ClassModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassModifiers != null)  list.Add(_ClassModifiers);
            if(_ClassModifier != null)  list.Add(_ClassModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassModifiers)) return false;
            if (! base.Equals(o)) return false;
            ClassModifiers other = (ClassModifiers) o;
            if (! _ClassModifiers.Equals(other._ClassModifiers)) return false;
            if (! _ClassModifier.Equals(other._ClassModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassModifiers.GetHashCode());
            hash = hash * 31 + (_ClassModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 87:  TypeParameters ::= < TypeParameterList >
     *</b>
     */
    public class TypeParameters : Ast , ITypeParameters
    {
        private AstToken _LESS;
        private ITypeParameterList _TypeParameterList;
        private AstToken _GREATER;

        public AstToken getLESS() { return _LESS; }
        public void setLESS(AstToken _LESS) { this._LESS = _LESS; }
        public ITypeParameterList getTypeParameterList() { return _TypeParameterList; }
        public void setTypeParameterList(ITypeParameterList _TypeParameterList) { this._TypeParameterList = _TypeParameterList; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }

        public TypeParameters(IToken leftIToken, IToken rightIToken,
                              AstToken _LESS,
                              ITypeParameterList _TypeParameterList,
                              AstToken _GREATER)
            :base(leftIToken, rightIToken)

        {
            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._TypeParameterList = _TypeParameterList;
            ((Ast) _TypeParameterList).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LESS != null)  list.Add(_LESS);
            if(_TypeParameterList != null)  list.Add(_TypeParameterList);
            if(_GREATER != null)  list.Add(_GREATER);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeParameters)) return false;
            if (! base.Equals(o)) return false;
            TypeParameters other = (TypeParameters) o;
            if (! _LESS.Equals(other._LESS)) return false;
            if (! _TypeParameterList.Equals(other._TypeParameterList)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LESS.GetHashCode());
            hash = hash * 31 + (_TypeParameterList.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 88:  TypeParameterList ::= TypeParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
     *</b>
     */
    public class TypeParameterList : Ast , ITypeParameterList
    {
        private ITypeParameterList _TypeParameterList;
        private AstToken _COMMA;
        private TypeParameter _TypeParameter;

        public ITypeParameterList getTypeParameterList() { return _TypeParameterList; }
        public void setTypeParameterList(ITypeParameterList _TypeParameterList) { this._TypeParameterList = _TypeParameterList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public TypeParameter getTypeParameter() { return _TypeParameter; }
        public void setTypeParameter(TypeParameter _TypeParameter) { this._TypeParameter = _TypeParameter; }

        public TypeParameterList(IToken leftIToken, IToken rightIToken,
                                 ITypeParameterList _TypeParameterList,
                                 AstToken _COMMA,
                                 TypeParameter _TypeParameter)
            :base(leftIToken, rightIToken)

        {
            this._TypeParameterList = _TypeParameterList;
            ((Ast) _TypeParameterList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._TypeParameter = _TypeParameter;
            ((Ast) _TypeParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeParameterList != null)  list.Add(_TypeParameterList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_TypeParameter != null)  list.Add(_TypeParameter);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TypeParameterList)) return false;
            if (! base.Equals(o)) return false;
            TypeParameterList other = (TypeParameterList) o;
            if (! _TypeParameterList.Equals(other._TypeParameterList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _TypeParameter.Equals(other._TypeParameter)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeParameterList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_TypeParameter.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 90:  Super ::= extends ClassType
     *</b>
     */
    public class Super : Ast , ISuper
    {
        private AstToken _extends;
        private ClassType _ClassType;

        public AstToken getextends() { return _extends; }
        public void setextends(AstToken _extends) { this._extends = _extends; }
        public ClassType getClassType() { return _ClassType; }
        public void setClassType(ClassType _ClassType) { this._ClassType = _ClassType; }

        public Super(IToken leftIToken, IToken rightIToken,
                     AstToken _extends,
                     ClassType _ClassType)
            :base(leftIToken, rightIToken)

        {
            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ClassType = _ClassType;
            ((Ast) _ClassType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_extends != null)  list.Add(_extends);
            if(_ClassType != null)  list.Add(_ClassType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Super)) return false;
            if (! base.Equals(o)) return false;
            Super other = (Super) o;
            if (! _extends.Equals(other._extends)) return false;
            if (! _ClassType.Equals(other._ClassType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_extends.GetHashCode());
            hash = hash * 31 + (_ClassType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 91:  Interfaces ::= implements InterfaceTypeList
     *</b>
     */
    public class Interfaces : Ast , IInterfaces
    {
        private AstToken _implements;
        private IInterfaceTypeList _InterfaceTypeList;

        public AstToken getimplements() { return _implements; }
        public void setimplements(AstToken _implements) { this._implements = _implements; }
        public IInterfaceTypeList getInterfaceTypeList() { return _InterfaceTypeList; }
        public void setInterfaceTypeList(IInterfaceTypeList _InterfaceTypeList) { this._InterfaceTypeList = _InterfaceTypeList; }

        public Interfaces(IToken leftIToken, IToken rightIToken,
                          AstToken _implements,
                          IInterfaceTypeList _InterfaceTypeList)
            :base(leftIToken, rightIToken)

        {
            this._implements = _implements;
            ((Ast) _implements).setParent(this);
            this._InterfaceTypeList = _InterfaceTypeList;
            ((Ast) _InterfaceTypeList).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_implements != null)  list.Add(_implements);
            if(_InterfaceTypeList != null)  list.Add(_InterfaceTypeList);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Interfaces)) return false;
            if (! base.Equals(o)) return false;
            Interfaces other = (Interfaces) o;
            if (! _implements.Equals(other._implements)) return false;
            if (! _InterfaceTypeList.Equals(other._InterfaceTypeList)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_implements.GetHashCode());
            hash = hash * 31 + (_InterfaceTypeList.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 92:  InterfaceTypeList ::= InterfaceType
     *</em>
     *<p>
     *<b>
    *<li>Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
     *</b>
     */
    public class InterfaceTypeList : Ast , IInterfaceTypeList
    {
        private IInterfaceTypeList _InterfaceTypeList;
        private AstToken _COMMA;
        private InterfaceType _InterfaceType;

        public IInterfaceTypeList getInterfaceTypeList() { return _InterfaceTypeList; }
        public void setInterfaceTypeList(IInterfaceTypeList _InterfaceTypeList) { this._InterfaceTypeList = _InterfaceTypeList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }
        public void setInterfaceType(InterfaceType _InterfaceType) { this._InterfaceType = _InterfaceType; }

        public InterfaceTypeList(IToken leftIToken, IToken rightIToken,
                                 IInterfaceTypeList _InterfaceTypeList,
                                 AstToken _COMMA,
                                 InterfaceType _InterfaceType)
            :base(leftIToken, rightIToken)

        {
            this._InterfaceTypeList = _InterfaceTypeList;
            ((Ast) _InterfaceTypeList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InterfaceTypeList != null)  list.Add(_InterfaceTypeList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_InterfaceType != null)  list.Add(_InterfaceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InterfaceTypeList)) return false;
            if (! base.Equals(o)) return false;
            InterfaceTypeList other = (InterfaceTypeList) o;
            if (! _InterfaceTypeList.Equals(other._InterfaceTypeList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _InterfaceType.Equals(other._InterfaceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InterfaceTypeList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_InterfaceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
     *</b>
     */
    public class ClassBody : Ast , IClassBody
    {
        private AstToken _LBRACE;
        private IClassBodyDeclarationsopt _ClassBodyDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public IClassBodyDeclarationsopt getClassBodyDeclarationsopt() { return _ClassBodyDeclarationsopt; }
        public void setClassBodyDeclarationsopt(IClassBodyDeclarationsopt _ClassBodyDeclarationsopt) { this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public ClassBody(IToken leftIToken, IToken rightIToken,
                         AstToken _LBRACE,
                         IClassBodyDeclarationsopt _ClassBodyDeclarationsopt,
                         AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt != null) ((Ast) _ClassBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_ClassBodyDeclarationsopt != null)  list.Add(_ClassBodyDeclarationsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassBody)) return false;
            if (! base.Equals(o)) return false;
            ClassBody other = (ClassBody) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_ClassBodyDeclarationsopt == null)
                if (other._ClassBodyDeclarationsopt != null) return false;
                else{}// continue
            else if (! _ClassBodyDeclarationsopt.Equals(other._ClassBodyDeclarationsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_ClassBodyDeclarationsopt == null ? 0 : _ClassBodyDeclarationsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
     *</b>
     */
    public class ClassBodyDeclarations : Ast , IClassBodyDeclarations
    {
        private IClassBodyDeclarations _ClassBodyDeclarations;
        private IClassBodyDeclaration _ClassBodyDeclaration;

        public IClassBodyDeclarations getClassBodyDeclarations() { return _ClassBodyDeclarations; }
        public void setClassBodyDeclarations(IClassBodyDeclarations _ClassBodyDeclarations) { this._ClassBodyDeclarations = _ClassBodyDeclarations; }
        public IClassBodyDeclaration getClassBodyDeclaration() { return _ClassBodyDeclaration; }
        public void setClassBodyDeclaration(IClassBodyDeclaration _ClassBodyDeclaration) { this._ClassBodyDeclaration = _ClassBodyDeclaration; }

        public ClassBodyDeclarations(IToken leftIToken, IToken rightIToken,
                                     IClassBodyDeclarations _ClassBodyDeclarations,
                                     IClassBodyDeclaration _ClassBodyDeclaration)
            :base(leftIToken, rightIToken)

        {
            this._ClassBodyDeclarations = _ClassBodyDeclarations;
            ((Ast) _ClassBodyDeclarations).setParent(this);
            this._ClassBodyDeclaration = _ClassBodyDeclaration;
            ((Ast) _ClassBodyDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassBodyDeclarations != null)  list.Add(_ClassBodyDeclarations);
            if(_ClassBodyDeclaration != null)  list.Add(_ClassBodyDeclaration);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassBodyDeclarations)) return false;
            if (! base.Equals(o)) return false;
            ClassBodyDeclarations other = (ClassBodyDeclarations) o;
            if (! _ClassBodyDeclarations.Equals(other._ClassBodyDeclarations)) return false;
            if (! _ClassBodyDeclaration.Equals(other._ClassBodyDeclaration)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassBodyDeclarations.GetHashCode());
            hash = hash * 31 + (_ClassBodyDeclaration.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
    *<li>Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
    *<li>Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
    *<li>Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 105:  ClassMemberDeclaration ::= ;
     *</b>
     */
    public class ClassMemberDeclaration : AstToken , IClassMemberDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public ClassMemberDeclaration(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
     *</b>
     */
    public class FieldDeclaration : Ast , IFieldDeclaration
    {
        private IFieldModifiersopt _FieldModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getFieldModifiersopt</b> may be <b>null</b>
         */
        public IFieldModifiersopt getFieldModifiersopt() { return _FieldModifiersopt; }
        public void setFieldModifiersopt(IFieldModifiersopt _FieldModifiersopt) { this._FieldModifiersopt = _FieldModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public void setVariableDeclarators(IVariableDeclarators _VariableDeclarators) { this._VariableDeclarators = _VariableDeclarators; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public FieldDeclaration(IToken leftIToken, IToken rightIToken,
                                IFieldModifiersopt _FieldModifiersopt,
                                IType _Type,
                                IVariableDeclarators _VariableDeclarators,
                                AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._FieldModifiersopt = _FieldModifiersopt;
            if (_FieldModifiersopt != null) ((Ast) _FieldModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_FieldModifiersopt != null)  list.Add(_FieldModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_VariableDeclarators != null)  list.Add(_VariableDeclarators);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FieldDeclaration)) return false;
            if (! base.Equals(o)) return false;
            FieldDeclaration other = (FieldDeclaration) o;
            if (_FieldModifiersopt == null)
                if (other._FieldModifiersopt != null) return false;
                else{}// continue
            else if (! _FieldModifiersopt.Equals(other._FieldModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (! _VariableDeclarators.Equals(other._VariableDeclarators)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_FieldModifiersopt == null ? 0 : _FieldModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_VariableDeclarators.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 107:  VariableDeclarators ::= VariableDeclarator
     *</em>
     *<p>
     *<b>
    *<li>Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
     *</b>
     */
    public class VariableDeclarators : Ast , IVariableDeclarators
    {
        private IVariableDeclarators _VariableDeclarators;
        private AstToken _COMMA;
        private IVariableDeclarator _VariableDeclarator;

        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public void setVariableDeclarators(IVariableDeclarators _VariableDeclarators) { this._VariableDeclarators = _VariableDeclarators; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IVariableDeclarator getVariableDeclarator() { return _VariableDeclarator; }
        public void setVariableDeclarator(IVariableDeclarator _VariableDeclarator) { this._VariableDeclarator = _VariableDeclarator; }

        public VariableDeclarators(IToken leftIToken, IToken rightIToken,
                                   IVariableDeclarators _VariableDeclarators,
                                   AstToken _COMMA,
                                   IVariableDeclarator _VariableDeclarator)
            :base(leftIToken, rightIToken)

        {
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._VariableDeclarator = _VariableDeclarator;
            ((Ast) _VariableDeclarator).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableDeclarators != null)  list.Add(_VariableDeclarators);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_VariableDeclarator != null)  list.Add(_VariableDeclarator);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is VariableDeclarators)) return false;
            if (! base.Equals(o)) return false;
            VariableDeclarators other = (VariableDeclarators) o;
            if (! _VariableDeclarators.Equals(other._VariableDeclarators)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _VariableDeclarator.Equals(other._VariableDeclarator)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableDeclarators.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_VariableDeclarator.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 109:  VariableDeclarator ::= VariableDeclaratorId
     *</em>
     *<p>
     *<b>
    *<li>Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
     *</b>
     */
    public class VariableDeclarator : Ast , IVariableDeclarator
    {
        private IVariableDeclaratorId _VariableDeclaratorId;
        private AstToken _EQUAL;
        private IVariableInitializer _VariableInitializer;

        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public void setVariableDeclaratorId(IVariableDeclaratorId _VariableDeclaratorId) { this._VariableDeclaratorId = _VariableDeclaratorId; }
        public AstToken getEQUAL() { return _EQUAL; }
        public void setEQUAL(AstToken _EQUAL) { this._EQUAL = _EQUAL; }
        public IVariableInitializer getVariableInitializer() { return _VariableInitializer; }
        public void setVariableInitializer(IVariableInitializer _VariableInitializer) { this._VariableInitializer = _VariableInitializer; }

        public VariableDeclarator(IToken leftIToken, IToken rightIToken,
                                  IVariableDeclaratorId _VariableDeclaratorId,
                                  AstToken _EQUAL,
                                  IVariableInitializer _VariableInitializer)
            :base(leftIToken, rightIToken)

        {
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            ((Ast) _VariableInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableDeclaratorId != null)  list.Add(_VariableDeclaratorId);
            if(_EQUAL != null)  list.Add(_EQUAL);
            if(_VariableInitializer != null)  list.Add(_VariableInitializer);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is VariableDeclarator)) return false;
            if (! base.Equals(o)) return false;
            VariableDeclarator other = (VariableDeclarator) o;
            if (! _VariableDeclaratorId.Equals(other._VariableDeclaratorId)) return false;
            if (! _EQUAL.Equals(other._EQUAL)) return false;
            if (! _VariableInitializer.Equals(other._VariableInitializer)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableDeclaratorId.GetHashCode());
            hash = hash * 31 + (_EQUAL.GetHashCode());
            hash = hash * 31 + (_VariableInitializer.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 111:  VariableDeclaratorId ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
     *</b>
     */
    public class VariableDeclaratorId : Ast , IVariableDeclaratorId
    {
        private IVariableDeclaratorId _VariableDeclaratorId;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public void setVariableDeclaratorId(IVariableDeclaratorId _VariableDeclaratorId) { this._VariableDeclaratorId = _VariableDeclaratorId; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public VariableDeclaratorId(IToken leftIToken, IToken rightIToken,
                                    IVariableDeclaratorId _VariableDeclaratorId,
                                    AstToken _LBRACKET,
                                    AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableDeclaratorId != null)  list.Add(_VariableDeclaratorId);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is VariableDeclaratorId)) return false;
            if (! base.Equals(o)) return false;
            VariableDeclaratorId other = (VariableDeclaratorId) o;
            if (! _VariableDeclaratorId.Equals(other._VariableDeclaratorId)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableDeclaratorId.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 115:  FieldModifiers ::= FieldModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
     *</b>
     */
    public class FieldModifiers : Ast , IFieldModifiers
    {
        private IFieldModifiers _FieldModifiers;
        private IFieldModifier _FieldModifier;

        public IFieldModifiers getFieldModifiers() { return _FieldModifiers; }
        public void setFieldModifiers(IFieldModifiers _FieldModifiers) { this._FieldModifiers = _FieldModifiers; }
        public IFieldModifier getFieldModifier() { return _FieldModifier; }
        public void setFieldModifier(IFieldModifier _FieldModifier) { this._FieldModifier = _FieldModifier; }

        public FieldModifiers(IToken leftIToken, IToken rightIToken,
                              IFieldModifiers _FieldModifiers,
                              IFieldModifier _FieldModifier)
            :base(leftIToken, rightIToken)

        {
            this._FieldModifiers = _FieldModifiers;
            ((Ast) _FieldModifiers).setParent(this);
            this._FieldModifier = _FieldModifier;
            ((Ast) _FieldModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_FieldModifiers != null)  list.Add(_FieldModifiers);
            if(_FieldModifier != null)  list.Add(_FieldModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FieldModifiers)) return false;
            if (! base.Equals(o)) return false;
            FieldModifiers other = (FieldModifiers) o;
            if (! _FieldModifiers.Equals(other._FieldModifiers)) return false;
            if (! _FieldModifier.Equals(other._FieldModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_FieldModifiers.GetHashCode());
            hash = hash * 31 + (_FieldModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
     *</b>
     */
    public class MethodDeclaration : Ast , IMethodDeclaration
    {
        private MethodHeader _MethodHeader;
        private IMethodBody _MethodBody;

        public MethodHeader getMethodHeader() { return _MethodHeader; }
        public void setMethodHeader(MethodHeader _MethodHeader) { this._MethodHeader = _MethodHeader; }
        public IMethodBody getMethodBody() { return _MethodBody; }
        public void setMethodBody(IMethodBody _MethodBody) { this._MethodBody = _MethodBody; }

        public MethodDeclaration(IToken leftIToken, IToken rightIToken,
                                 MethodHeader _MethodHeader,
                                 IMethodBody _MethodBody)
            :base(leftIToken, rightIToken)

        {
            this._MethodHeader = _MethodHeader;
            ((Ast) _MethodHeader).setParent(this);
            this._MethodBody = _MethodBody;
            ((Ast) _MethodBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MethodHeader != null)  list.Add(_MethodHeader);
            if(_MethodBody != null)  list.Add(_MethodBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodDeclaration)) return false;
            if (! base.Equals(o)) return false;
            MethodDeclaration other = (MethodDeclaration) o;
            if (! _MethodHeader.Equals(other._MethodHeader)) return false;
            if (! _MethodBody.Equals(other._MethodBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MethodHeader.GetHashCode());
            hash = hash * 31 + (_MethodBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
     *</b>
     */
    public class MethodHeader : Ast , IMethodHeader
    {
        private IMethodModifiersopt _MethodModifiersopt;
        private TypeParameters _TypeParametersopt;
        private IResultType _ResultType;
        private IMethodDeclarator _MethodDeclarator;
        private Throws _Throwsopt;

        /**
         * The value returned by <b>getMethodModifiersopt</b> may be <b>null</b>
         */
        public IMethodModifiersopt getMethodModifiersopt() { return _MethodModifiersopt; }
        public void setMethodModifiersopt(IMethodModifiersopt _MethodModifiersopt) { this._MethodModifiersopt = _MethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public void setTypeParametersopt(TypeParameters _TypeParametersopt) { this._TypeParametersopt = _TypeParametersopt; }
        public IResultType getResultType() { return _ResultType; }
        public void setResultType(IResultType _ResultType) { this._ResultType = _ResultType; }
        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        public void setMethodDeclarator(IMethodDeclarator _MethodDeclarator) { this._MethodDeclarator = _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }
        public void setThrowsopt(Throws _Throwsopt) { this._Throwsopt = _Throwsopt; }

        public MethodHeader(IToken leftIToken, IToken rightIToken,
                            IMethodModifiersopt _MethodModifiersopt,
                            TypeParameters _TypeParametersopt,
                            IResultType _ResultType,
                            IMethodDeclarator _MethodDeclarator,
                            Throws _Throwsopt)
            :base(leftIToken, rightIToken)

        {
            this._MethodModifiersopt = _MethodModifiersopt;
            if (_MethodModifiersopt != null) ((Ast) _MethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            ((Ast) _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MethodModifiersopt != null)  list.Add(_MethodModifiersopt);
            if(_TypeParametersopt != null)  list.Add(_TypeParametersopt);
            if(_ResultType != null)  list.Add(_ResultType);
            if(_MethodDeclarator != null)  list.Add(_MethodDeclarator);
            if(_Throwsopt != null)  list.Add(_Throwsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodHeader)) return false;
            if (! base.Equals(o)) return false;
            MethodHeader other = (MethodHeader) o;
            if (_MethodModifiersopt == null)
                if (other._MethodModifiersopt != null) return false;
                else{}// continue
            else if (! _MethodModifiersopt.Equals(other._MethodModifiersopt)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else{}// continue
            else if (! _TypeParametersopt.Equals(other._TypeParametersopt)) return false;
            if (! _ResultType.Equals(other._ResultType)) return false;
            if (! _MethodDeclarator.Equals(other._MethodDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else{}// continue
            else if (! _Throwsopt.Equals(other._Throwsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MethodModifiersopt == null ? 0 : _MethodModifiersopt.GetHashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.GetHashCode());
            hash = hash * 31 + (_ResultType.GetHashCode());
            hash = hash * 31 + (_MethodDeclarator.GetHashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 127:  ResultType ::= Type
     *</em>
     *<p>
     *<b>
    *<li>Rule 128:  ResultType ::= void
     *</b>
     */
    public class ResultType : AstToken , IResultType
    {
        public IToken getvoid() { return leftIToken; }

        public ResultType(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 131:  FormalParameterList ::= LastFormalParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
     *</b>
     */
    public class FormalParameterList : Ast , IFormalParameterList
    {
        private IFormalParameters _FormalParameters;
        private AstToken _COMMA;
        private LastFormalParameter _LastFormalParameter;

        public IFormalParameters getFormalParameters() { return _FormalParameters; }
        public void setFormalParameters(IFormalParameters _FormalParameters) { this._FormalParameters = _FormalParameters; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public LastFormalParameter getLastFormalParameter() { return _LastFormalParameter; }
        public void setLastFormalParameter(LastFormalParameter _LastFormalParameter) { this._LastFormalParameter = _LastFormalParameter; }

        public FormalParameterList(IToken leftIToken, IToken rightIToken,
                                   IFormalParameters _FormalParameters,
                                   AstToken _COMMA,
                                   LastFormalParameter _LastFormalParameter)
            :base(leftIToken, rightIToken)

        {
            this._FormalParameters = _FormalParameters;
            ((Ast) _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._LastFormalParameter = _LastFormalParameter;
            ((Ast) _LastFormalParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_FormalParameters != null)  list.Add(_FormalParameters);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_LastFormalParameter != null)  list.Add(_LastFormalParameter);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FormalParameterList)) return false;
            if (! base.Equals(o)) return false;
            FormalParameterList other = (FormalParameterList) o;
            if (! _FormalParameters.Equals(other._FormalParameters)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _LastFormalParameter.Equals(other._LastFormalParameter)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_FormalParameters.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_LastFormalParameter.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 133:  FormalParameters ::= FormalParameter
     *</em>
     *<p>
     *<b>
    *<li>Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
     *</b>
     */
    public class FormalParameters : Ast , IFormalParameters
    {
        private IFormalParameters _FormalParameters;
        private AstToken _COMMA;
        private FormalParameter _FormalParameter;

        public IFormalParameters getFormalParameters() { return _FormalParameters; }
        public void setFormalParameters(IFormalParameters _FormalParameters) { this._FormalParameters = _FormalParameters; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }
        public void setFormalParameter(FormalParameter _FormalParameter) { this._FormalParameter = _FormalParameter; }

        public FormalParameters(IToken leftIToken, IToken rightIToken,
                                IFormalParameters _FormalParameters,
                                AstToken _COMMA,
                                FormalParameter _FormalParameter)
            :base(leftIToken, rightIToken)

        {
            this._FormalParameters = _FormalParameters;
            ((Ast) _FormalParameters).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_FormalParameters != null)  list.Add(_FormalParameters);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_FormalParameter != null)  list.Add(_FormalParameter);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FormalParameters)) return false;
            if (! base.Equals(o)) return false;
            FormalParameters other = (FormalParameters) o;
            if (! _FormalParameters.Equals(other._FormalParameters)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _FormalParameter.Equals(other._FormalParameter)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_FormalParameters.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_FormalParameter.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
     *</b>
     */
    public class FormalParameter : Ast , IFormalParameter
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private IVariableDeclaratorId _VariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public void setVariableModifiersopt(IVariableModifiersopt _VariableModifiersopt) { this._VariableModifiersopt = _VariableModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public void setVariableDeclaratorId(IVariableDeclaratorId _VariableDeclaratorId) { this._VariableDeclaratorId = _VariableDeclaratorId; }

        public FormalParameter(IToken leftIToken, IToken rightIToken,
                               IVariableModifiersopt _VariableModifiersopt,
                               IType _Type,
                               IVariableDeclaratorId _VariableDeclaratorId)
            :base(leftIToken, rightIToken)

        {
            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableModifiersopt != null)  list.Add(_VariableModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_VariableDeclaratorId != null)  list.Add(_VariableDeclaratorId);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FormalParameter)) return false;
            if (! base.Equals(o)) return false;
            FormalParameter other = (FormalParameter) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else{}// continue
            else if (! _VariableModifiersopt.Equals(other._VariableModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (! _VariableDeclaratorId.Equals(other._VariableDeclaratorId)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_VariableDeclaratorId.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 136:  VariableModifiers ::= VariableModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
     *</b>
     */
    public class VariableModifiers : Ast , IVariableModifiers
    {
        private IVariableModifiers _VariableModifiers;
        private IVariableModifier _VariableModifier;

        public IVariableModifiers getVariableModifiers() { return _VariableModifiers; }
        public void setVariableModifiers(IVariableModifiers _VariableModifiers) { this._VariableModifiers = _VariableModifiers; }
        public IVariableModifier getVariableModifier() { return _VariableModifier; }
        public void setVariableModifier(IVariableModifier _VariableModifier) { this._VariableModifier = _VariableModifier; }

        public VariableModifiers(IToken leftIToken, IToken rightIToken,
                                 IVariableModifiers _VariableModifiers,
                                 IVariableModifier _VariableModifier)
            :base(leftIToken, rightIToken)

        {
            this._VariableModifiers = _VariableModifiers;
            ((Ast) _VariableModifiers).setParent(this);
            this._VariableModifier = _VariableModifier;
            ((Ast) _VariableModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableModifiers != null)  list.Add(_VariableModifiers);
            if(_VariableModifier != null)  list.Add(_VariableModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is VariableModifiers)) return false;
            if (! base.Equals(o)) return false;
            VariableModifiers other = (VariableModifiers) o;
            if (! _VariableModifiers.Equals(other._VariableModifiers)) return false;
            if (! _VariableModifier.Equals(other._VariableModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableModifiers.GetHashCode());
            hash = hash * 31 + (_VariableModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 139:  VariableModifier ::= Annotations
     *</em>
     *<p>
     *<b>
    *<li>Rule 138:  VariableModifier ::= final
     *</b>
     */
    public class VariableModifier : AstToken , IVariableModifier
    {
        public IToken getfinal() { return leftIToken; }

        public VariableModifier(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
     *</b>
     */
    public class LastFormalParameter : Ast , ILastFormalParameter
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private Ellipsisopt _Ellipsisopt;
        private IVariableDeclaratorId _VariableDeclaratorId;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public void setVariableModifiersopt(IVariableModifiersopt _VariableModifiersopt) { this._VariableModifiersopt = _VariableModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        /**
         * The value returned by <b>getEllipsisopt</b> may be <b>null</b>
         */
        public Ellipsisopt getEllipsisopt() { return _Ellipsisopt; }
        public void setEllipsisopt(Ellipsisopt _Ellipsisopt) { this._Ellipsisopt = _Ellipsisopt; }
        public IVariableDeclaratorId getVariableDeclaratorId() { return _VariableDeclaratorId; }
        public void setVariableDeclaratorId(IVariableDeclaratorId _VariableDeclaratorId) { this._VariableDeclaratorId = _VariableDeclaratorId; }

        public LastFormalParameter(IToken leftIToken, IToken rightIToken,
                                   IVariableModifiersopt _VariableModifiersopt,
                                   IType _Type,
                                   Ellipsisopt _Ellipsisopt,
                                   IVariableDeclaratorId _VariableDeclaratorId)
            :base(leftIToken, rightIToken)

        {
            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._Ellipsisopt = _Ellipsisopt;
            if (_Ellipsisopt != null) ((Ast) _Ellipsisopt).setParent(this);
            this._VariableDeclaratorId = _VariableDeclaratorId;
            ((Ast) _VariableDeclaratorId).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableModifiersopt != null)  list.Add(_VariableModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_Ellipsisopt != null)  list.Add(_Ellipsisopt);
            if(_VariableDeclaratorId != null)  list.Add(_VariableDeclaratorId);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LastFormalParameter)) return false;
            if (! base.Equals(o)) return false;
            LastFormalParameter other = (LastFormalParameter) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else{}// continue
            else if (! _VariableModifiersopt.Equals(other._VariableModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (_Ellipsisopt == null)
                if (other._Ellipsisopt != null) return false;
                else{}// continue
            else if (! _Ellipsisopt.Equals(other._Ellipsisopt)) return false;
            if (! _VariableDeclaratorId.Equals(other._VariableDeclaratorId)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_Ellipsisopt == null ? 0 : _Ellipsisopt.GetHashCode());
            hash = hash * 31 + (_VariableDeclaratorId.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 141:  MethodModifiers ::= MethodModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
     *</b>
     */
    public class MethodModifiers : Ast , IMethodModifiers
    {
        private IMethodModifiers _MethodModifiers;
        private IMethodModifier _MethodModifier;

        public IMethodModifiers getMethodModifiers() { return _MethodModifiers; }
        public void setMethodModifiers(IMethodModifiers _MethodModifiers) { this._MethodModifiers = _MethodModifiers; }
        public IMethodModifier getMethodModifier() { return _MethodModifier; }
        public void setMethodModifier(IMethodModifier _MethodModifier) { this._MethodModifier = _MethodModifier; }

        public MethodModifiers(IToken leftIToken, IToken rightIToken,
                               IMethodModifiers _MethodModifiers,
                               IMethodModifier _MethodModifier)
            :base(leftIToken, rightIToken)

        {
            this._MethodModifiers = _MethodModifiers;
            ((Ast) _MethodModifiers).setParent(this);
            this._MethodModifier = _MethodModifier;
            ((Ast) _MethodModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MethodModifiers != null)  list.Add(_MethodModifiers);
            if(_MethodModifier != null)  list.Add(_MethodModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodModifiers)) return false;
            if (! base.Equals(o)) return false;
            MethodModifiers other = (MethodModifiers) o;
            if (! _MethodModifiers.Equals(other._MethodModifiers)) return false;
            if (! _MethodModifier.Equals(other._MethodModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MethodModifiers.GetHashCode());
            hash = hash * 31 + (_MethodModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 153:  Throws ::= throws ExceptionTypeList
     *</b>
     */
    public class Throws : Ast , IThrows
    {
        private AstToken _throws;
        private IExceptionTypeList _ExceptionTypeList;

        public AstToken getthrows() { return _throws; }
        public void setthrows(AstToken _throws) { this._throws = _throws; }
        public IExceptionTypeList getExceptionTypeList() { return _ExceptionTypeList; }
        public void setExceptionTypeList(IExceptionTypeList _ExceptionTypeList) { this._ExceptionTypeList = _ExceptionTypeList; }

        public Throws(IToken leftIToken, IToken rightIToken,
                      AstToken _throws,
                      IExceptionTypeList _ExceptionTypeList)
            :base(leftIToken, rightIToken)

        {
            this._throws = _throws;
            ((Ast) _throws).setParent(this);
            this._ExceptionTypeList = _ExceptionTypeList;
            ((Ast) _ExceptionTypeList).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_throws != null)  list.Add(_throws);
            if(_ExceptionTypeList != null)  list.Add(_ExceptionTypeList);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Throws)) return false;
            if (! base.Equals(o)) return false;
            Throws other = (Throws) o;
            if (! _throws.Equals(other._throws)) return false;
            if (! _ExceptionTypeList.Equals(other._ExceptionTypeList)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_throws.GetHashCode());
            hash = hash * 31 + (_ExceptionTypeList.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 154:  ExceptionTypeList ::= ExceptionType
     *</em>
     *<p>
     *<b>
    *<li>Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
     *</b>
     */
    public class ExceptionTypeList : Ast , IExceptionTypeList
    {
        private IExceptionTypeList _ExceptionTypeList;
        private AstToken _COMMA;
        private IExceptionType _ExceptionType;

        public IExceptionTypeList getExceptionTypeList() { return _ExceptionTypeList; }
        public void setExceptionTypeList(IExceptionTypeList _ExceptionTypeList) { this._ExceptionTypeList = _ExceptionTypeList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IExceptionType getExceptionType() { return _ExceptionType; }
        public void setExceptionType(IExceptionType _ExceptionType) { this._ExceptionType = _ExceptionType; }

        public ExceptionTypeList(IToken leftIToken, IToken rightIToken,
                                 IExceptionTypeList _ExceptionTypeList,
                                 AstToken _COMMA,
                                 IExceptionType _ExceptionType)
            :base(leftIToken, rightIToken)

        {
            this._ExceptionTypeList = _ExceptionTypeList;
            ((Ast) _ExceptionTypeList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ExceptionType = _ExceptionType;
            ((Ast) _ExceptionType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ExceptionTypeList != null)  list.Add(_ExceptionTypeList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_ExceptionType != null)  list.Add(_ExceptionType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExceptionTypeList)) return false;
            if (! base.Equals(o)) return false;
            ExceptionTypeList other = (ExceptionTypeList) o;
            if (! _ExceptionTypeList.Equals(other._ExceptionTypeList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _ExceptionType.Equals(other._ExceptionType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ExceptionTypeList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_ExceptionType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 158:  MethodBody ::= Block
     *</em>
     *<p>
     *<b>
    *<li>Rule 159:  MethodBody ::= ;
     *</b>
     */
    public class MethodBody : AstToken , IMethodBody
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public MethodBody(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 161:  StaticInitializer ::= static Block
     *</b>
     */
    public class StaticInitializer : Ast , IStaticInitializer
    {
        private AstToken _static;
        private Block _Block;

        public AstToken getstatic() { return _static; }
        public void setstatic(AstToken _static) { this._static = _static; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }

        public StaticInitializer(IToken leftIToken, IToken rightIToken,
                                 AstToken _static,
                                 Block _Block)
            :base(leftIToken, rightIToken)

        {
            this._static = _static;
            ((Ast) _static).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_static != null)  list.Add(_static);
            if(_Block != null)  list.Add(_Block);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is StaticInitializer)) return false;
            if (! base.Equals(o)) return false;
            StaticInitializer other = (StaticInitializer) o;
            if (! _static.Equals(other._static)) return false;
            if (! _Block.Equals(other._Block)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_static.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
     *</b>
     */
    public class ConstructorDeclaration : Ast , IConstructorDeclaration
    {
        private IConstructorModifiersopt _ConstructorModifiersopt;
        private ConstructorDeclarator _ConstructorDeclarator;
        private Throws _Throwsopt;
        private ConstructorBody _ConstructorBody;

        /**
         * The value returned by <b>getConstructorModifiersopt</b> may be <b>null</b>
         */
        public IConstructorModifiersopt getConstructorModifiersopt() { return _ConstructorModifiersopt; }
        public void setConstructorModifiersopt(IConstructorModifiersopt _ConstructorModifiersopt) { this._ConstructorModifiersopt = _ConstructorModifiersopt; }
        public ConstructorDeclarator getConstructorDeclarator() { return _ConstructorDeclarator; }
        public void setConstructorDeclarator(ConstructorDeclarator _ConstructorDeclarator) { this._ConstructorDeclarator = _ConstructorDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }
        public void setThrowsopt(Throws _Throwsopt) { this._Throwsopt = _Throwsopt; }
        public ConstructorBody getConstructorBody() { return _ConstructorBody; }
        public void setConstructorBody(ConstructorBody _ConstructorBody) { this._ConstructorBody = _ConstructorBody; }

        public ConstructorDeclaration(IToken leftIToken, IToken rightIToken,
                                      IConstructorModifiersopt _ConstructorModifiersopt,
                                      ConstructorDeclarator _ConstructorDeclarator,
                                      Throws _Throwsopt,
                                      ConstructorBody _ConstructorBody)
            :base(leftIToken, rightIToken)

        {
            this._ConstructorModifiersopt = _ConstructorModifiersopt;
            if (_ConstructorModifiersopt != null) ((Ast) _ConstructorModifiersopt).setParent(this);
            this._ConstructorDeclarator = _ConstructorDeclarator;
            ((Ast) _ConstructorDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            this._ConstructorBody = _ConstructorBody;
            ((Ast) _ConstructorBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConstructorModifiersopt != null)  list.Add(_ConstructorModifiersopt);
            if(_ConstructorDeclarator != null)  list.Add(_ConstructorDeclarator);
            if(_Throwsopt != null)  list.Add(_Throwsopt);
            if(_ConstructorBody != null)  list.Add(_ConstructorBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstructorDeclaration)) return false;
            if (! base.Equals(o)) return false;
            ConstructorDeclaration other = (ConstructorDeclaration) o;
            if (_ConstructorModifiersopt == null)
                if (other._ConstructorModifiersopt != null) return false;
                else{}// continue
            else if (! _ConstructorModifiersopt.Equals(other._ConstructorModifiersopt)) return false;
            if (! _ConstructorDeclarator.Equals(other._ConstructorDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else{}// continue
            else if (! _Throwsopt.Equals(other._Throwsopt)) return false;
            if (! _ConstructorBody.Equals(other._ConstructorBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConstructorModifiersopt == null ? 0 : _ConstructorModifiersopt.GetHashCode());
            hash = hash * 31 + (_ConstructorDeclarator.GetHashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.GetHashCode());
            hash = hash * 31 + (_ConstructorBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
     *</b>
     */
    public class ConstructorDeclarator : Ast , IConstructorDeclarator
    {
        private TypeParameters _TypeParametersopt;
        private identifier _SimpleTypeName;
        private AstToken _LPAREN;
        private IFormalParameterListopt _FormalParameterListopt;
        private AstToken _RPAREN;

        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public void setTypeParametersopt(TypeParameters _TypeParametersopt) { this._TypeParametersopt = _TypeParametersopt; }
        public identifier getSimpleTypeName() { return _SimpleTypeName; }
        public void setSimpleTypeName(identifier _SimpleTypeName) { this._SimpleTypeName = _SimpleTypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public IFormalParameterListopt getFormalParameterListopt() { return _FormalParameterListopt; }
        public void setFormalParameterListopt(IFormalParameterListopt _FormalParameterListopt) { this._FormalParameterListopt = _FormalParameterListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public ConstructorDeclarator(IToken leftIToken, IToken rightIToken,
                                     TypeParameters _TypeParametersopt,
                                     identifier _SimpleTypeName,
                                     AstToken _LPAREN,
                                     IFormalParameterListopt _FormalParameterListopt,
                                     AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._SimpleTypeName = _SimpleTypeName;
            ((Ast) _SimpleTypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt != null) ((Ast) _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeParametersopt != null)  list.Add(_TypeParametersopt);
            if(_SimpleTypeName != null)  list.Add(_SimpleTypeName);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_FormalParameterListopt != null)  list.Add(_FormalParameterListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstructorDeclarator)) return false;
            if (! base.Equals(o)) return false;
            ConstructorDeclarator other = (ConstructorDeclarator) o;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else{}// continue
            else if (! _TypeParametersopt.Equals(other._TypeParametersopt)) return false;
            if (! _SimpleTypeName.Equals(other._SimpleTypeName)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_FormalParameterListopt == null)
                if (other._FormalParameterListopt != null) return false;
                else{}// continue
            else if (! _FormalParameterListopt.Equals(other._FormalParameterListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.GetHashCode());
            hash = hash * 31 + (_SimpleTypeName.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_FormalParameterListopt == null ? 0 : _FormalParameterListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 165:  ConstructorModifiers ::= ConstructorModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
     *</b>
     */
    public class ConstructorModifiers : Ast , IConstructorModifiers
    {
        private IConstructorModifiers _ConstructorModifiers;
        private IConstructorModifier _ConstructorModifier;

        public IConstructorModifiers getConstructorModifiers() { return _ConstructorModifiers; }
        public void setConstructorModifiers(IConstructorModifiers _ConstructorModifiers) { this._ConstructorModifiers = _ConstructorModifiers; }
        public IConstructorModifier getConstructorModifier() { return _ConstructorModifier; }
        public void setConstructorModifier(IConstructorModifier _ConstructorModifier) { this._ConstructorModifier = _ConstructorModifier; }

        public ConstructorModifiers(IToken leftIToken, IToken rightIToken,
                                    IConstructorModifiers _ConstructorModifiers,
                                    IConstructorModifier _ConstructorModifier)
            :base(leftIToken, rightIToken)

        {
            this._ConstructorModifiers = _ConstructorModifiers;
            ((Ast) _ConstructorModifiers).setParent(this);
            this._ConstructorModifier = _ConstructorModifier;
            ((Ast) _ConstructorModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConstructorModifiers != null)  list.Add(_ConstructorModifiers);
            if(_ConstructorModifier != null)  list.Add(_ConstructorModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstructorModifiers)) return false;
            if (! base.Equals(o)) return false;
            ConstructorModifiers other = (ConstructorModifiers) o;
            if (! _ConstructorModifiers.Equals(other._ConstructorModifiers)) return false;
            if (! _ConstructorModifier.Equals(other._ConstructorModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConstructorModifiers.GetHashCode());
            hash = hash * 31 + (_ConstructorModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
     *</b>
     */
    public class ConstructorBody : Ast , IConstructorBody
    {
        private AstToken _LBRACE;
        private IExplicitConstructorInvocationopt _ExplicitConstructorInvocationopt;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getExplicitConstructorInvocationopt</b> may be <b>null</b>
         */
        public IExplicitConstructorInvocationopt getExplicitConstructorInvocationopt() { return _ExplicitConstructorInvocationopt; }
        public void setExplicitConstructorInvocationopt(IExplicitConstructorInvocationopt _ExplicitConstructorInvocationopt) { this._ExplicitConstructorInvocationopt = _ExplicitConstructorInvocationopt; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public void setBlockStatementsopt(IBlockStatementsopt _BlockStatementsopt) { this._BlockStatementsopt = _BlockStatementsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public ConstructorBody(IToken leftIToken, IToken rightIToken,
                               AstToken _LBRACE,
                               IExplicitConstructorInvocationopt _ExplicitConstructorInvocationopt,
                               IBlockStatementsopt _BlockStatementsopt,
                               AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ExplicitConstructorInvocationopt = _ExplicitConstructorInvocationopt;
            if (_ExplicitConstructorInvocationopt != null) ((Ast) _ExplicitConstructorInvocationopt).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_ExplicitConstructorInvocationopt != null)  list.Add(_ExplicitConstructorInvocationopt);
            if(_BlockStatementsopt != null)  list.Add(_BlockStatementsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstructorBody)) return false;
            if (! base.Equals(o)) return false;
            ConstructorBody other = (ConstructorBody) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_ExplicitConstructorInvocationopt == null)
                if (other._ExplicitConstructorInvocationopt != null) return false;
                else{}// continue
            else if (! _ExplicitConstructorInvocationopt.Equals(other._ExplicitConstructorInvocationopt)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else{}// continue
            else if (! _BlockStatementsopt.Equals(other._BlockStatementsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_ExplicitConstructorInvocationopt == null ? 0 : _ExplicitConstructorInvocationopt.GetHashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
     *</b>
     */
    public class EnumDeclaration : Ast , IEnumDeclaration
    {
        private IClassModifiersopt _ClassModifiersopt;
        private AstToken _enum;
        private identifier _identifier;
        private Interfaces _Interfacesopt;
        private EnumBody _EnumBody;

        /**
         * The value returned by <b>getClassModifiersopt</b> may be <b>null</b>
         */
        public IClassModifiersopt getClassModifiersopt() { return _ClassModifiersopt; }
        public void setClassModifiersopt(IClassModifiersopt _ClassModifiersopt) { this._ClassModifiersopt = _ClassModifiersopt; }
        public AstToken getenum() { return _enum; }
        public void setenum(AstToken _enum) { this._enum = _enum; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        /**
         * The value returned by <b>getInterfacesopt</b> may be <b>null</b>
         */
        public Interfaces getInterfacesopt() { return _Interfacesopt; }
        public void setInterfacesopt(Interfaces _Interfacesopt) { this._Interfacesopt = _Interfacesopt; }
        public EnumBody getEnumBody() { return _EnumBody; }
        public void setEnumBody(EnumBody _EnumBody) { this._EnumBody = _EnumBody; }

        public EnumDeclaration(IToken leftIToken, IToken rightIToken,
                               IClassModifiersopt _ClassModifiersopt,
                               AstToken _enum,
                               identifier _identifier,
                               Interfaces _Interfacesopt,
                               EnumBody _EnumBody)
            :base(leftIToken, rightIToken)

        {
            this._ClassModifiersopt = _ClassModifiersopt;
            if (_ClassModifiersopt != null) ((Ast) _ClassModifiersopt).setParent(this);
            this._enum = _enum;
            ((Ast) _enum).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._Interfacesopt = _Interfacesopt;
            if (_Interfacesopt != null) ((Ast) _Interfacesopt).setParent(this);
            this._EnumBody = _EnumBody;
            ((Ast) _EnumBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassModifiersopt != null)  list.Add(_ClassModifiersopt);
            if(_enum != null)  list.Add(_enum);
            if(_identifier != null)  list.Add(_identifier);
            if(_Interfacesopt != null)  list.Add(_Interfacesopt);
            if(_EnumBody != null)  list.Add(_EnumBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnumDeclaration)) return false;
            if (! base.Equals(o)) return false;
            EnumDeclaration other = (EnumDeclaration) o;
            if (_ClassModifiersopt == null)
                if (other._ClassModifiersopt != null) return false;
                else{}// continue
            else if (! _ClassModifiersopt.Equals(other._ClassModifiersopt)) return false;
            if (! _enum.Equals(other._enum)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (_Interfacesopt == null)
                if (other._Interfacesopt != null) return false;
                else{}// continue
            else if (! _Interfacesopt.Equals(other._Interfacesopt)) return false;
            if (! _EnumBody.Equals(other._EnumBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassModifiersopt == null ? 0 : _ClassModifiersopt.GetHashCode());
            hash = hash * 31 + (_enum.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_Interfacesopt == null ? 0 : _Interfacesopt.GetHashCode());
            hash = hash * 31 + (_EnumBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
     *</b>
     */
    public class EnumBody : Ast , IEnumBody
    {
        private AstToken _LBRACE;
        private IEnumConstantsopt _EnumConstantsopt;
        private Commaopt _Commaopt;
        private EnumBodyDeclarations _EnumBodyDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getEnumConstantsopt</b> may be <b>null</b>
         */
        public IEnumConstantsopt getEnumConstantsopt() { return _EnumConstantsopt; }
        public void setEnumConstantsopt(IEnumConstantsopt _EnumConstantsopt) { this._EnumConstantsopt = _EnumConstantsopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        public void setCommaopt(Commaopt _Commaopt) { this._Commaopt = _Commaopt; }
        /**
         * The value returned by <b>getEnumBodyDeclarationsopt</b> may be <b>null</b>
         */
        public EnumBodyDeclarations getEnumBodyDeclarationsopt() { return _EnumBodyDeclarationsopt; }
        public void setEnumBodyDeclarationsopt(EnumBodyDeclarations _EnumBodyDeclarationsopt) { this._EnumBodyDeclarationsopt = _EnumBodyDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public EnumBody(IToken leftIToken, IToken rightIToken,
                        AstToken _LBRACE,
                        IEnumConstantsopt _EnumConstantsopt,
                        Commaopt _Commaopt,
                        EnumBodyDeclarations _EnumBodyDeclarationsopt,
                        AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._EnumConstantsopt = _EnumConstantsopt;
            if (_EnumConstantsopt != null) ((Ast) _EnumConstantsopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._EnumBodyDeclarationsopt = _EnumBodyDeclarationsopt;
            if (_EnumBodyDeclarationsopt != null) ((Ast) _EnumBodyDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_EnumConstantsopt != null)  list.Add(_EnumConstantsopt);
            if(_Commaopt != null)  list.Add(_Commaopt);
            if(_EnumBodyDeclarationsopt != null)  list.Add(_EnumBodyDeclarationsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnumBody)) return false;
            if (! base.Equals(o)) return false;
            EnumBody other = (EnumBody) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_EnumConstantsopt == null)
                if (other._EnumConstantsopt != null) return false;
                else{}// continue
            else if (! _EnumConstantsopt.Equals(other._EnumConstantsopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else{}// continue
            else if (! _Commaopt.Equals(other._Commaopt)) return false;
            if (_EnumBodyDeclarationsopt == null)
                if (other._EnumBodyDeclarationsopt != null) return false;
                else{}// continue
            else if (! _EnumBodyDeclarationsopt.Equals(other._EnumBodyDeclarationsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_EnumConstantsopt == null ? 0 : _EnumConstantsopt.GetHashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.GetHashCode());
            hash = hash * 31 + (_EnumBodyDeclarationsopt == null ? 0 : _EnumBodyDeclarationsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 177:  EnumConstants ::= EnumConstant
     *</em>
     *<p>
     *<b>
    *<li>Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
     *</b>
     */
    public class EnumConstants : Ast , IEnumConstants
    {
        private IEnumConstants _EnumConstants;
        private AstToken _COMMA;
        private IEnumConstant _EnumConstant;

        public IEnumConstants getEnumConstants() { return _EnumConstants; }
        public void setEnumConstants(IEnumConstants _EnumConstants) { this._EnumConstants = _EnumConstants; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IEnumConstant getEnumConstant() { return _EnumConstant; }
        public void setEnumConstant(IEnumConstant _EnumConstant) { this._EnumConstant = _EnumConstant; }

        public EnumConstants(IToken leftIToken, IToken rightIToken,
                             IEnumConstants _EnumConstants,
                             AstToken _COMMA,
                             IEnumConstant _EnumConstant)
            :base(leftIToken, rightIToken)

        {
            this._EnumConstants = _EnumConstants;
            ((Ast) _EnumConstants).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._EnumConstant = _EnumConstant;
            ((Ast) _EnumConstant).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_EnumConstants != null)  list.Add(_EnumConstants);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_EnumConstant != null)  list.Add(_EnumConstant);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnumConstants)) return false;
            if (! base.Equals(o)) return false;
            EnumConstants other = (EnumConstants) o;
            if (! _EnumConstants.Equals(other._EnumConstants)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _EnumConstant.Equals(other._EnumConstant)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_EnumConstants.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_EnumConstant.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 307:  EnumConstant ::= identifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
     *</b>
     */
    public class EnumConstant : Ast , IEnumConstant
    {
        private IAnnotationsopt _Annotationsopt;
        private identifier _identifier;
        private Arguments _Argumentsopt;
        private ClassBody _ClassBodyopt;

        /**
         * The value returned by <b>getAnnotationsopt</b> may be <b>null</b>
         */
        public IAnnotationsopt getAnnotationsopt() { return _Annotationsopt; }
        public void setAnnotationsopt(IAnnotationsopt _Annotationsopt) { this._Annotationsopt = _Annotationsopt; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        /**
         * The value returned by <b>getArgumentsopt</b> may be <b>null</b>
         */
        public Arguments getArgumentsopt() { return _Argumentsopt; }
        public void setArgumentsopt(Arguments _Argumentsopt) { this._Argumentsopt = _Argumentsopt; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }
        public void setClassBodyopt(ClassBody _ClassBodyopt) { this._ClassBodyopt = _ClassBodyopt; }

        public EnumConstant(IToken leftIToken, IToken rightIToken,
                            IAnnotationsopt _Annotationsopt,
                            identifier _identifier,
                            Arguments _Argumentsopt,
                            ClassBody _ClassBodyopt)
            :base(leftIToken, rightIToken)

        {
            this._Annotationsopt = _Annotationsopt;
            if (_Annotationsopt != null) ((Ast) _Annotationsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._Argumentsopt = _Argumentsopt;
            if (_Argumentsopt != null) ((Ast) _Argumentsopt).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Annotationsopt != null)  list.Add(_Annotationsopt);
            if(_identifier != null)  list.Add(_identifier);
            if(_Argumentsopt != null)  list.Add(_Argumentsopt);
            if(_ClassBodyopt != null)  list.Add(_ClassBodyopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnumConstant)) return false;
            if (! base.Equals(o)) return false;
            EnumConstant other = (EnumConstant) o;
            if (_Annotationsopt == null)
                if (other._Annotationsopt != null) return false;
                else{}// continue
            else if (! _Annotationsopt.Equals(other._Annotationsopt)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (_Argumentsopt == null)
                if (other._Argumentsopt != null) return false;
                else{}// continue
            else if (! _Argumentsopt.Equals(other._Argumentsopt)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else{}// continue
            else if (! _ClassBodyopt.Equals(other._ClassBodyopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Annotationsopt == null ? 0 : _Annotationsopt.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_Argumentsopt == null ? 0 : _Argumentsopt.GetHashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 180:  Arguments ::= ( ArgumentListopt )
     *</b>
     */
    public class Arguments : Ast , IArguments
    {
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public Arguments(IToken leftIToken, IToken rightIToken,
                         AstToken _LPAREN,
                         IArgumentListopt _ArgumentListopt,
                         AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Arguments)) return false;
            if (! base.Equals(o)) return false;
            Arguments other = (Arguments) o;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
     *</b>
     */
    public class EnumBodyDeclarations : Ast , IEnumBodyDeclarations
    {
        private AstToken _SEMICOLON;
        private IClassBodyDeclarationsopt _ClassBodyDeclarationsopt;

        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getClassBodyDeclarationsopt</b> may be <b>null</b>
         */
        public IClassBodyDeclarationsopt getClassBodyDeclarationsopt() { return _ClassBodyDeclarationsopt; }
        public void setClassBodyDeclarationsopt(IClassBodyDeclarationsopt _ClassBodyDeclarationsopt) { this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt; }

        public EnumBodyDeclarations(IToken leftIToken, IToken rightIToken,
                                    AstToken _SEMICOLON,
                                    IClassBodyDeclarationsopt _ClassBodyDeclarationsopt)
            :base(leftIToken, rightIToken)

        {
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._ClassBodyDeclarationsopt = _ClassBodyDeclarationsopt;
            if (_ClassBodyDeclarationsopt != null) ((Ast) _ClassBodyDeclarationsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            if(_ClassBodyDeclarationsopt != null)  list.Add(_ClassBodyDeclarationsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnumBodyDeclarations)) return false;
            if (! base.Equals(o)) return false;
            EnumBodyDeclarations other = (EnumBodyDeclarations) o;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            if (_ClassBodyDeclarationsopt == null)
                if (other._ClassBodyDeclarationsopt != null) return false;
                else{}// continue
            else if (! _ClassBodyDeclarationsopt.Equals(other._ClassBodyDeclarationsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            hash = hash * 31 + (_ClassBodyDeclarationsopt == null ? 0 : _ClassBodyDeclarationsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
     *</b>
     */
    public class NormalInterfaceDeclaration : Ast , INormalInterfaceDeclaration
    {
        private IInterfaceModifiersopt _InterfaceModifiersopt;
        private AstToken _interface;
        private identifier _identifier;
        private TypeParameters _TypeParametersopt;
        private IExtendsInterfacesopt _ExtendsInterfacesopt;
        private InterfaceBody _InterfaceBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public IInterfaceModifiersopt getInterfaceModifiersopt() { return _InterfaceModifiersopt; }
        public void setInterfaceModifiersopt(IInterfaceModifiersopt _InterfaceModifiersopt) { this._InterfaceModifiersopt = _InterfaceModifiersopt; }
        public AstToken getinterface() { return _interface; }
        public void setinterface(AstToken _interface) { this._interface = _interface; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public void setTypeParametersopt(TypeParameters _TypeParametersopt) { this._TypeParametersopt = _TypeParametersopt; }
        /**
         * The value returned by <b>getExtendsInterfacesopt</b> may be <b>null</b>
         */
        public IExtendsInterfacesopt getExtendsInterfacesopt() { return _ExtendsInterfacesopt; }
        public void setExtendsInterfacesopt(IExtendsInterfacesopt _ExtendsInterfacesopt) { this._ExtendsInterfacesopt = _ExtendsInterfacesopt; }
        public InterfaceBody getInterfaceBody() { return _InterfaceBody; }
        public void setInterfaceBody(InterfaceBody _InterfaceBody) { this._InterfaceBody = _InterfaceBody; }

        public NormalInterfaceDeclaration(IToken leftIToken, IToken rightIToken,
                                          IInterfaceModifiersopt _InterfaceModifiersopt,
                                          AstToken _interface,
                                          identifier _identifier,
                                          TypeParameters _TypeParametersopt,
                                          IExtendsInterfacesopt _ExtendsInterfacesopt,
                                          InterfaceBody _InterfaceBody)
            :base(leftIToken, rightIToken)

        {
            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt != null) ((Ast) _InterfaceModifiersopt).setParent(this);
            this._interface = _interface;
            ((Ast) _interface).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ExtendsInterfacesopt = _ExtendsInterfacesopt;
            if (_ExtendsInterfacesopt != null) ((Ast) _ExtendsInterfacesopt).setParent(this);
            this._InterfaceBody = _InterfaceBody;
            ((Ast) _InterfaceBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InterfaceModifiersopt != null)  list.Add(_InterfaceModifiersopt);
            if(_interface != null)  list.Add(_interface);
            if(_identifier != null)  list.Add(_identifier);
            if(_TypeParametersopt != null)  list.Add(_TypeParametersopt);
            if(_ExtendsInterfacesopt != null)  list.Add(_ExtendsInterfacesopt);
            if(_InterfaceBody != null)  list.Add(_InterfaceBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is NormalInterfaceDeclaration)) return false;
            if (! base.Equals(o)) return false;
            NormalInterfaceDeclaration other = (NormalInterfaceDeclaration) o;
            if (_InterfaceModifiersopt == null)
                if (other._InterfaceModifiersopt != null) return false;
                else{}// continue
            else if (! _InterfaceModifiersopt.Equals(other._InterfaceModifiersopt)) return false;
            if (! _interface.Equals(other._interface)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else{}// continue
            else if (! _TypeParametersopt.Equals(other._TypeParametersopt)) return false;
            if (_ExtendsInterfacesopt == null)
                if (other._ExtendsInterfacesopt != null) return false;
                else{}// continue
            else if (! _ExtendsInterfacesopt.Equals(other._ExtendsInterfacesopt)) return false;
            if (! _InterfaceBody.Equals(other._InterfaceBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InterfaceModifiersopt == null ? 0 : _InterfaceModifiersopt.GetHashCode());
            hash = hash * 31 + (_interface.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.GetHashCode());
            hash = hash * 31 + (_ExtendsInterfacesopt == null ? 0 : _ExtendsInterfacesopt.GetHashCode());
            hash = hash * 31 + (_InterfaceBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 185:  InterfaceModifiers ::= InterfaceModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
     *</b>
     */
    public class InterfaceModifiers : Ast , IInterfaceModifiers
    {
        private IInterfaceModifiers _InterfaceModifiers;
        private IInterfaceModifier _InterfaceModifier;

        public IInterfaceModifiers getInterfaceModifiers() { return _InterfaceModifiers; }
        public void setInterfaceModifiers(IInterfaceModifiers _InterfaceModifiers) { this._InterfaceModifiers = _InterfaceModifiers; }
        public IInterfaceModifier getInterfaceModifier() { return _InterfaceModifier; }
        public void setInterfaceModifier(IInterfaceModifier _InterfaceModifier) { this._InterfaceModifier = _InterfaceModifier; }

        public InterfaceModifiers(IToken leftIToken, IToken rightIToken,
                                  IInterfaceModifiers _InterfaceModifiers,
                                  IInterfaceModifier _InterfaceModifier)
            :base(leftIToken, rightIToken)

        {
            this._InterfaceModifiers = _InterfaceModifiers;
            ((Ast) _InterfaceModifiers).setParent(this);
            this._InterfaceModifier = _InterfaceModifier;
            ((Ast) _InterfaceModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InterfaceModifiers != null)  list.Add(_InterfaceModifiers);
            if(_InterfaceModifier != null)  list.Add(_InterfaceModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InterfaceModifiers)) return false;
            if (! base.Equals(o)) return false;
            InterfaceModifiers other = (InterfaceModifiers) o;
            if (! _InterfaceModifiers.Equals(other._InterfaceModifiers)) return false;
            if (! _InterfaceModifier.Equals(other._InterfaceModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InterfaceModifiers.GetHashCode());
            hash = hash * 31 + (_InterfaceModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
     *</b>
     */
    public class InterfaceBody : Ast , IInterfaceBody
    {
        private AstToken _LBRACE;
        private IInterfaceMemberDeclarationsopt _InterfaceMemberDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getInterfaceMemberDeclarationsopt</b> may be <b>null</b>
         */
        public IInterfaceMemberDeclarationsopt getInterfaceMemberDeclarationsopt() { return _InterfaceMemberDeclarationsopt; }
        public void setInterfaceMemberDeclarationsopt(IInterfaceMemberDeclarationsopt _InterfaceMemberDeclarationsopt) { this._InterfaceMemberDeclarationsopt = _InterfaceMemberDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public InterfaceBody(IToken leftIToken, IToken rightIToken,
                             AstToken _LBRACE,
                             IInterfaceMemberDeclarationsopt _InterfaceMemberDeclarationsopt,
                             AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._InterfaceMemberDeclarationsopt = _InterfaceMemberDeclarationsopt;
            if (_InterfaceMemberDeclarationsopt != null) ((Ast) _InterfaceMemberDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_InterfaceMemberDeclarationsopt != null)  list.Add(_InterfaceMemberDeclarationsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InterfaceBody)) return false;
            if (! base.Equals(o)) return false;
            InterfaceBody other = (InterfaceBody) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_InterfaceMemberDeclarationsopt == null)
                if (other._InterfaceMemberDeclarationsopt != null) return false;
                else{}// continue
            else if (! _InterfaceMemberDeclarationsopt.Equals(other._InterfaceMemberDeclarationsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_InterfaceMemberDeclarationsopt == null ? 0 : _InterfaceMemberDeclarationsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
     *</b>
     */
    public class InterfaceMemberDeclarations : Ast , IInterfaceMemberDeclarations
    {
        private IInterfaceMemberDeclarations _InterfaceMemberDeclarations;
        private IInterfaceMemberDeclaration _InterfaceMemberDeclaration;

        public IInterfaceMemberDeclarations getInterfaceMemberDeclarations() { return _InterfaceMemberDeclarations; }
        public void setInterfaceMemberDeclarations(IInterfaceMemberDeclarations _InterfaceMemberDeclarations) { this._InterfaceMemberDeclarations = _InterfaceMemberDeclarations; }
        public IInterfaceMemberDeclaration getInterfaceMemberDeclaration() { return _InterfaceMemberDeclaration; }
        public void setInterfaceMemberDeclaration(IInterfaceMemberDeclaration _InterfaceMemberDeclaration) { this._InterfaceMemberDeclaration = _InterfaceMemberDeclaration; }

        public InterfaceMemberDeclarations(IToken leftIToken, IToken rightIToken,
                                           IInterfaceMemberDeclarations _InterfaceMemberDeclarations,
                                           IInterfaceMemberDeclaration _InterfaceMemberDeclaration)
            :base(leftIToken, rightIToken)

        {
            this._InterfaceMemberDeclarations = _InterfaceMemberDeclarations;
            ((Ast) _InterfaceMemberDeclarations).setParent(this);
            this._InterfaceMemberDeclaration = _InterfaceMemberDeclaration;
            ((Ast) _InterfaceMemberDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InterfaceMemberDeclarations != null)  list.Add(_InterfaceMemberDeclarations);
            if(_InterfaceMemberDeclaration != null)  list.Add(_InterfaceMemberDeclaration);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InterfaceMemberDeclarations)) return false;
            if (! base.Equals(o)) return false;
            InterfaceMemberDeclarations other = (InterfaceMemberDeclarations) o;
            if (! _InterfaceMemberDeclarations.Equals(other._InterfaceMemberDeclarations)) return false;
            if (! _InterfaceMemberDeclaration.Equals(other._InterfaceMemberDeclaration)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InterfaceMemberDeclarations.GetHashCode());
            hash = hash * 31 + (_InterfaceMemberDeclaration.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
    *<li>Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
    *<li>Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
    *<li>Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 203:  InterfaceMemberDeclaration ::= ;
     *</b>
     */
    public class InterfaceMemberDeclaration : AstToken , IInterfaceMemberDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public InterfaceMemberDeclaration(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
     *</b>
     */
    public class ConstantDeclaration : Ast , IConstantDeclaration
    {
        private IConstantModifiersopt _ConstantModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;

        /**
         * The value returned by <b>getConstantModifiersopt</b> may be <b>null</b>
         */
        public IConstantModifiersopt getConstantModifiersopt() { return _ConstantModifiersopt; }
        public void setConstantModifiersopt(IConstantModifiersopt _ConstantModifiersopt) { this._ConstantModifiersopt = _ConstantModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public void setVariableDeclarators(IVariableDeclarators _VariableDeclarators) { this._VariableDeclarators = _VariableDeclarators; }

        public ConstantDeclaration(IToken leftIToken, IToken rightIToken,
                                   IConstantModifiersopt _ConstantModifiersopt,
                                   IType _Type,
                                   IVariableDeclarators _VariableDeclarators)
            :base(leftIToken, rightIToken)

        {
            this._ConstantModifiersopt = _ConstantModifiersopt;
            if (_ConstantModifiersopt != null) ((Ast) _ConstantModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConstantModifiersopt != null)  list.Add(_ConstantModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_VariableDeclarators != null)  list.Add(_VariableDeclarators);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstantDeclaration)) return false;
            if (! base.Equals(o)) return false;
            ConstantDeclaration other = (ConstantDeclaration) o;
            if (_ConstantModifiersopt == null)
                if (other._ConstantModifiersopt != null) return false;
                else{}// continue
            else if (! _ConstantModifiersopt.Equals(other._ConstantModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (! _VariableDeclarators.Equals(other._VariableDeclarators)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConstantModifiersopt == null ? 0 : _ConstantModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_VariableDeclarators.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 205:  ConstantModifiers ::= ConstantModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
     *</b>
     */
    public class ConstantModifiers : Ast , IConstantModifiers
    {
        private IConstantModifiers _ConstantModifiers;
        private IConstantModifier _ConstantModifier;

        public IConstantModifiers getConstantModifiers() { return _ConstantModifiers; }
        public void setConstantModifiers(IConstantModifiers _ConstantModifiers) { this._ConstantModifiers = _ConstantModifiers; }
        public IConstantModifier getConstantModifier() { return _ConstantModifier; }
        public void setConstantModifier(IConstantModifier _ConstantModifier) { this._ConstantModifier = _ConstantModifier; }

        public ConstantModifiers(IToken leftIToken, IToken rightIToken,
                                 IConstantModifiers _ConstantModifiers,
                                 IConstantModifier _ConstantModifier)
            :base(leftIToken, rightIToken)

        {
            this._ConstantModifiers = _ConstantModifiers;
            ((Ast) _ConstantModifiers).setParent(this);
            this._ConstantModifier = _ConstantModifier;
            ((Ast) _ConstantModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConstantModifiers != null)  list.Add(_ConstantModifiers);
            if(_ConstantModifier != null)  list.Add(_ConstantModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConstantModifiers)) return false;
            if (! base.Equals(o)) return false;
            ConstantModifiers other = (ConstantModifiers) o;
            if (! _ConstantModifiers.Equals(other._ConstantModifiers)) return false;
            if (! _ConstantModifier.Equals(other._ConstantModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConstantModifiers.GetHashCode());
            hash = hash * 31 + (_ConstantModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
     *</b>
     */
    public class AbstractMethodDeclaration : Ast , IAbstractMethodDeclaration
    {
        private IAbstractMethodModifiersopt _AbstractMethodModifiersopt;
        private TypeParameters _TypeParametersopt;
        private IResultType _ResultType;
        private IMethodDeclarator _MethodDeclarator;
        private Throws _Throwsopt;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public IAbstractMethodModifiersopt getAbstractMethodModifiersopt() { return _AbstractMethodModifiersopt; }
        public void setAbstractMethodModifiersopt(IAbstractMethodModifiersopt _AbstractMethodModifiersopt) { this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt; }
        /**
         * The value returned by <b>getTypeParametersopt</b> may be <b>null</b>
         */
        public TypeParameters getTypeParametersopt() { return _TypeParametersopt; }
        public void setTypeParametersopt(TypeParameters _TypeParametersopt) { this._TypeParametersopt = _TypeParametersopt; }
        public IResultType getResultType() { return _ResultType; }
        public void setResultType(IResultType _ResultType) { this._ResultType = _ResultType; }
        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        public void setMethodDeclarator(IMethodDeclarator _MethodDeclarator) { this._MethodDeclarator = _MethodDeclarator; }
        /**
         * The value returned by <b>getThrowsopt</b> may be <b>null</b>
         */
        public Throws getThrowsopt() { return _Throwsopt; }
        public void setThrowsopt(Throws _Throwsopt) { this._Throwsopt = _Throwsopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public AbstractMethodDeclaration(IToken leftIToken, IToken rightIToken,
                                         IAbstractMethodModifiersopt _AbstractMethodModifiersopt,
                                         TypeParameters _TypeParametersopt,
                                         IResultType _ResultType,
                                         IMethodDeclarator _MethodDeclarator,
                                         Throws _Throwsopt,
                                         AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt != null) ((Ast) _AbstractMethodModifiersopt).setParent(this);
            this._TypeParametersopt = _TypeParametersopt;
            if (_TypeParametersopt != null) ((Ast) _TypeParametersopt).setParent(this);
            this._ResultType = _ResultType;
            ((Ast) _ResultType).setParent(this);
            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._Throwsopt = _Throwsopt;
            if (_Throwsopt != null) ((Ast) _Throwsopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AbstractMethodModifiersopt != null)  list.Add(_AbstractMethodModifiersopt);
            if(_TypeParametersopt != null)  list.Add(_TypeParametersopt);
            if(_ResultType != null)  list.Add(_ResultType);
            if(_MethodDeclarator != null)  list.Add(_MethodDeclarator);
            if(_Throwsopt != null)  list.Add(_Throwsopt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AbstractMethodDeclaration)) return false;
            if (! base.Equals(o)) return false;
            AbstractMethodDeclaration other = (AbstractMethodDeclaration) o;
            if (_AbstractMethodModifiersopt == null)
                if (other._AbstractMethodModifiersopt != null) return false;
                else{}// continue
            else if (! _AbstractMethodModifiersopt.Equals(other._AbstractMethodModifiersopt)) return false;
            if (_TypeParametersopt == null)
                if (other._TypeParametersopt != null) return false;
                else{}// continue
            else if (! _TypeParametersopt.Equals(other._TypeParametersopt)) return false;
            if (! _ResultType.Equals(other._ResultType)) return false;
            if (! _MethodDeclarator.Equals(other._MethodDeclarator)) return false;
            if (_Throwsopt == null)
                if (other._Throwsopt != null) return false;
                else{}// continue
            else if (! _Throwsopt.Equals(other._Throwsopt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AbstractMethodModifiersopt == null ? 0 : _AbstractMethodModifiersopt.GetHashCode());
            hash = hash * 31 + (_TypeParametersopt == null ? 0 : _TypeParametersopt.GetHashCode());
            hash = hash * 31 + (_ResultType.GetHashCode());
            hash = hash * 31 + (_MethodDeclarator.GetHashCode());
            hash = hash * 31 + (_Throwsopt == null ? 0 : _Throwsopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
     *</em>
     *<p>
     *<b>
    *<li>Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
     *</b>
     */
    public class AbstractMethodModifiers : Ast , IAbstractMethodModifiers
    {
        private IAbstractMethodModifiers _AbstractMethodModifiers;
        private IAbstractMethodModifier _AbstractMethodModifier;

        public IAbstractMethodModifiers getAbstractMethodModifiers() { return _AbstractMethodModifiers; }
        public void setAbstractMethodModifiers(IAbstractMethodModifiers _AbstractMethodModifiers) { this._AbstractMethodModifiers = _AbstractMethodModifiers; }
        public IAbstractMethodModifier getAbstractMethodModifier() { return _AbstractMethodModifier; }
        public void setAbstractMethodModifier(IAbstractMethodModifier _AbstractMethodModifier) { this._AbstractMethodModifier = _AbstractMethodModifier; }

        public AbstractMethodModifiers(IToken leftIToken, IToken rightIToken,
                                       IAbstractMethodModifiers _AbstractMethodModifiers,
                                       IAbstractMethodModifier _AbstractMethodModifier)
            :base(leftIToken, rightIToken)

        {
            this._AbstractMethodModifiers = _AbstractMethodModifiers;
            ((Ast) _AbstractMethodModifiers).setParent(this);
            this._AbstractMethodModifier = _AbstractMethodModifier;
            ((Ast) _AbstractMethodModifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AbstractMethodModifiers != null)  list.Add(_AbstractMethodModifiers);
            if(_AbstractMethodModifier != null)  list.Add(_AbstractMethodModifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AbstractMethodModifiers)) return false;
            if (! base.Equals(o)) return false;
            AbstractMethodModifiers other = (AbstractMethodModifiers) o;
            if (! _AbstractMethodModifiers.Equals(other._AbstractMethodModifiers)) return false;
            if (! _AbstractMethodModifier.Equals(other._AbstractMethodModifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AbstractMethodModifiers.GetHashCode());
            hash = hash * 31 + (_AbstractMethodModifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
     *</b>
     */
    public class AnnotationTypeDeclaration : Ast , IAnnotationTypeDeclaration
    {
        private IInterfaceModifiersopt _InterfaceModifiersopt;
        private AstToken _AT;
        private AstToken _interface;
        private identifier _identifier;
        private AnnotationTypeBody _AnnotationTypeBody;

        /**
         * The value returned by <b>getInterfaceModifiersopt</b> may be <b>null</b>
         */
        public IInterfaceModifiersopt getInterfaceModifiersopt() { return _InterfaceModifiersopt; }
        public void setInterfaceModifiersopt(IInterfaceModifiersopt _InterfaceModifiersopt) { this._InterfaceModifiersopt = _InterfaceModifiersopt; }
        public AstToken getAT() { return _AT; }
        public void setAT(AstToken _AT) { this._AT = _AT; }
        public AstToken getinterface() { return _interface; }
        public void setinterface(AstToken _interface) { this._interface = _interface; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AnnotationTypeBody getAnnotationTypeBody() { return _AnnotationTypeBody; }
        public void setAnnotationTypeBody(AnnotationTypeBody _AnnotationTypeBody) { this._AnnotationTypeBody = _AnnotationTypeBody; }

        public AnnotationTypeDeclaration(IToken leftIToken, IToken rightIToken,
                                         IInterfaceModifiersopt _InterfaceModifiersopt,
                                         AstToken _AT,
                                         AstToken _interface,
                                         identifier _identifier,
                                         AnnotationTypeBody _AnnotationTypeBody)
            :base(leftIToken, rightIToken)

        {
            this._InterfaceModifiersopt = _InterfaceModifiersopt;
            if (_InterfaceModifiersopt != null) ((Ast) _InterfaceModifiersopt).setParent(this);
            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._interface = _interface;
            ((Ast) _interface).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._AnnotationTypeBody = _AnnotationTypeBody;
            ((Ast) _AnnotationTypeBody).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InterfaceModifiersopt != null)  list.Add(_InterfaceModifiersopt);
            if(_AT != null)  list.Add(_AT);
            if(_interface != null)  list.Add(_interface);
            if(_identifier != null)  list.Add(_identifier);
            if(_AnnotationTypeBody != null)  list.Add(_AnnotationTypeBody);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AnnotationTypeDeclaration)) return false;
            if (! base.Equals(o)) return false;
            AnnotationTypeDeclaration other = (AnnotationTypeDeclaration) o;
            if (_InterfaceModifiersopt == null)
                if (other._InterfaceModifiersopt != null) return false;
                else{}// continue
            else if (! _InterfaceModifiersopt.Equals(other._InterfaceModifiersopt)) return false;
            if (! _AT.Equals(other._AT)) return false;
            if (! _interface.Equals(other._interface)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _AnnotationTypeBody.Equals(other._AnnotationTypeBody)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InterfaceModifiersopt == null ? 0 : _InterfaceModifiersopt.GetHashCode());
            hash = hash * 31 + (_AT.GetHashCode());
            hash = hash * 31 + (_interface.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_AnnotationTypeBody.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
     *</b>
     */
    public class AnnotationTypeBody : Ast , IAnnotationTypeBody
    {
        private AstToken _LBRACE;
        private IAnnotationTypeElementDeclarationsopt _AnnotationTypeElementDeclarationsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getAnnotationTypeElementDeclarationsopt</b> may be <b>null</b>
         */
        public IAnnotationTypeElementDeclarationsopt getAnnotationTypeElementDeclarationsopt() { return _AnnotationTypeElementDeclarationsopt; }
        public void setAnnotationTypeElementDeclarationsopt(IAnnotationTypeElementDeclarationsopt _AnnotationTypeElementDeclarationsopt) { this._AnnotationTypeElementDeclarationsopt = _AnnotationTypeElementDeclarationsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public AnnotationTypeBody(IToken leftIToken, IToken rightIToken,
                                  AstToken _LBRACE,
                                  IAnnotationTypeElementDeclarationsopt _AnnotationTypeElementDeclarationsopt,
                                  AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._AnnotationTypeElementDeclarationsopt = _AnnotationTypeElementDeclarationsopt;
            if (_AnnotationTypeElementDeclarationsopt != null) ((Ast) _AnnotationTypeElementDeclarationsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_AnnotationTypeElementDeclarationsopt != null)  list.Add(_AnnotationTypeElementDeclarationsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AnnotationTypeBody)) return false;
            if (! base.Equals(o)) return false;
            AnnotationTypeBody other = (AnnotationTypeBody) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_AnnotationTypeElementDeclarationsopt == null)
                if (other._AnnotationTypeElementDeclarationsopt != null) return false;
                else{}// continue
            else if (! _AnnotationTypeElementDeclarationsopt.Equals(other._AnnotationTypeElementDeclarationsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_AnnotationTypeElementDeclarationsopt == null ? 0 : _AnnotationTypeElementDeclarationsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
     *</em>
     *<p>
     *<b>
    *<li>Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
     *</b>
     */
    public class AnnotationTypeElementDeclarations : Ast , IAnnotationTypeElementDeclarations
    {
        private IAnnotationTypeElementDeclarations _AnnotationTypeElementDeclarations;
        private IAnnotationTypeElementDeclaration _AnnotationTypeElementDeclaration;

        public IAnnotationTypeElementDeclarations getAnnotationTypeElementDeclarations() { return _AnnotationTypeElementDeclarations; }
        public void setAnnotationTypeElementDeclarations(IAnnotationTypeElementDeclarations _AnnotationTypeElementDeclarations) { this._AnnotationTypeElementDeclarations = _AnnotationTypeElementDeclarations; }
        public IAnnotationTypeElementDeclaration getAnnotationTypeElementDeclaration() { return _AnnotationTypeElementDeclaration; }
        public void setAnnotationTypeElementDeclaration(IAnnotationTypeElementDeclaration _AnnotationTypeElementDeclaration) { this._AnnotationTypeElementDeclaration = _AnnotationTypeElementDeclaration; }

        public AnnotationTypeElementDeclarations(IToken leftIToken, IToken rightIToken,
                                                 IAnnotationTypeElementDeclarations _AnnotationTypeElementDeclarations,
                                                 IAnnotationTypeElementDeclaration _AnnotationTypeElementDeclaration)
            :base(leftIToken, rightIToken)

        {
            this._AnnotationTypeElementDeclarations = _AnnotationTypeElementDeclarations;
            ((Ast) _AnnotationTypeElementDeclarations).setParent(this);
            this._AnnotationTypeElementDeclaration = _AnnotationTypeElementDeclaration;
            ((Ast) _AnnotationTypeElementDeclaration).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AnnotationTypeElementDeclarations != null)  list.Add(_AnnotationTypeElementDeclarations);
            if(_AnnotationTypeElementDeclaration != null)  list.Add(_AnnotationTypeElementDeclaration);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AnnotationTypeElementDeclarations)) return false;
            if (! base.Equals(o)) return false;
            AnnotationTypeElementDeclarations other = (AnnotationTypeElementDeclarations) o;
            if (! _AnnotationTypeElementDeclarations.Equals(other._AnnotationTypeElementDeclarations)) return false;
            if (! _AnnotationTypeElementDeclaration.Equals(other._AnnotationTypeElementDeclaration)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AnnotationTypeElementDeclarations.GetHashCode());
            hash = hash * 31 + (_AnnotationTypeElementDeclaration.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 228:  DefaultValue ::= default ElementValue
     *</b>
     */
    public class DefaultValue : Ast , IDefaultValue
    {
        private AstToken _default;
        private IElementValue _ElementValue;

        public AstToken getdefault() { return _default; }
        public void setdefault(AstToken _default) { this._default = _default; }
        public IElementValue getElementValue() { return _ElementValue; }
        public void setElementValue(IElementValue _ElementValue) { this._ElementValue = _ElementValue; }

        public DefaultValue(IToken leftIToken, IToken rightIToken,
                            AstToken _default,
                            IElementValue _ElementValue)
            :base(leftIToken, rightIToken)

        {
            this._default = _default;
            ((Ast) _default).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_default != null)  list.Add(_default);
            if(_ElementValue != null)  list.Add(_ElementValue);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is DefaultValue)) return false;
            if (! base.Equals(o)) return false;
            DefaultValue other = (DefaultValue) o;
            if (! _default.Equals(other._default)) return false;
            if (! _ElementValue.Equals(other._ElementValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_default.GetHashCode());
            hash = hash * 31 + (_ElementValue.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 229:  Annotations ::= Annotation
     *</em>
     *<p>
     *<b>
    *<li>Rule 230:  Annotations ::= Annotations Annotation
     *</b>
     */
    public class Annotations : Ast , IAnnotations
    {
        private IAnnotations _Annotations;
        private IAnnotation _Annotation;

        public IAnnotations getAnnotations() { return _Annotations; }
        public void setAnnotations(IAnnotations _Annotations) { this._Annotations = _Annotations; }
        public IAnnotation getAnnotation() { return _Annotation; }
        public void setAnnotation(IAnnotation _Annotation) { this._Annotation = _Annotation; }

        public Annotations(IToken leftIToken, IToken rightIToken,
                           IAnnotations _Annotations,
                           IAnnotation _Annotation)
            :base(leftIToken, rightIToken)

        {
            this._Annotations = _Annotations;
            ((Ast) _Annotations).setParent(this);
            this._Annotation = _Annotation;
            ((Ast) _Annotation).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Annotations != null)  list.Add(_Annotations);
            if(_Annotation != null)  list.Add(_Annotation);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Annotations)) return false;
            if (! base.Equals(o)) return false;
            Annotations other = (Annotations) o;
            if (! _Annotations.Equals(other._Annotations)) return false;
            if (! _Annotation.Equals(other._Annotation)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Annotations.GetHashCode());
            hash = hash * 31 + (_Annotation.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
     *</b>
     */
    public class NormalAnnotation : Ast , INormalAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;
        private AstToken _LPAREN;
        private IElementValuePairsopt _ElementValuePairsopt;
        private AstToken _RPAREN;

        public AstToken getAT() { return _AT; }
        public void setAT(AstToken _AT) { this._AT = _AT; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getElementValuePairsopt</b> may be <b>null</b>
         */
        public IElementValuePairsopt getElementValuePairsopt() { return _ElementValuePairsopt; }
        public void setElementValuePairsopt(IElementValuePairsopt _ElementValuePairsopt) { this._ElementValuePairsopt = _ElementValuePairsopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public NormalAnnotation(IToken leftIToken, IToken rightIToken,
                                AstToken _AT,
                                ITypeName _TypeName,
                                AstToken _LPAREN,
                                IElementValuePairsopt _ElementValuePairsopt,
                                AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ElementValuePairsopt = _ElementValuePairsopt;
            if (_ElementValuePairsopt != null) ((Ast) _ElementValuePairsopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AT != null)  list.Add(_AT);
            if(_TypeName != null)  list.Add(_TypeName);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ElementValuePairsopt != null)  list.Add(_ElementValuePairsopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is NormalAnnotation)) return false;
            if (! base.Equals(o)) return false;
            NormalAnnotation other = (NormalAnnotation) o;
            if (! _AT.Equals(other._AT)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ElementValuePairsopt == null)
                if (other._ElementValuePairsopt != null) return false;
                else{}// continue
            else if (! _ElementValuePairsopt.Equals(other._ElementValuePairsopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AT.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ElementValuePairsopt == null ? 0 : _ElementValuePairsopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 235:  ElementValuePairs ::= ElementValuePair
     *</em>
     *<p>
     *<b>
    *<li>Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
     *</b>
     */
    public class ElementValuePairs : Ast , IElementValuePairs
    {
        private IElementValuePairs _ElementValuePairs;
        private AstToken _COMMA;
        private ElementValuePair _ElementValuePair;

        public IElementValuePairs getElementValuePairs() { return _ElementValuePairs; }
        public void setElementValuePairs(IElementValuePairs _ElementValuePairs) { this._ElementValuePairs = _ElementValuePairs; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public ElementValuePair getElementValuePair() { return _ElementValuePair; }
        public void setElementValuePair(ElementValuePair _ElementValuePair) { this._ElementValuePair = _ElementValuePair; }

        public ElementValuePairs(IToken leftIToken, IToken rightIToken,
                                 IElementValuePairs _ElementValuePairs,
                                 AstToken _COMMA,
                                 ElementValuePair _ElementValuePair)
            :base(leftIToken, rightIToken)

        {
            this._ElementValuePairs = _ElementValuePairs;
            ((Ast) _ElementValuePairs).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ElementValuePair = _ElementValuePair;
            ((Ast) _ElementValuePair).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ElementValuePairs != null)  list.Add(_ElementValuePairs);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_ElementValuePair != null)  list.Add(_ElementValuePair);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ElementValuePairs)) return false;
            if (! base.Equals(o)) return false;
            ElementValuePairs other = (ElementValuePairs) o;
            if (! _ElementValuePairs.Equals(other._ElementValuePairs)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _ElementValuePair.Equals(other._ElementValuePair)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ElementValuePairs.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_ElementValuePair.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 237:  ElementValuePair ::= SimpleName = ElementValue
     *</b>
     */
    public class ElementValuePair : Ast , IElementValuePair
    {
        private identifier _SimpleName;
        private AstToken _EQUAL;
        private IElementValue _ElementValue;

        public identifier getSimpleName() { return _SimpleName; }
        public void setSimpleName(identifier _SimpleName) { this._SimpleName = _SimpleName; }
        public AstToken getEQUAL() { return _EQUAL; }
        public void setEQUAL(AstToken _EQUAL) { this._EQUAL = _EQUAL; }
        public IElementValue getElementValue() { return _ElementValue; }
        public void setElementValue(IElementValue _ElementValue) { this._ElementValue = _ElementValue; }

        public ElementValuePair(IToken leftIToken, IToken rightIToken,
                                identifier _SimpleName,
                                AstToken _EQUAL,
                                IElementValue _ElementValue)
            :base(leftIToken, rightIToken)

        {
            this._SimpleName = _SimpleName;
            ((Ast) _SimpleName).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_SimpleName != null)  list.Add(_SimpleName);
            if(_EQUAL != null)  list.Add(_EQUAL);
            if(_ElementValue != null)  list.Add(_ElementValue);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ElementValuePair)) return false;
            if (! base.Equals(o)) return false;
            ElementValuePair other = (ElementValuePair) o;
            if (! _SimpleName.Equals(other._SimpleName)) return false;
            if (! _EQUAL.Equals(other._EQUAL)) return false;
            if (! _ElementValue.Equals(other._ElementValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_SimpleName.GetHashCode());
            hash = hash * 31 + (_EQUAL.GetHashCode());
            hash = hash * 31 + (_ElementValue.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
     *</b>
     */
    public class ElementValueArrayInitializer : Ast , IElementValueArrayInitializer
    {
        private AstToken _LBRACE;
        private IElementValuesopt _ElementValuesopt;
        private Commaopt _Commaopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getElementValuesopt</b> may be <b>null</b>
         */
        public IElementValuesopt getElementValuesopt() { return _ElementValuesopt; }
        public void setElementValuesopt(IElementValuesopt _ElementValuesopt) { this._ElementValuesopt = _ElementValuesopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        public void setCommaopt(Commaopt _Commaopt) { this._Commaopt = _Commaopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public ElementValueArrayInitializer(IToken leftIToken, IToken rightIToken,
                                            AstToken _LBRACE,
                                            IElementValuesopt _ElementValuesopt,
                                            Commaopt _Commaopt,
                                            AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._ElementValuesopt = _ElementValuesopt;
            if (_ElementValuesopt != null) ((Ast) _ElementValuesopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_ElementValuesopt != null)  list.Add(_ElementValuesopt);
            if(_Commaopt != null)  list.Add(_Commaopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ElementValueArrayInitializer)) return false;
            if (! base.Equals(o)) return false;
            ElementValueArrayInitializer other = (ElementValueArrayInitializer) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_ElementValuesopt == null)
                if (other._ElementValuesopt != null) return false;
                else{}// continue
            else if (! _ElementValuesopt.Equals(other._ElementValuesopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else{}// continue
            else if (! _Commaopt.Equals(other._Commaopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_ElementValuesopt == null ? 0 : _ElementValuesopt.GetHashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 243:  ElementValues ::= ElementValue
     *</em>
     *<p>
     *<b>
    *<li>Rule 244:  ElementValues ::= ElementValues , ElementValue
     *</b>
     */
    public class ElementValues : Ast , IElementValues
    {
        private IElementValues _ElementValues;
        private AstToken _COMMA;
        private IElementValue _ElementValue;

        public IElementValues getElementValues() { return _ElementValues; }
        public void setElementValues(IElementValues _ElementValues) { this._ElementValues = _ElementValues; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IElementValue getElementValue() { return _ElementValue; }
        public void setElementValue(IElementValue _ElementValue) { this._ElementValue = _ElementValue; }

        public ElementValues(IToken leftIToken, IToken rightIToken,
                             IElementValues _ElementValues,
                             AstToken _COMMA,
                             IElementValue _ElementValue)
            :base(leftIToken, rightIToken)

        {
            this._ElementValues = _ElementValues;
            ((Ast) _ElementValues).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ElementValues != null)  list.Add(_ElementValues);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_ElementValue != null)  list.Add(_ElementValue);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ElementValues)) return false;
            if (! base.Equals(o)) return false;
            ElementValues other = (ElementValues) o;
            if (! _ElementValues.Equals(other._ElementValues)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _ElementValue.Equals(other._ElementValue)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ElementValues.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_ElementValue.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 245:  MarkerAnnotation ::= @ TypeName
     *</b>
     */
    public class MarkerAnnotation : Ast , IMarkerAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;

        public AstToken getAT() { return _AT; }
        public void setAT(AstToken _AT) { this._AT = _AT; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }

        public MarkerAnnotation(IToken leftIToken, IToken rightIToken,
                                AstToken _AT,
                                ITypeName _TypeName)
            :base(leftIToken, rightIToken)

        {
            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AT != null)  list.Add(_AT);
            if(_TypeName != null)  list.Add(_TypeName);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MarkerAnnotation)) return false;
            if (! base.Equals(o)) return false;
            MarkerAnnotation other = (MarkerAnnotation) o;
            if (! _AT.Equals(other._AT)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AT.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
     *</b>
     */
    public class SingleElementAnnotation : Ast , ISingleElementAnnotation
    {
        private AstToken _AT;
        private ITypeName _TypeName;
        private AstToken _LPAREN;
        private IElementValue _ElementValue;
        private AstToken _RPAREN;

        public AstToken getAT() { return _AT; }
        public void setAT(AstToken _AT) { this._AT = _AT; }
        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IElementValue getElementValue() { return _ElementValue; }
        public void setElementValue(IElementValue _ElementValue) { this._ElementValue = _ElementValue; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public SingleElementAnnotation(IToken leftIToken, IToken rightIToken,
                                       AstToken _AT,
                                       ITypeName _TypeName,
                                       AstToken _LPAREN,
                                       IElementValue _ElementValue,
                                       AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._AT = _AT;
            ((Ast) _AT).setParent(this);
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ElementValue = _ElementValue;
            ((Ast) _ElementValue).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AT != null)  list.Add(_AT);
            if(_TypeName != null)  list.Add(_TypeName);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ElementValue != null)  list.Add(_ElementValue);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SingleElementAnnotation)) return false;
            if (! base.Equals(o)) return false;
            SingleElementAnnotation other = (SingleElementAnnotation) o;
            if (! _AT.Equals(other._AT)) return false;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _ElementValue.Equals(other._ElementValue)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AT.GetHashCode());
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ElementValue.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
     *</b>
     */
    public class ArrayInitializer : Ast , IArrayInitializer
    {
        private AstToken _LBRACE;
        private IVariableInitializersopt _VariableInitializersopt;
        private Commaopt _Commaopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getVariableInitializersopt</b> may be <b>null</b>
         */
        public IVariableInitializersopt getVariableInitializersopt() { return _VariableInitializersopt; }
        public void setVariableInitializersopt(IVariableInitializersopt _VariableInitializersopt) { this._VariableInitializersopt = _VariableInitializersopt; }
        /**
         * The value returned by <b>getCommaopt</b> may be <b>null</b>
         */
        public Commaopt getCommaopt() { return _Commaopt; }
        public void setCommaopt(Commaopt _Commaopt) { this._Commaopt = _Commaopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public ArrayInitializer(IToken leftIToken, IToken rightIToken,
                                AstToken _LBRACE,
                                IVariableInitializersopt _VariableInitializersopt,
                                Commaopt _Commaopt,
                                AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._VariableInitializersopt = _VariableInitializersopt;
            if (_VariableInitializersopt != null) ((Ast) _VariableInitializersopt).setParent(this);
            this._Commaopt = _Commaopt;
            if (_Commaopt != null) ((Ast) _Commaopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_VariableInitializersopt != null)  list.Add(_VariableInitializersopt);
            if(_Commaopt != null)  list.Add(_Commaopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayInitializer)) return false;
            if (! base.Equals(o)) return false;
            ArrayInitializer other = (ArrayInitializer) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_VariableInitializersopt == null)
                if (other._VariableInitializersopt != null) return false;
                else{}// continue
            else if (! _VariableInitializersopt.Equals(other._VariableInitializersopt)) return false;
            if (_Commaopt == null)
                if (other._Commaopt != null) return false;
                else{}// continue
            else if (! _Commaopt.Equals(other._Commaopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_VariableInitializersopt == null ? 0 : _VariableInitializersopt.GetHashCode());
            hash = hash * 31 + (_Commaopt == null ? 0 : _Commaopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 248:  VariableInitializers ::= VariableInitializer
     *</em>
     *<p>
     *<b>
    *<li>Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
     *</b>
     */
    public class VariableInitializers : Ast , IVariableInitializers
    {
        private IVariableInitializers _VariableInitializers;
        private AstToken _COMMA;
        private IVariableInitializer _VariableInitializer;

        public IVariableInitializers getVariableInitializers() { return _VariableInitializers; }
        public void setVariableInitializers(IVariableInitializers _VariableInitializers) { this._VariableInitializers = _VariableInitializers; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IVariableInitializer getVariableInitializer() { return _VariableInitializer; }
        public void setVariableInitializer(IVariableInitializer _VariableInitializer) { this._VariableInitializer = _VariableInitializer; }

        public VariableInitializers(IToken leftIToken, IToken rightIToken,
                                    IVariableInitializers _VariableInitializers,
                                    AstToken _COMMA,
                                    IVariableInitializer _VariableInitializer)
            :base(leftIToken, rightIToken)

        {
            this._VariableInitializers = _VariableInitializers;
            ((Ast) _VariableInitializers).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._VariableInitializer = _VariableInitializer;
            ((Ast) _VariableInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableInitializers != null)  list.Add(_VariableInitializers);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_VariableInitializer != null)  list.Add(_VariableInitializer);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is VariableInitializers)) return false;
            if (! base.Equals(o)) return false;
            VariableInitializers other = (VariableInitializers) o;
            if (! _VariableInitializers.Equals(other._VariableInitializers)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _VariableInitializer.Equals(other._VariableInitializer)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableInitializers.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_VariableInitializer.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 250:  Block ::= { BlockStatementsopt }
     *</b>
     */
    public class Block : Ast , IBlock
    {
        private AstToken _LBRACE;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public void setBlockStatementsopt(IBlockStatementsopt _BlockStatementsopt) { this._BlockStatementsopt = _BlockStatementsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public Block(IToken leftIToken, IToken rightIToken,
                     AstToken _LBRACE,
                     IBlockStatementsopt _BlockStatementsopt,
                     AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_BlockStatementsopt != null)  list.Add(_BlockStatementsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Block)) return false;
            if (! base.Equals(o)) return false;
            Block other = (Block) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else{}// continue
            else if (! _BlockStatementsopt.Equals(other._BlockStatementsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 251:  BlockStatements ::= BlockStatement
     *</em>
     *<p>
     *<b>
    *<li>Rule 252:  BlockStatements ::= BlockStatements BlockStatement
     *</b>
     */
    public class BlockStatements : Ast , IBlockStatements
    {
        private IBlockStatements _BlockStatements;
        private IBlockStatement _BlockStatement;

        public IBlockStatements getBlockStatements() { return _BlockStatements; }
        public void setBlockStatements(IBlockStatements _BlockStatements) { this._BlockStatements = _BlockStatements; }
        public IBlockStatement getBlockStatement() { return _BlockStatement; }
        public void setBlockStatement(IBlockStatement _BlockStatement) { this._BlockStatement = _BlockStatement; }

        public BlockStatements(IToken leftIToken, IToken rightIToken,
                               IBlockStatements _BlockStatements,
                               IBlockStatement _BlockStatement)
            :base(leftIToken, rightIToken)

        {
            this._BlockStatements = _BlockStatements;
            ((Ast) _BlockStatements).setParent(this);
            this._BlockStatement = _BlockStatement;
            ((Ast) _BlockStatement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_BlockStatements != null)  list.Add(_BlockStatements);
            if(_BlockStatement != null)  list.Add(_BlockStatement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is BlockStatements)) return false;
            if (! base.Equals(o)) return false;
            BlockStatements other = (BlockStatements) o;
            if (! _BlockStatements.Equals(other._BlockStatements)) return false;
            if (! _BlockStatement.Equals(other._BlockStatement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_BlockStatements.GetHashCode());
            hash = hash * 31 + (_BlockStatement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
     *</b>
     */
    public class LocalVariableDeclarationStatement : Ast , ILocalVariableDeclarationStatement
    {
        private LocalVariableDeclaration _LocalVariableDeclaration;
        private AstToken _SEMICOLON;

        public LocalVariableDeclaration getLocalVariableDeclaration() { return _LocalVariableDeclaration; }
        public void setLocalVariableDeclaration(LocalVariableDeclaration _LocalVariableDeclaration) { this._LocalVariableDeclaration = _LocalVariableDeclaration; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public LocalVariableDeclarationStatement(IToken leftIToken, IToken rightIToken,
                                                 LocalVariableDeclaration _LocalVariableDeclaration,
                                                 AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._LocalVariableDeclaration = _LocalVariableDeclaration;
            ((Ast) _LocalVariableDeclaration).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LocalVariableDeclaration != null)  list.Add(_LocalVariableDeclaration);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LocalVariableDeclarationStatement)) return false;
            if (! base.Equals(o)) return false;
            LocalVariableDeclarationStatement other = (LocalVariableDeclarationStatement) o;
            if (! _LocalVariableDeclaration.Equals(other._LocalVariableDeclaration)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LocalVariableDeclaration.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
     *</b>
     */
    public class LocalVariableDeclaration : Ast , ILocalVariableDeclaration
    {
        private IVariableModifiersopt _VariableModifiersopt;
        private IType _Type;
        private IVariableDeclarators _VariableDeclarators;

        /**
         * The value returned by <b>getVariableModifiersopt</b> may be <b>null</b>
         */
        public IVariableModifiersopt getVariableModifiersopt() { return _VariableModifiersopt; }
        public void setVariableModifiersopt(IVariableModifiersopt _VariableModifiersopt) { this._VariableModifiersopt = _VariableModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public IVariableDeclarators getVariableDeclarators() { return _VariableDeclarators; }
        public void setVariableDeclarators(IVariableDeclarators _VariableDeclarators) { this._VariableDeclarators = _VariableDeclarators; }

        public LocalVariableDeclaration(IToken leftIToken, IToken rightIToken,
                                        IVariableModifiersopt _VariableModifiersopt,
                                        IType _Type,
                                        IVariableDeclarators _VariableDeclarators)
            :base(leftIToken, rightIToken)

        {
            this._VariableModifiersopt = _VariableModifiersopt;
            if (_VariableModifiersopt != null) ((Ast) _VariableModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._VariableDeclarators = _VariableDeclarators;
            ((Ast) _VariableDeclarators).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_VariableModifiersopt != null)  list.Add(_VariableModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_VariableDeclarators != null)  list.Add(_VariableDeclarators);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LocalVariableDeclaration)) return false;
            if (! base.Equals(o)) return false;
            LocalVariableDeclaration other = (LocalVariableDeclaration) o;
            if (_VariableModifiersopt == null)
                if (other._VariableModifiersopt != null) return false;
                else{}// continue
            else if (! _VariableModifiersopt.Equals(other._VariableModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (! _VariableDeclarators.Equals(other._VariableDeclarators)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_VariableModifiersopt == null ? 0 : _VariableModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_VariableDeclarators.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 281:  IfThenStatement ::= if ( Expression ) Statement
     *</b>
     */
    public class IfThenStatement : Ast , IIfThenStatement
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getif() { return _if; }
        public void setif(AstToken _if) { this._if = _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public IfThenStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _if,
                               AstToken _LPAREN,
                               IExpression _Expression,
                               AstToken _RPAREN,
                               IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_if != null)  list.Add(_if);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is IfThenStatement)) return false;
            if (! base.Equals(o)) return false;
            IfThenStatement other = (IfThenStatement) o;
            if (! _if.Equals(other._if)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_if.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
     *</b>
     */
    public class IfThenElseStatement : Ast , IIfThenElseStatement
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;
        private AstToken _else;
        private IStatement _Statement;

        public AstToken getif() { return _if; }
        public void setif(AstToken _if) { this._if = _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public void setStatementNoShortIf(IStatementNoShortIf _StatementNoShortIf) { this._StatementNoShortIf = _StatementNoShortIf; }
        public AstToken getelse() { return _else; }
        public void setelse(AstToken _else) { this._else = _else; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public IfThenElseStatement(IToken leftIToken, IToken rightIToken,
                                   AstToken _if,
                                   AstToken _LPAREN,
                                   IExpression _Expression,
                                   AstToken _RPAREN,
                                   IStatementNoShortIf _StatementNoShortIf,
                                   AstToken _else,
                                   IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            this._else = _else;
            ((Ast) _else).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_if != null)  list.Add(_if);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_StatementNoShortIf != null)  list.Add(_StatementNoShortIf);
            if(_else != null)  list.Add(_else);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is IfThenElseStatement)) return false;
            if (! base.Equals(o)) return false;
            IfThenElseStatement other = (IfThenElseStatement) o;
            if (! _if.Equals(other._if)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.Equals(other._StatementNoShortIf)) return false;
            if (! _else.Equals(other._else)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_if.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf.GetHashCode());
            hash = hash * 31 + (_else.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
     *</b>
     */
    public class IfThenElseStatementNoShortIf : Ast , IIfThenElseStatementNoShortIf
    {
        private AstToken _if;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;
        private AstToken _else;
        private IStatementNoShortIf _StatementNoShortIf7;

        public AstToken getif() { return _if; }
        public void setif(AstToken _if) { this._if = _if; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public void setStatementNoShortIf(IStatementNoShortIf _StatementNoShortIf) { this._StatementNoShortIf = _StatementNoShortIf; }
        public AstToken getelse() { return _else; }
        public void setelse(AstToken _else) { this._else = _else; }
        public IStatementNoShortIf getStatementNoShortIf7() { return _StatementNoShortIf7; }
        public void setStatementNoShortIf7(IStatementNoShortIf _StatementNoShortIf7) { this._StatementNoShortIf7 = _StatementNoShortIf7; }

        public IfThenElseStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                            AstToken _if,
                                            AstToken _LPAREN,
                                            IExpression _Expression,
                                            AstToken _RPAREN,
                                            IStatementNoShortIf _StatementNoShortIf,
                                            AstToken _else,
                                            IStatementNoShortIf _StatementNoShortIf7)
            :base(leftIToken, rightIToken)

        {
            this._if = _if;
            ((Ast) _if).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            this._else = _else;
            ((Ast) _else).setParent(this);
            this._StatementNoShortIf7 = _StatementNoShortIf7;
            ((Ast) _StatementNoShortIf7).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_if != null)  list.Add(_if);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_StatementNoShortIf != null)  list.Add(_StatementNoShortIf);
            if(_else != null)  list.Add(_else);
            if(_StatementNoShortIf7 != null)  list.Add(_StatementNoShortIf7);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is IfThenElseStatementNoShortIf)) return false;
            if (! base.Equals(o)) return false;
            IfThenElseStatementNoShortIf other = (IfThenElseStatementNoShortIf) o;
            if (! _if.Equals(other._if)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.Equals(other._StatementNoShortIf)) return false;
            if (! _else.Equals(other._else)) return false;
            if (! _StatementNoShortIf7.Equals(other._StatementNoShortIf7)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_if.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf.GetHashCode());
            hash = hash * 31 + (_else.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf7.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 284:  EmptyStatement ::= ;
     *</b>
     */
    public class EmptyStatement : AstToken , IEmptyStatement
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public EmptyStatement(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 285:  LabeledStatement ::= identifier : Statement
     *</b>
     */
    public class LabeledStatement : Ast , ILabeledStatement
    {
        private identifier _identifier;
        private AstToken _COLON;
        private IStatement _Statement;

        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public LabeledStatement(IToken leftIToken, IToken rightIToken,
                                identifier _identifier,
                                AstToken _COLON,
                                IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_identifier != null)  list.Add(_identifier);
            if(_COLON != null)  list.Add(_COLON);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LabeledStatement)) return false;
            if (! base.Equals(o)) return false;
            LabeledStatement other = (LabeledStatement) o;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
     *</b>
     */
    public class LabeledStatementNoShortIf : Ast , ILabeledStatementNoShortIf
    {
        private identifier _identifier;
        private AstToken _COLON;
        private IStatementNoShortIf _StatementNoShortIf;

        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public void setStatementNoShortIf(IStatementNoShortIf _StatementNoShortIf) { this._StatementNoShortIf = _StatementNoShortIf; }

        public LabeledStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                         identifier _identifier,
                                         AstToken _COLON,
                                         IStatementNoShortIf _StatementNoShortIf)
            :base(leftIToken, rightIToken)

        {
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_identifier != null)  list.Add(_identifier);
            if(_COLON != null)  list.Add(_COLON);
            if(_StatementNoShortIf != null)  list.Add(_StatementNoShortIf);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LabeledStatementNoShortIf)) return false;
            if (! base.Equals(o)) return false;
            LabeledStatementNoShortIf other = (LabeledStatementNoShortIf) o;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            if (! _StatementNoShortIf.Equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 287:  ExpressionStatement ::= StatementExpression ;
     *</b>
     */
    public class ExpressionStatement : Ast , IExpressionStatement
    {
        private IStatementExpression _StatementExpression;
        private AstToken _SEMICOLON;

        public IStatementExpression getStatementExpression() { return _StatementExpression; }
        public void setStatementExpression(IStatementExpression _StatementExpression) { this._StatementExpression = _StatementExpression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ExpressionStatement(IToken leftIToken, IToken rightIToken,
                                   IStatementExpression _StatementExpression,
                                   AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._StatementExpression = _StatementExpression;
            ((Ast) _StatementExpression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_StatementExpression != null)  list.Add(_StatementExpression);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExpressionStatement)) return false;
            if (! base.Equals(o)) return false;
            ExpressionStatement other = (ExpressionStatement) o;
            if (! _StatementExpression.Equals(other._StatementExpression)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_StatementExpression.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
     *</b>
     */
    public class SwitchStatement : Ast , ISwitchStatement
    {
        private AstToken _switch;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private SwitchBlock _SwitchBlock;

        public AstToken getswitch() { return _switch; }
        public void setswitch(AstToken _switch) { this._switch = _switch; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public SwitchBlock getSwitchBlock() { return _SwitchBlock; }
        public void setSwitchBlock(SwitchBlock _SwitchBlock) { this._SwitchBlock = _SwitchBlock; }

        public SwitchStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _switch,
                               AstToken _LPAREN,
                               IExpression _Expression,
                               AstToken _RPAREN,
                               SwitchBlock _SwitchBlock)
            :base(leftIToken, rightIToken)

        {
            this._switch = _switch;
            ((Ast) _switch).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SwitchBlock = _SwitchBlock;
            ((Ast) _SwitchBlock).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_switch != null)  list.Add(_switch);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_SwitchBlock != null)  list.Add(_SwitchBlock);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchStatement)) return false;
            if (! base.Equals(o)) return false;
            SwitchStatement other = (SwitchStatement) o;
            if (! _switch.Equals(other._switch)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _SwitchBlock.Equals(other._SwitchBlock)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_switch.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_SwitchBlock.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
     *</b>
     */
    public class SwitchBlock : Ast , ISwitchBlock
    {
        private AstToken _LBRACE;
        private ISwitchBlockStatementGroupsopt _SwitchBlockStatementGroupsopt;
        private ISwitchLabelsopt _SwitchLabelsopt;
        private AstToken _RBRACE;

        public AstToken getLBRACE() { return _LBRACE; }
        public void setLBRACE(AstToken _LBRACE) { this._LBRACE = _LBRACE; }
        /**
         * The value returned by <b>getSwitchBlockStatementGroupsopt</b> may be <b>null</b>
         */
        public ISwitchBlockStatementGroupsopt getSwitchBlockStatementGroupsopt() { return _SwitchBlockStatementGroupsopt; }
        public void setSwitchBlockStatementGroupsopt(ISwitchBlockStatementGroupsopt _SwitchBlockStatementGroupsopt) { this._SwitchBlockStatementGroupsopt = _SwitchBlockStatementGroupsopt; }
        /**
         * The value returned by <b>getSwitchLabelsopt</b> may be <b>null</b>
         */
        public ISwitchLabelsopt getSwitchLabelsopt() { return _SwitchLabelsopt; }
        public void setSwitchLabelsopt(ISwitchLabelsopt _SwitchLabelsopt) { this._SwitchLabelsopt = _SwitchLabelsopt; }
        public AstToken getRBRACE() { return _RBRACE; }
        public void setRBRACE(AstToken _RBRACE) { this._RBRACE = _RBRACE; }

        public SwitchBlock(IToken leftIToken, IToken rightIToken,
                           AstToken _LBRACE,
                           ISwitchBlockStatementGroupsopt _SwitchBlockStatementGroupsopt,
                           ISwitchLabelsopt _SwitchLabelsopt,
                           AstToken _RBRACE)
            :base(leftIToken, rightIToken)

        {
            this._LBRACE = _LBRACE;
            ((Ast) _LBRACE).setParent(this);
            this._SwitchBlockStatementGroupsopt = _SwitchBlockStatementGroupsopt;
            if (_SwitchBlockStatementGroupsopt != null) ((Ast) _SwitchBlockStatementGroupsopt).setParent(this);
            this._SwitchLabelsopt = _SwitchLabelsopt;
            if (_SwitchLabelsopt != null) ((Ast) _SwitchLabelsopt).setParent(this);
            this._RBRACE = _RBRACE;
            ((Ast) _RBRACE).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACE != null)  list.Add(_LBRACE);
            if(_SwitchBlockStatementGroupsopt != null)  list.Add(_SwitchBlockStatementGroupsopt);
            if(_SwitchLabelsopt != null)  list.Add(_SwitchLabelsopt);
            if(_RBRACE != null)  list.Add(_RBRACE);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchBlock)) return false;
            if (! base.Equals(o)) return false;
            SwitchBlock other = (SwitchBlock) o;
            if (! _LBRACE.Equals(other._LBRACE)) return false;
            if (_SwitchBlockStatementGroupsopt == null)
                if (other._SwitchBlockStatementGroupsopt != null) return false;
                else{}// continue
            else if (! _SwitchBlockStatementGroupsopt.Equals(other._SwitchBlockStatementGroupsopt)) return false;
            if (_SwitchLabelsopt == null)
                if (other._SwitchLabelsopt != null) return false;
                else{}// continue
            else if (! _SwitchLabelsopt.Equals(other._SwitchLabelsopt)) return false;
            if (! _RBRACE.Equals(other._RBRACE)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACE.GetHashCode());
            hash = hash * 31 + (_SwitchBlockStatementGroupsopt == null ? 0 : _SwitchBlockStatementGroupsopt.GetHashCode());
            hash = hash * 31 + (_SwitchLabelsopt == null ? 0 : _SwitchLabelsopt.GetHashCode());
            hash = hash * 31 + (_RBRACE.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
     *</em>
     *<p>
     *<b>
    *<li>Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
     *</b>
     */
    public class SwitchBlockStatementGroups : Ast , ISwitchBlockStatementGroups
    {
        private ISwitchBlockStatementGroups _SwitchBlockStatementGroups;
        private SwitchBlockStatementGroup _SwitchBlockStatementGroup;

        public ISwitchBlockStatementGroups getSwitchBlockStatementGroups() { return _SwitchBlockStatementGroups; }
        public void setSwitchBlockStatementGroups(ISwitchBlockStatementGroups _SwitchBlockStatementGroups) { this._SwitchBlockStatementGroups = _SwitchBlockStatementGroups; }
        public SwitchBlockStatementGroup getSwitchBlockStatementGroup() { return _SwitchBlockStatementGroup; }
        public void setSwitchBlockStatementGroup(SwitchBlockStatementGroup _SwitchBlockStatementGroup) { this._SwitchBlockStatementGroup = _SwitchBlockStatementGroup; }

        public SwitchBlockStatementGroups(IToken leftIToken, IToken rightIToken,
                                          ISwitchBlockStatementGroups _SwitchBlockStatementGroups,
                                          SwitchBlockStatementGroup _SwitchBlockStatementGroup)
            :base(leftIToken, rightIToken)

        {
            this._SwitchBlockStatementGroups = _SwitchBlockStatementGroups;
            ((Ast) _SwitchBlockStatementGroups).setParent(this);
            this._SwitchBlockStatementGroup = _SwitchBlockStatementGroup;
            ((Ast) _SwitchBlockStatementGroup).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_SwitchBlockStatementGroups != null)  list.Add(_SwitchBlockStatementGroups);
            if(_SwitchBlockStatementGroup != null)  list.Add(_SwitchBlockStatementGroup);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchBlockStatementGroups)) return false;
            if (! base.Equals(o)) return false;
            SwitchBlockStatementGroups other = (SwitchBlockStatementGroups) o;
            if (! _SwitchBlockStatementGroups.Equals(other._SwitchBlockStatementGroups)) return false;
            if (! _SwitchBlockStatementGroup.Equals(other._SwitchBlockStatementGroup)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_SwitchBlockStatementGroups.GetHashCode());
            hash = hash * 31 + (_SwitchBlockStatementGroup.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
     *</b>
     */
    public class SwitchBlockStatementGroup : Ast , ISwitchBlockStatementGroup
    {
        private ISwitchLabels _SwitchLabels;
        private IBlockStatements _BlockStatements;

        public ISwitchLabels getSwitchLabels() { return _SwitchLabels; }
        public void setSwitchLabels(ISwitchLabels _SwitchLabels) { this._SwitchLabels = _SwitchLabels; }
        public IBlockStatements getBlockStatements() { return _BlockStatements; }
        public void setBlockStatements(IBlockStatements _BlockStatements) { this._BlockStatements = _BlockStatements; }

        public SwitchBlockStatementGroup(IToken leftIToken, IToken rightIToken,
                                         ISwitchLabels _SwitchLabels,
                                         IBlockStatements _BlockStatements)
            :base(leftIToken, rightIToken)

        {
            this._SwitchLabels = _SwitchLabels;
            ((Ast) _SwitchLabels).setParent(this);
            this._BlockStatements = _BlockStatements;
            ((Ast) _BlockStatements).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_SwitchLabels != null)  list.Add(_SwitchLabels);
            if(_BlockStatements != null)  list.Add(_BlockStatements);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchBlockStatementGroup)) return false;
            if (! base.Equals(o)) return false;
            SwitchBlockStatementGroup other = (SwitchBlockStatementGroup) o;
            if (! _SwitchLabels.Equals(other._SwitchLabels)) return false;
            if (! _BlockStatements.Equals(other._BlockStatements)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_SwitchLabels.GetHashCode());
            hash = hash * 31 + (_BlockStatements.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 302:  SwitchLabels ::= SwitchLabel
     *</em>
     *<p>
     *<b>
    *<li>Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
     *</b>
     */
    public class SwitchLabels : Ast , ISwitchLabels
    {
        private ISwitchLabels _SwitchLabels;
        private ISwitchLabel _SwitchLabel;

        public ISwitchLabels getSwitchLabels() { return _SwitchLabels; }
        public void setSwitchLabels(ISwitchLabels _SwitchLabels) { this._SwitchLabels = _SwitchLabels; }
        public ISwitchLabel getSwitchLabel() { return _SwitchLabel; }
        public void setSwitchLabel(ISwitchLabel _SwitchLabel) { this._SwitchLabel = _SwitchLabel; }

        public SwitchLabels(IToken leftIToken, IToken rightIToken,
                            ISwitchLabels _SwitchLabels,
                            ISwitchLabel _SwitchLabel)
            :base(leftIToken, rightIToken)

        {
            this._SwitchLabels = _SwitchLabels;
            ((Ast) _SwitchLabels).setParent(this);
            this._SwitchLabel = _SwitchLabel;
            ((Ast) _SwitchLabel).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_SwitchLabels != null)  list.Add(_SwitchLabels);
            if(_SwitchLabel != null)  list.Add(_SwitchLabel);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchLabels)) return false;
            if (! base.Equals(o)) return false;
            SwitchLabels other = (SwitchLabels) o;
            if (! _SwitchLabels.Equals(other._SwitchLabels)) return false;
            if (! _SwitchLabel.Equals(other._SwitchLabel)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_SwitchLabels.GetHashCode());
            hash = hash * 31 + (_SwitchLabel.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 308:  WhileStatement ::= while ( Expression ) Statement
     *</b>
     */
    public class WhileStatement : Ast , IWhileStatement
    {
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getwhile() { return _while; }
        public void setwhile(AstToken _while) { this._while = _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public WhileStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _while,
                              AstToken _LPAREN,
                              IExpression _Expression,
                              AstToken _RPAREN,
                              IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_while != null)  list.Add(_while);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is WhileStatement)) return false;
            if (! base.Equals(o)) return false;
            WhileStatement other = (WhileStatement) o;
            if (! _while.Equals(other._while)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_while.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
     *</b>
     */
    public class WhileStatementNoShortIf : Ast , IWhileStatementNoShortIf
    {
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;

        public AstToken getwhile() { return _while; }
        public void setwhile(AstToken _while) { this._while = _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public void setStatementNoShortIf(IStatementNoShortIf _StatementNoShortIf) { this._StatementNoShortIf = _StatementNoShortIf; }

        public WhileStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                       AstToken _while,
                                       AstToken _LPAREN,
                                       IExpression _Expression,
                                       AstToken _RPAREN,
                                       IStatementNoShortIf _StatementNoShortIf)
            :base(leftIToken, rightIToken)

        {
            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_while != null)  list.Add(_while);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_StatementNoShortIf != null)  list.Add(_StatementNoShortIf);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is WhileStatementNoShortIf)) return false;
            if (! base.Equals(o)) return false;
            WhileStatementNoShortIf other = (WhileStatementNoShortIf) o;
            if (! _while.Equals(other._while)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.Equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_while.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
     *</b>
     */
    public class DoStatement : Ast , IDoStatement
    {
        private AstToken _do;
        private IStatement _Statement;
        private AstToken _while;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        public AstToken getdo() { return _do; }
        public void setdo(AstToken _do) { this._do = _do; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }
        public AstToken getwhile() { return _while; }
        public void setwhile(AstToken _while) { this._while = _while; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public DoStatement(IToken leftIToken, IToken rightIToken,
                           AstToken _do,
                           IStatement _Statement,
                           AstToken _while,
                           AstToken _LPAREN,
                           IExpression _Expression,
                           AstToken _RPAREN,
                           AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._do = _do;
            ((Ast) _do).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            this._while = _while;
            ((Ast) _while).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_do != null)  list.Add(_do);
            if(_Statement != null)  list.Add(_Statement);
            if(_while != null)  list.Add(_while);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is DoStatement)) return false;
            if (! base.Equals(o)) return false;
            DoStatement other = (DoStatement) o;
            if (! _do.Equals(other._do)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            if (! _while.Equals(other._while)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_do.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            hash = hash * 31 + (_while.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
     *</b>
     */
    public class BasicForStatement : Ast , IBasicForStatement
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private IForInitopt _ForInitopt;
        private AstToken _SEMICOLON;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON6;
        private IForUpdateopt _ForUpdateopt;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getfor() { return _for; }
        public void setfor(AstToken _for) { this._for = _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public IForInitopt getForInitopt() { return _ForInitopt; }
        public void setForInitopt(IForInitopt _ForInitopt) { this._ForInitopt = _ForInitopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public void setExpressionopt(IExpressionopt _Expressionopt) { this._Expressionopt = _Expressionopt; }
        public AstToken getSEMICOLON6() { return _SEMICOLON6; }
        public void setSEMICOLON6(AstToken _SEMICOLON6) { this._SEMICOLON6 = _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public IForUpdateopt getForUpdateopt() { return _ForUpdateopt; }
        public void setForUpdateopt(IForUpdateopt _ForUpdateopt) { this._ForUpdateopt = _ForUpdateopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public BasicForStatement(IToken leftIToken, IToken rightIToken,
                                 AstToken _for,
                                 AstToken _LPAREN,
                                 IForInitopt _ForInitopt,
                                 AstToken _SEMICOLON,
                                 IExpressionopt _Expressionopt,
                                 AstToken _SEMICOLON6,
                                 IForUpdateopt _ForUpdateopt,
                                 AstToken _RPAREN,
                                 IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt != null) ((Ast) _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            ((Ast) _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt != null) ((Ast) _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_for != null)  list.Add(_for);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ForInitopt != null)  list.Add(_ForInitopt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            if(_Expressionopt != null)  list.Add(_Expressionopt);
            if(_SEMICOLON6 != null)  list.Add(_SEMICOLON6);
            if(_ForUpdateopt != null)  list.Add(_ForUpdateopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is BasicForStatement)) return false;
            if (! base.Equals(o)) return false;
            BasicForStatement other = (BasicForStatement) o;
            if (! _for.Equals(other._for)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ForInitopt == null)
                if (other._ForInitopt != null) return false;
                else{}// continue
            else if (! _ForInitopt.Equals(other._ForInitopt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else{}// continue
            else if (! _Expressionopt.Equals(other._Expressionopt)) return false;
            if (! _SEMICOLON6.Equals(other._SEMICOLON6)) return false;
            if (_ForUpdateopt == null)
                if (other._ForUpdateopt != null) return false;
                else{}// continue
            else if (! _ForUpdateopt.Equals(other._ForUpdateopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_for.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ForInitopt == null ? 0 : _ForInitopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON6.GetHashCode());
            hash = hash * 31 + (_ForUpdateopt == null ? 0 : _ForUpdateopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
     *</b>
     */
    public class ForStatementNoShortIf : Ast , IForStatementNoShortIf
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private IForInitopt _ForInitopt;
        private AstToken _SEMICOLON;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON6;
        private IForUpdateopt _ForUpdateopt;
        private AstToken _RPAREN;
        private IStatementNoShortIf _StatementNoShortIf;

        public AstToken getfor() { return _for; }
        public void setfor(AstToken _for) { this._for = _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getForInitopt</b> may be <b>null</b>
         */
        public IForInitopt getForInitopt() { return _ForInitopt; }
        public void setForInitopt(IForInitopt _ForInitopt) { this._ForInitopt = _ForInitopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public void setExpressionopt(IExpressionopt _Expressionopt) { this._Expressionopt = _Expressionopt; }
        public AstToken getSEMICOLON6() { return _SEMICOLON6; }
        public void setSEMICOLON6(AstToken _SEMICOLON6) { this._SEMICOLON6 = _SEMICOLON6; }
        /**
         * The value returned by <b>getForUpdateopt</b> may be <b>null</b>
         */
        public IForUpdateopt getForUpdateopt() { return _ForUpdateopt; }
        public void setForUpdateopt(IForUpdateopt _ForUpdateopt) { this._ForUpdateopt = _ForUpdateopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatementNoShortIf getStatementNoShortIf() { return _StatementNoShortIf; }
        public void setStatementNoShortIf(IStatementNoShortIf _StatementNoShortIf) { this._StatementNoShortIf = _StatementNoShortIf; }

        public ForStatementNoShortIf(IToken leftIToken, IToken rightIToken,
                                     AstToken _for,
                                     AstToken _LPAREN,
                                     IForInitopt _ForInitopt,
                                     AstToken _SEMICOLON,
                                     IExpressionopt _Expressionopt,
                                     AstToken _SEMICOLON6,
                                     IForUpdateopt _ForUpdateopt,
                                     AstToken _RPAREN,
                                     IStatementNoShortIf _StatementNoShortIf)
            :base(leftIToken, rightIToken)

        {
            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ForInitopt = _ForInitopt;
            if (_ForInitopt != null) ((Ast) _ForInitopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON6 = _SEMICOLON6;
            ((Ast) _SEMICOLON6).setParent(this);
            this._ForUpdateopt = _ForUpdateopt;
            if (_ForUpdateopt != null) ((Ast) _ForUpdateopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._StatementNoShortIf = _StatementNoShortIf;
            ((Ast) _StatementNoShortIf).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_for != null)  list.Add(_for);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ForInitopt != null)  list.Add(_ForInitopt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            if(_Expressionopt != null)  list.Add(_Expressionopt);
            if(_SEMICOLON6 != null)  list.Add(_SEMICOLON6);
            if(_ForUpdateopt != null)  list.Add(_ForUpdateopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_StatementNoShortIf != null)  list.Add(_StatementNoShortIf);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ForStatementNoShortIf)) return false;
            if (! base.Equals(o)) return false;
            ForStatementNoShortIf other = (ForStatementNoShortIf) o;
            if (! _for.Equals(other._for)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ForInitopt == null)
                if (other._ForInitopt != null) return false;
                else{}// continue
            else if (! _ForInitopt.Equals(other._ForInitopt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else{}// continue
            else if (! _Expressionopt.Equals(other._Expressionopt)) return false;
            if (! _SEMICOLON6.Equals(other._SEMICOLON6)) return false;
            if (_ForUpdateopt == null)
                if (other._ForUpdateopt != null) return false;
                else{}// continue
            else if (! _ForUpdateopt.Equals(other._ForUpdateopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _StatementNoShortIf.Equals(other._StatementNoShortIf)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_for.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ForInitopt == null ? 0 : _ForInitopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON6.GetHashCode());
            hash = hash * 31 + (_ForUpdateopt == null ? 0 : _ForUpdateopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_StatementNoShortIf.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 318:  StatementExpressionList ::= StatementExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
     *</b>
     */
    public class StatementExpressionList : Ast , IStatementExpressionList
    {
        private IStatementExpressionList _StatementExpressionList;
        private AstToken _COMMA;
        private IStatementExpression _StatementExpression;

        public IStatementExpressionList getStatementExpressionList() { return _StatementExpressionList; }
        public void setStatementExpressionList(IStatementExpressionList _StatementExpressionList) { this._StatementExpressionList = _StatementExpressionList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IStatementExpression getStatementExpression() { return _StatementExpression; }
        public void setStatementExpression(IStatementExpression _StatementExpression) { this._StatementExpression = _StatementExpression; }

        public StatementExpressionList(IToken leftIToken, IToken rightIToken,
                                       IStatementExpressionList _StatementExpressionList,
                                       AstToken _COMMA,
                                       IStatementExpression _StatementExpression)
            :base(leftIToken, rightIToken)

        {
            this._StatementExpressionList = _StatementExpressionList;
            ((Ast) _StatementExpressionList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._StatementExpression = _StatementExpression;
            ((Ast) _StatementExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_StatementExpressionList != null)  list.Add(_StatementExpressionList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_StatementExpression != null)  list.Add(_StatementExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is StatementExpressionList)) return false;
            if (! base.Equals(o)) return false;
            StatementExpressionList other = (StatementExpressionList) o;
            if (! _StatementExpressionList.Equals(other._StatementExpressionList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _StatementExpression.Equals(other._StatementExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_StatementExpressionList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_StatementExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
     *</b>
     */
    public class EnhancedForStatement : Ast , IEnhancedForStatement
    {
        private AstToken _for;
        private AstToken _LPAREN;
        private FormalParameter _FormalParameter;
        private AstToken _COLON;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private IStatement _Statement;

        public AstToken getfor() { return _for; }
        public void setfor(AstToken _for) { this._for = _for; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }
        public void setFormalParameter(FormalParameter _FormalParameter) { this._FormalParameter = _FormalParameter; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IStatement getStatement() { return _Statement; }
        public void setStatement(IStatement _Statement) { this._Statement = _Statement; }

        public EnhancedForStatement(IToken leftIToken, IToken rightIToken,
                                    AstToken _for,
                                    AstToken _LPAREN,
                                    FormalParameter _FormalParameter,
                                    AstToken _COLON,
                                    IExpression _Expression,
                                    AstToken _RPAREN,
                                    IStatement _Statement)
            :base(leftIToken, rightIToken)

        {
            this._for = _for;
            ((Ast) _for).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Statement = _Statement;
            ((Ast) _Statement).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_for != null)  list.Add(_for);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_FormalParameter != null)  list.Add(_FormalParameter);
            if(_COLON != null)  list.Add(_COLON);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Statement != null)  list.Add(_Statement);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EnhancedForStatement)) return false;
            if (! base.Equals(o)) return false;
            EnhancedForStatement other = (EnhancedForStatement) o;
            if (! _for.Equals(other._for)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _FormalParameter.Equals(other._FormalParameter)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Statement.Equals(other._Statement)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_for.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_FormalParameter.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Statement.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 321:  BreakStatement ::= break identifieropt ;
     *</b>
     */
    public class BreakStatement : Ast , IBreakStatement
    {
        private AstToken _break;
        private identifier _identifieropt;
        private AstToken _SEMICOLON;

        public AstToken getbreak() { return _break; }
        public void setbreak(AstToken _break) { this._break = _break; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public identifier getidentifieropt() { return _identifieropt; }
        public void setidentifieropt(identifier _identifieropt) { this._identifieropt = _identifieropt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public BreakStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _break,
                              identifier _identifieropt,
                              AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._break = _break;
            ((Ast) _break).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt != null) ((Ast) _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_break != null)  list.Add(_break);
            if(_identifieropt != null)  list.Add(_identifieropt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is BreakStatement)) return false;
            if (! base.Equals(o)) return false;
            BreakStatement other = (BreakStatement) o;
            if (! _break.Equals(other._break)) return false;
            if (_identifieropt == null)
                if (other._identifieropt != null) return false;
                else{}// continue
            else if (! _identifieropt.Equals(other._identifieropt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_break.GetHashCode());
            hash = hash * 31 + (_identifieropt == null ? 0 : _identifieropt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 322:  ContinueStatement ::= continue identifieropt ;
     *</b>
     */
    public class ContinueStatement : Ast , IContinueStatement
    {
        private AstToken _continue;
        private identifier _identifieropt;
        private AstToken _SEMICOLON;

        public AstToken getcontinue() { return _continue; }
        public void setcontinue(AstToken _continue) { this._continue = _continue; }
        /**
         * The value returned by <b>getidentifieropt</b> may be <b>null</b>
         */
        public identifier getidentifieropt() { return _identifieropt; }
        public void setidentifieropt(identifier _identifieropt) { this._identifieropt = _identifieropt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ContinueStatement(IToken leftIToken, IToken rightIToken,
                                 AstToken _continue,
                                 identifier _identifieropt,
                                 AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._continue = _continue;
            ((Ast) _continue).setParent(this);
            this._identifieropt = _identifieropt;
            if (_identifieropt != null) ((Ast) _identifieropt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_continue != null)  list.Add(_continue);
            if(_identifieropt != null)  list.Add(_identifieropt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ContinueStatement)) return false;
            if (! base.Equals(o)) return false;
            ContinueStatement other = (ContinueStatement) o;
            if (! _continue.Equals(other._continue)) return false;
            if (_identifieropt == null)
                if (other._identifieropt != null) return false;
                else{}// continue
            else if (! _identifieropt.Equals(other._identifieropt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_continue.GetHashCode());
            hash = hash * 31 + (_identifieropt == null ? 0 : _identifieropt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 323:  ReturnStatement ::= return Expressionopt ;
     *</b>
     */
    public class ReturnStatement : Ast , IReturnStatement
    {
        private AstToken _return;
        private IExpressionopt _Expressionopt;
        private AstToken _SEMICOLON;

        public AstToken getreturn() { return _return; }
        public void setreturn(AstToken _return) { this._return = _return; }
        /**
         * The value returned by <b>getExpressionopt</b> may be <b>null</b>
         */
        public IExpressionopt getExpressionopt() { return _Expressionopt; }
        public void setExpressionopt(IExpressionopt _Expressionopt) { this._Expressionopt = _Expressionopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ReturnStatement(IToken leftIToken, IToken rightIToken,
                               AstToken _return,
                               IExpressionopt _Expressionopt,
                               AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._return = _return;
            ((Ast) _return).setParent(this);
            this._Expressionopt = _Expressionopt;
            if (_Expressionopt != null) ((Ast) _Expressionopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_return != null)  list.Add(_return);
            if(_Expressionopt != null)  list.Add(_Expressionopt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ReturnStatement)) return false;
            if (! base.Equals(o)) return false;
            ReturnStatement other = (ReturnStatement) o;
            if (! _return.Equals(other._return)) return false;
            if (_Expressionopt == null)
                if (other._Expressionopt != null) return false;
                else{}// continue
            else if (! _Expressionopt.Equals(other._Expressionopt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_return.GetHashCode());
            hash = hash * 31 + (_Expressionopt == null ? 0 : _Expressionopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 324:  ThrowStatement ::= throw Expression ;
     *</b>
     */
    public class ThrowStatement : Ast , IThrowStatement
    {
        private AstToken _throw;
        private IExpression _Expression;
        private AstToken _SEMICOLON;

        public AstToken getthrow() { return _throw; }
        public void setthrow(AstToken _throw) { this._throw = _throw; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ThrowStatement(IToken leftIToken, IToken rightIToken,
                              AstToken _throw,
                              IExpression _Expression,
                              AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._throw = _throw;
            ((Ast) _throw).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_throw != null)  list.Add(_throw);
            if(_Expression != null)  list.Add(_Expression);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ThrowStatement)) return false;
            if (! base.Equals(o)) return false;
            ThrowStatement other = (ThrowStatement) o;
            if (! _throw.Equals(other._throw)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_throw.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
     *</b>
     */
    public class SynchronizedStatement : Ast , ISynchronizedStatement
    {
        private AstToken _synchronized;
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;
        private Block _Block;

        public AstToken getsynchronized() { return _synchronized; }
        public void setsynchronized(AstToken _synchronized) { this._synchronized = _synchronized; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }

        public SynchronizedStatement(IToken leftIToken, IToken rightIToken,
                                     AstToken _synchronized,
                                     AstToken _LPAREN,
                                     IExpression _Expression,
                                     AstToken _RPAREN,
                                     Block _Block)
            :base(leftIToken, rightIToken)

        {
            this._synchronized = _synchronized;
            ((Ast) _synchronized).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_synchronized != null)  list.Add(_synchronized);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Block != null)  list.Add(_Block);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SynchronizedStatement)) return false;
            if (! base.Equals(o)) return false;
            SynchronizedStatement other = (SynchronizedStatement) o;
            if (! _synchronized.Equals(other._synchronized)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Block.Equals(other._Block)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_synchronized.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 328:  Catches ::= CatchClause
     *</em>
     *<p>
     *<b>
    *<li>Rule 329:  Catches ::= Catches CatchClause
     *</b>
     */
    public class Catches : Ast , ICatches
    {
        private ICatches _Catches;
        private CatchClause _CatchClause;

        public ICatches getCatches() { return _Catches; }
        public void setCatches(ICatches _Catches) { this._Catches = _Catches; }
        public CatchClause getCatchClause() { return _CatchClause; }
        public void setCatchClause(CatchClause _CatchClause) { this._CatchClause = _CatchClause; }

        public Catches(IToken leftIToken, IToken rightIToken,
                       ICatches _Catches,
                       CatchClause _CatchClause)
            :base(leftIToken, rightIToken)

        {
            this._Catches = _Catches;
            ((Ast) _Catches).setParent(this);
            this._CatchClause = _CatchClause;
            ((Ast) _CatchClause).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Catches != null)  list.Add(_Catches);
            if(_CatchClause != null)  list.Add(_CatchClause);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Catches)) return false;
            if (! base.Equals(o)) return false;
            Catches other = (Catches) o;
            if (! _Catches.Equals(other._Catches)) return false;
            if (! _CatchClause.Equals(other._CatchClause)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Catches.GetHashCode());
            hash = hash * 31 + (_CatchClause.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
     *</b>
     */
    public class CatchClause : Ast , ICatchClause
    {
        private AstToken _catch;
        private AstToken _LPAREN;
        private FormalParameter _FormalParameter;
        private AstToken _RPAREN;
        private Block _Block;

        public AstToken getcatch() { return _catch; }
        public void setcatch(AstToken _catch) { this._catch = _catch; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public FormalParameter getFormalParameter() { return _FormalParameter; }
        public void setFormalParameter(FormalParameter _FormalParameter) { this._FormalParameter = _FormalParameter; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }

        public CatchClause(IToken leftIToken, IToken rightIToken,
                           AstToken _catch,
                           AstToken _LPAREN,
                           FormalParameter _FormalParameter,
                           AstToken _RPAREN,
                           Block _Block)
            :base(leftIToken, rightIToken)

        {
            this._catch = _catch;
            ((Ast) _catch).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameter = _FormalParameter;
            ((Ast) _FormalParameter).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_catch != null)  list.Add(_catch);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_FormalParameter != null)  list.Add(_FormalParameter);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_Block != null)  list.Add(_Block);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is CatchClause)) return false;
            if (! base.Equals(o)) return false;
            CatchClause other = (CatchClause) o;
            if (! _catch.Equals(other._catch)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _FormalParameter.Equals(other._FormalParameter)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _Block.Equals(other._Block)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_catch.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_FormalParameter.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 331:  Finally ::= finally Block
     *</b>
     */
    public class Finally : Ast , IFinally
    {
        private AstToken _finally;
        private Block _Block;

        public AstToken getfinally() { return _finally; }
        public void setfinally(AstToken _finally) { this._finally = _finally; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }

        public Finally(IToken leftIToken, IToken rightIToken,
                       AstToken _finally,
                       Block _Block)
            :base(leftIToken, rightIToken)

        {
            this._finally = _finally;
            ((Ast) _finally).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_finally != null)  list.Add(_finally);
            if(_Block != null)  list.Add(_Block);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Finally)) return false;
            if (! base.Equals(o)) return false;
            Finally other = (Finally) o;
            if (! _finally.Equals(other._finally)) return false;
            if (! _Block.Equals(other._Block)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_finally.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 356:  ArgumentList ::= Expression
     *</em>
     *<p>
     *<b>
    *<li>Rule 357:  ArgumentList ::= ArgumentList , Expression
     *</b>
     */
    public class ArgumentList : Ast , IArgumentList
    {
        private IArgumentList _ArgumentList;
        private AstToken _COMMA;
        private IExpression _Expression;

        public IArgumentList getArgumentList() { return _ArgumentList; }
        public void setArgumentList(IArgumentList _ArgumentList) { this._ArgumentList = _ArgumentList; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }

        public ArgumentList(IToken leftIToken, IToken rightIToken,
                            IArgumentList _ArgumentList,
                            AstToken _COMMA,
                            IExpression _Expression)
            :base(leftIToken, rightIToken)

        {
            this._ArgumentList = _ArgumentList;
            ((Ast) _ArgumentList).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ArgumentList != null)  list.Add(_ArgumentList);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_Expression != null)  list.Add(_Expression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArgumentList)) return false;
            if (! base.Equals(o)) return false;
            ArgumentList other = (ArgumentList) o;
            if (! _ArgumentList.Equals(other._ArgumentList)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ArgumentList.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 362:  DimExprs ::= DimExpr
     *</em>
     *<p>
     *<b>
    *<li>Rule 363:  DimExprs ::= DimExprs DimExpr
     *</b>
     */
    public class DimExprs : Ast , IDimExprs
    {
        private IDimExprs _DimExprs;
        private DimExpr _DimExpr;

        public IDimExprs getDimExprs() { return _DimExprs; }
        public void setDimExprs(IDimExprs _DimExprs) { this._DimExprs = _DimExprs; }
        public DimExpr getDimExpr() { return _DimExpr; }
        public void setDimExpr(DimExpr _DimExpr) { this._DimExpr = _DimExpr; }

        public DimExprs(IToken leftIToken, IToken rightIToken,
                        IDimExprs _DimExprs,
                        DimExpr _DimExpr)
            :base(leftIToken, rightIToken)

        {
            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._DimExpr = _DimExpr;
            ((Ast) _DimExpr).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_DimExprs != null)  list.Add(_DimExprs);
            if(_DimExpr != null)  list.Add(_DimExpr);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is DimExprs)) return false;
            if (! base.Equals(o)) return false;
            DimExprs other = (DimExprs) o;
            if (! _DimExprs.Equals(other._DimExprs)) return false;
            if (! _DimExpr.Equals(other._DimExpr)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_DimExprs.GetHashCode());
            hash = hash * 31 + (_DimExpr.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 364:  DimExpr ::= [ Expression ]
     *</b>
     */
    public class DimExpr : Ast , IDimExpr
    {
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public DimExpr(IToken leftIToken, IToken rightIToken,
                       AstToken _LBRACKET,
                       IExpression _Expression,
                       AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_Expression != null)  list.Add(_Expression);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is DimExpr)) return false;
            if (! base.Equals(o)) return false;
            DimExpr other = (DimExpr) o;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 381:  PostIncrementExpression ::= PostfixExpression ++
     *</b>
     */
    public class PostIncrementExpression : Ast , IPostIncrementExpression
    {
        private IPostfixExpression _PostfixExpression;
        private AstToken _PLUS_PLUS;

        public IPostfixExpression getPostfixExpression() { return _PostfixExpression; }
        public void setPostfixExpression(IPostfixExpression _PostfixExpression) { this._PostfixExpression = _PostfixExpression; }
        public AstToken getPLUS_PLUS() { return _PLUS_PLUS; }
        public void setPLUS_PLUS(AstToken _PLUS_PLUS) { this._PLUS_PLUS = _PLUS_PLUS; }

        public PostIncrementExpression(IToken leftIToken, IToken rightIToken,
                                       IPostfixExpression _PostfixExpression,
                                       AstToken _PLUS_PLUS)
            :base(leftIToken, rightIToken)

        {
            this._PostfixExpression = _PostfixExpression;
            ((Ast) _PostfixExpression).setParent(this);
            this._PLUS_PLUS = _PLUS_PLUS;
            ((Ast) _PLUS_PLUS).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PostfixExpression != null)  list.Add(_PostfixExpression);
            if(_PLUS_PLUS != null)  list.Add(_PLUS_PLUS);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PostIncrementExpression)) return false;
            if (! base.Equals(o)) return false;
            PostIncrementExpression other = (PostIncrementExpression) o;
            if (! _PostfixExpression.Equals(other._PostfixExpression)) return false;
            if (! _PLUS_PLUS.Equals(other._PLUS_PLUS)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PostfixExpression.GetHashCode());
            hash = hash * 31 + (_PLUS_PLUS.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 382:  PostDecrementExpression ::= PostfixExpression --
     *</b>
     */
    public class PostDecrementExpression : Ast , IPostDecrementExpression
    {
        private IPostfixExpression _PostfixExpression;
        private AstToken _MINUS_MINUS;

        public IPostfixExpression getPostfixExpression() { return _PostfixExpression; }
        public void setPostfixExpression(IPostfixExpression _PostfixExpression) { this._PostfixExpression = _PostfixExpression; }
        public AstToken getMINUS_MINUS() { return _MINUS_MINUS; }
        public void setMINUS_MINUS(AstToken _MINUS_MINUS) { this._MINUS_MINUS = _MINUS_MINUS; }

        public PostDecrementExpression(IToken leftIToken, IToken rightIToken,
                                       IPostfixExpression _PostfixExpression,
                                       AstToken _MINUS_MINUS)
            :base(leftIToken, rightIToken)

        {
            this._PostfixExpression = _PostfixExpression;
            ((Ast) _PostfixExpression).setParent(this);
            this._MINUS_MINUS = _MINUS_MINUS;
            ((Ast) _MINUS_MINUS).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PostfixExpression != null)  list.Add(_PostfixExpression);
            if(_MINUS_MINUS != null)  list.Add(_MINUS_MINUS);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PostDecrementExpression)) return false;
            if (! base.Equals(o)) return false;
            PostDecrementExpression other = (PostDecrementExpression) o;
            if (! _PostfixExpression.Equals(other._PostfixExpression)) return false;
            if (! _MINUS_MINUS.Equals(other._MINUS_MINUS)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PostfixExpression.GetHashCode());
            hash = hash * 31 + (_MINUS_MINUS.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
     *</b>
     */
    public class PreIncrementExpression : Ast , IPreIncrementExpression
    {
        private AstToken _PLUS_PLUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getPLUS_PLUS() { return _PLUS_PLUS; }
        public void setPLUS_PLUS(AstToken _PLUS_PLUS) { this._PLUS_PLUS = _PLUS_PLUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public PreIncrementExpression(IToken leftIToken, IToken rightIToken,
                                      AstToken _PLUS_PLUS,
                                      IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._PLUS_PLUS = _PLUS_PLUS;
            ((Ast) _PLUS_PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PLUS_PLUS != null)  list.Add(_PLUS_PLUS);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PreIncrementExpression)) return false;
            if (! base.Equals(o)) return false;
            PreIncrementExpression other = (PreIncrementExpression) o;
            if (! _PLUS_PLUS.Equals(other._PLUS_PLUS)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PLUS_PLUS.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 389:  PreDecrementExpression ::= -- UnaryExpression
     *</b>
     */
    public class PreDecrementExpression : Ast , IPreDecrementExpression
    {
        private AstToken _MINUS_MINUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getMINUS_MINUS() { return _MINUS_MINUS; }
        public void setMINUS_MINUS(AstToken _MINUS_MINUS) { this._MINUS_MINUS = _MINUS_MINUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public PreDecrementExpression(IToken leftIToken, IToken rightIToken,
                                      AstToken _MINUS_MINUS,
                                      IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._MINUS_MINUS = _MINUS_MINUS;
            ((Ast) _MINUS_MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MINUS_MINUS != null)  list.Add(_MINUS_MINUS);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PreDecrementExpression)) return false;
            if (! base.Equals(o)) return false;
            PreDecrementExpression other = (PreDecrementExpression) o;
            if (! _MINUS_MINUS.Equals(other._MINUS_MINUS)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MINUS_MINUS.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 416:  AndExpression ::= EqualityExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 417:  AndExpression ::= AndExpression & EqualityExpression
     *</b>
     */
    public class AndExpression : Ast , IAndExpression
    {
        private IAndExpression _AndExpression;
        private AstToken _AND;
        private IEqualityExpression _EqualityExpression;

        public IAndExpression getAndExpression() { return _AndExpression; }
        public void setAndExpression(IAndExpression _AndExpression) { this._AndExpression = _AndExpression; }
        public AstToken getAND() { return _AND; }
        public void setAND(AstToken _AND) { this._AND = _AND; }
        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }
        public void setEqualityExpression(IEqualityExpression _EqualityExpression) { this._EqualityExpression = _EqualityExpression; }

        public AndExpression(IToken leftIToken, IToken rightIToken,
                             IAndExpression _AndExpression,
                             AstToken _AND,
                             IEqualityExpression _EqualityExpression)
            :base(leftIToken, rightIToken)

        {
            this._AndExpression = _AndExpression;
            ((Ast) _AndExpression).setParent(this);
            this._AND = _AND;
            ((Ast) _AND).setParent(this);
            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AndExpression != null)  list.Add(_AndExpression);
            if(_AND != null)  list.Add(_AND);
            if(_EqualityExpression != null)  list.Add(_EqualityExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AndExpression)) return false;
            if (! base.Equals(o)) return false;
            AndExpression other = (AndExpression) o;
            if (! _AndExpression.Equals(other._AndExpression)) return false;
            if (! _AND.Equals(other._AND)) return false;
            if (! _EqualityExpression.Equals(other._EqualityExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AndExpression.GetHashCode());
            hash = hash * 31 + (_AND.GetHashCode());
            hash = hash * 31 + (_EqualityExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 418:  ExclusiveOrExpression ::= AndExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
     *</b>
     */
    public class ExclusiveOrExpression : Ast , IExclusiveOrExpression
    {
        private IExclusiveOrExpression _ExclusiveOrExpression;
        private AstToken _XOR;
        private IAndExpression _AndExpression;

        public IExclusiveOrExpression getExclusiveOrExpression() { return _ExclusiveOrExpression; }
        public void setExclusiveOrExpression(IExclusiveOrExpression _ExclusiveOrExpression) { this._ExclusiveOrExpression = _ExclusiveOrExpression; }
        public AstToken getXOR() { return _XOR; }
        public void setXOR(AstToken _XOR) { this._XOR = _XOR; }
        public IAndExpression getAndExpression() { return _AndExpression; }
        public void setAndExpression(IAndExpression _AndExpression) { this._AndExpression = _AndExpression; }

        public ExclusiveOrExpression(IToken leftIToken, IToken rightIToken,
                                     IExclusiveOrExpression _ExclusiveOrExpression,
                                     AstToken _XOR,
                                     IAndExpression _AndExpression)
            :base(leftIToken, rightIToken)

        {
            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            ((Ast) _ExclusiveOrExpression).setParent(this);
            this._XOR = _XOR;
            ((Ast) _XOR).setParent(this);
            this._AndExpression = _AndExpression;
            ((Ast) _AndExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ExclusiveOrExpression != null)  list.Add(_ExclusiveOrExpression);
            if(_XOR != null)  list.Add(_XOR);
            if(_AndExpression != null)  list.Add(_AndExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExclusiveOrExpression)) return false;
            if (! base.Equals(o)) return false;
            ExclusiveOrExpression other = (ExclusiveOrExpression) o;
            if (! _ExclusiveOrExpression.Equals(other._ExclusiveOrExpression)) return false;
            if (! _XOR.Equals(other._XOR)) return false;
            if (! _AndExpression.Equals(other._AndExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ExclusiveOrExpression.GetHashCode());
            hash = hash * 31 + (_XOR.GetHashCode());
            hash = hash * 31 + (_AndExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
     *</b>
     */
    public class InclusiveOrExpression : Ast , IInclusiveOrExpression
    {
        private IInclusiveOrExpression _InclusiveOrExpression;
        private AstToken _OR;
        private IExclusiveOrExpression _ExclusiveOrExpression;

        public IInclusiveOrExpression getInclusiveOrExpression() { return _InclusiveOrExpression; }
        public void setInclusiveOrExpression(IInclusiveOrExpression _InclusiveOrExpression) { this._InclusiveOrExpression = _InclusiveOrExpression; }
        public AstToken getOR() { return _OR; }
        public void setOR(AstToken _OR) { this._OR = _OR; }
        public IExclusiveOrExpression getExclusiveOrExpression() { return _ExclusiveOrExpression; }
        public void setExclusiveOrExpression(IExclusiveOrExpression _ExclusiveOrExpression) { this._ExclusiveOrExpression = _ExclusiveOrExpression; }

        public InclusiveOrExpression(IToken leftIToken, IToken rightIToken,
                                     IInclusiveOrExpression _InclusiveOrExpression,
                                     AstToken _OR,
                                     IExclusiveOrExpression _ExclusiveOrExpression)
            :base(leftIToken, rightIToken)

        {
            this._InclusiveOrExpression = _InclusiveOrExpression;
            ((Ast) _InclusiveOrExpression).setParent(this);
            this._OR = _OR;
            ((Ast) _OR).setParent(this);
            this._ExclusiveOrExpression = _ExclusiveOrExpression;
            ((Ast) _ExclusiveOrExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_InclusiveOrExpression != null)  list.Add(_InclusiveOrExpression);
            if(_OR != null)  list.Add(_OR);
            if(_ExclusiveOrExpression != null)  list.Add(_ExclusiveOrExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is InclusiveOrExpression)) return false;
            if (! base.Equals(o)) return false;
            InclusiveOrExpression other = (InclusiveOrExpression) o;
            if (! _InclusiveOrExpression.Equals(other._InclusiveOrExpression)) return false;
            if (! _OR.Equals(other._OR)) return false;
            if (! _ExclusiveOrExpression.Equals(other._ExclusiveOrExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_InclusiveOrExpression.GetHashCode());
            hash = hash * 31 + (_OR.GetHashCode());
            hash = hash * 31 + (_ExclusiveOrExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
     *</b>
     */
    public class ConditionalAndExpression : Ast , IConditionalAndExpression
    {
        private IConditionalAndExpression _ConditionalAndExpression;
        private AstToken _AND_AND;
        private IInclusiveOrExpression _InclusiveOrExpression;

        public IConditionalAndExpression getConditionalAndExpression() { return _ConditionalAndExpression; }
        public void setConditionalAndExpression(IConditionalAndExpression _ConditionalAndExpression) { this._ConditionalAndExpression = _ConditionalAndExpression; }
        public AstToken getAND_AND() { return _AND_AND; }
        public void setAND_AND(AstToken _AND_AND) { this._AND_AND = _AND_AND; }
        public IInclusiveOrExpression getInclusiveOrExpression() { return _InclusiveOrExpression; }
        public void setInclusiveOrExpression(IInclusiveOrExpression _InclusiveOrExpression) { this._InclusiveOrExpression = _InclusiveOrExpression; }

        public ConditionalAndExpression(IToken leftIToken, IToken rightIToken,
                                        IConditionalAndExpression _ConditionalAndExpression,
                                        AstToken _AND_AND,
                                        IInclusiveOrExpression _InclusiveOrExpression)
            :base(leftIToken, rightIToken)

        {
            this._ConditionalAndExpression = _ConditionalAndExpression;
            ((Ast) _ConditionalAndExpression).setParent(this);
            this._AND_AND = _AND_AND;
            ((Ast) _AND_AND).setParent(this);
            this._InclusiveOrExpression = _InclusiveOrExpression;
            ((Ast) _InclusiveOrExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConditionalAndExpression != null)  list.Add(_ConditionalAndExpression);
            if(_AND_AND != null)  list.Add(_AND_AND);
            if(_InclusiveOrExpression != null)  list.Add(_InclusiveOrExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConditionalAndExpression)) return false;
            if (! base.Equals(o)) return false;
            ConditionalAndExpression other = (ConditionalAndExpression) o;
            if (! _ConditionalAndExpression.Equals(other._ConditionalAndExpression)) return false;
            if (! _AND_AND.Equals(other._AND_AND)) return false;
            if (! _InclusiveOrExpression.Equals(other._InclusiveOrExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConditionalAndExpression.GetHashCode());
            hash = hash * 31 + (_AND_AND.GetHashCode());
            hash = hash * 31 + (_InclusiveOrExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
     *</b>
     */
    public class ConditionalOrExpression : Ast , IConditionalOrExpression
    {
        private IConditionalOrExpression _ConditionalOrExpression;
        private AstToken _OR_OR;
        private IConditionalAndExpression _ConditionalAndExpression;

        public IConditionalOrExpression getConditionalOrExpression() { return _ConditionalOrExpression; }
        public void setConditionalOrExpression(IConditionalOrExpression _ConditionalOrExpression) { this._ConditionalOrExpression = _ConditionalOrExpression; }
        public AstToken getOR_OR() { return _OR_OR; }
        public void setOR_OR(AstToken _OR_OR) { this._OR_OR = _OR_OR; }
        public IConditionalAndExpression getConditionalAndExpression() { return _ConditionalAndExpression; }
        public void setConditionalAndExpression(IConditionalAndExpression _ConditionalAndExpression) { this._ConditionalAndExpression = _ConditionalAndExpression; }

        public ConditionalOrExpression(IToken leftIToken, IToken rightIToken,
                                       IConditionalOrExpression _ConditionalOrExpression,
                                       AstToken _OR_OR,
                                       IConditionalAndExpression _ConditionalAndExpression)
            :base(leftIToken, rightIToken)

        {
            this._ConditionalOrExpression = _ConditionalOrExpression;
            ((Ast) _ConditionalOrExpression).setParent(this);
            this._OR_OR = _OR_OR;
            ((Ast) _OR_OR).setParent(this);
            this._ConditionalAndExpression = _ConditionalAndExpression;
            ((Ast) _ConditionalAndExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConditionalOrExpression != null)  list.Add(_ConditionalOrExpression);
            if(_OR_OR != null)  list.Add(_OR_OR);
            if(_ConditionalAndExpression != null)  list.Add(_ConditionalAndExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConditionalOrExpression)) return false;
            if (! base.Equals(o)) return false;
            ConditionalOrExpression other = (ConditionalOrExpression) o;
            if (! _ConditionalOrExpression.Equals(other._ConditionalOrExpression)) return false;
            if (! _OR_OR.Equals(other._OR_OR)) return false;
            if (! _ConditionalAndExpression.Equals(other._ConditionalAndExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConditionalOrExpression.GetHashCode());
            hash = hash * 31 + (_OR_OR.GetHashCode());
            hash = hash * 31 + (_ConditionalAndExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 426:  ConditionalExpression ::= ConditionalOrExpression
     *</em>
     *<p>
     *<b>
    *<li>Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
     *</b>
     */
    public class ConditionalExpression : Ast , IConditionalExpression
    {
        private IConditionalOrExpression _ConditionalOrExpression;
        private AstToken _QUESTION;
        private IExpression _Expression;
        private AstToken _COLON;
        private IConditionalExpression _ConditionalExpression;

        public IConditionalOrExpression getConditionalOrExpression() { return _ConditionalOrExpression; }
        public void setConditionalOrExpression(IConditionalOrExpression _ConditionalOrExpression) { this._ConditionalOrExpression = _ConditionalOrExpression; }
        public AstToken getQUESTION() { return _QUESTION; }
        public void setQUESTION(AstToken _QUESTION) { this._QUESTION = _QUESTION; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }
        public IConditionalExpression getConditionalExpression() { return _ConditionalExpression; }
        public void setConditionalExpression(IConditionalExpression _ConditionalExpression) { this._ConditionalExpression = _ConditionalExpression; }

        public ConditionalExpression(IToken leftIToken, IToken rightIToken,
                                     IConditionalOrExpression _ConditionalOrExpression,
                                     AstToken _QUESTION,
                                     IExpression _Expression,
                                     AstToken _COLON,
                                     IConditionalExpression _ConditionalExpression)
            :base(leftIToken, rightIToken)

        {
            this._ConditionalOrExpression = _ConditionalOrExpression;
            ((Ast) _ConditionalOrExpression).setParent(this);
            this._QUESTION = _QUESTION;
            ((Ast) _QUESTION).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._ConditionalExpression = _ConditionalExpression;
            ((Ast) _ConditionalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ConditionalOrExpression != null)  list.Add(_ConditionalOrExpression);
            if(_QUESTION != null)  list.Add(_QUESTION);
            if(_Expression != null)  list.Add(_Expression);
            if(_COLON != null)  list.Add(_COLON);
            if(_ConditionalExpression != null)  list.Add(_ConditionalExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ConditionalExpression)) return false;
            if (! base.Equals(o)) return false;
            ConditionalExpression other = (ConditionalExpression) o;
            if (! _ConditionalOrExpression.Equals(other._ConditionalOrExpression)) return false;
            if (! _QUESTION.Equals(other._QUESTION)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            if (! _ConditionalExpression.Equals(other._ConditionalExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ConditionalOrExpression.GetHashCode());
            hash = hash * 31 + (_QUESTION.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            hash = hash * 31 + (_ConditionalExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
     *</b>
     */
    public class Assignment : Ast , IAssignment
    {
        private ILeftHandSide _LeftHandSide;
        private IAssignmentOperator _AssignmentOperator;
        private IAssignmentExpression _AssignmentExpression;

        public ILeftHandSide getLeftHandSide() { return _LeftHandSide; }
        public void setLeftHandSide(ILeftHandSide _LeftHandSide) { this._LeftHandSide = _LeftHandSide; }
        public IAssignmentOperator getAssignmentOperator() { return _AssignmentOperator; }
        public void setAssignmentOperator(IAssignmentOperator _AssignmentOperator) { this._AssignmentOperator = _AssignmentOperator; }
        public IAssignmentExpression getAssignmentExpression() { return _AssignmentExpression; }
        public void setAssignmentExpression(IAssignmentExpression _AssignmentExpression) { this._AssignmentExpression = _AssignmentExpression; }

        public Assignment(IToken leftIToken, IToken rightIToken,
                          ILeftHandSide _LeftHandSide,
                          IAssignmentOperator _AssignmentOperator,
                          IAssignmentExpression _AssignmentExpression)
            :base(leftIToken, rightIToken)

        {
            this._LeftHandSide = _LeftHandSide;
            ((Ast) _LeftHandSide).setParent(this);
            this._AssignmentOperator = _AssignmentOperator;
            ((Ast) _AssignmentOperator).setParent(this);
            this._AssignmentExpression = _AssignmentExpression;
            ((Ast) _AssignmentExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LeftHandSide != null)  list.Add(_LeftHandSide);
            if(_AssignmentOperator != null)  list.Add(_AssignmentOperator);
            if(_AssignmentExpression != null)  list.Add(_AssignmentExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Assignment)) return false;
            if (! base.Equals(o)) return false;
            Assignment other = (Assignment) o;
            if (! _LeftHandSide.Equals(other._LeftHandSide)) return false;
            if (! _AssignmentOperator.Equals(other._AssignmentOperator)) return false;
            if (! _AssignmentExpression.Equals(other._AssignmentExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LeftHandSide.GetHashCode());
            hash = hash * 31 + (_AssignmentOperator.GetHashCode());
            hash = hash * 31 + (_AssignmentExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 492:  ,opt ::= $Empty
     *</em>
     *<p>
     *<b>
    *<li>Rule 493:  ,opt ::= ,
     *</b>
     */
    public class Commaopt : AstToken , ICommaopt
    {
        public IToken getCOMMA() { return leftIToken; }

        public Commaopt(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<em>
    *<li>Rule 504:  ...opt ::= $Empty
     *</em>
     *<p>
     *<b>
    *<li>Rule 505:  ...opt ::= ...
     *</b>
     */
    public class Ellipsisopt : AstToken , IEllipsisopt
    {
        public IToken getELLIPSIS() { return leftIToken; }

        public Ellipsisopt(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 5:  LPGUserAction ::= $BeginAction BlockStatementsopt $EndAction
     *</b>
     */
    public class LPGUserAction0 : Ast , ILPGUserAction
    {
        private AstToken _BeginAction;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _EndAction;

        public AstToken getBeginAction() { return _BeginAction; }
        public void setBeginAction(AstToken _BeginAction) { this._BeginAction = _BeginAction; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public void setBlockStatementsopt(IBlockStatementsopt _BlockStatementsopt) { this._BlockStatementsopt = _BlockStatementsopt; }
        public AstToken getEndAction() { return _EndAction; }
        public void setEndAction(AstToken _EndAction) { this._EndAction = _EndAction; }

        public LPGUserAction0(IToken leftIToken, IToken rightIToken,
                              AstToken _BeginAction,
                              IBlockStatementsopt _BlockStatementsopt,
                              AstToken _EndAction)
            :base(leftIToken, rightIToken)

        {
            this._BeginAction = _BeginAction;
            ((Ast) _BeginAction).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._EndAction = _EndAction;
            ((Ast) _EndAction).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_BeginAction != null)  list.Add(_BeginAction);
            if(_BlockStatementsopt != null)  list.Add(_BlockStatementsopt);
            if(_EndAction != null)  list.Add(_EndAction);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LPGUserAction0)) return false;
            if (! base.Equals(o)) return false;
            LPGUserAction0 other = (LPGUserAction0) o;
            if (! _BeginAction.Equals(other._BeginAction)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else{}// continue
            else if (! _BlockStatementsopt.Equals(other._BlockStatementsopt)) return false;
            if (! _EndAction.Equals(other._EndAction)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_BeginAction.GetHashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.GetHashCode());
            hash = hash * 31 + (_EndAction.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
     *</b>
     */
    public class LPGUserAction1 : Ast , ILPGUserAction
    {
        private AstToken _BeginJava;
        private IBlockStatementsopt _BlockStatementsopt;
        private AstToken _EndJava;

        public AstToken getBeginJava() { return _BeginJava; }
        public void setBeginJava(AstToken _BeginJava) { this._BeginJava = _BeginJava; }
        /**
         * The value returned by <b>getBlockStatementsopt</b> may be <b>null</b>
         */
        public IBlockStatementsopt getBlockStatementsopt() { return _BlockStatementsopt; }
        public void setBlockStatementsopt(IBlockStatementsopt _BlockStatementsopt) { this._BlockStatementsopt = _BlockStatementsopt; }
        public AstToken getEndJava() { return _EndJava; }
        public void setEndJava(AstToken _EndJava) { this._EndJava = _EndJava; }

        public LPGUserAction1(IToken leftIToken, IToken rightIToken,
                              AstToken _BeginJava,
                              IBlockStatementsopt _BlockStatementsopt,
                              AstToken _EndJava)
            :base(leftIToken, rightIToken)

        {
            this._BeginJava = _BeginJava;
            ((Ast) _BeginJava).setParent(this);
            this._BlockStatementsopt = _BlockStatementsopt;
            if (_BlockStatementsopt != null) ((Ast) _BlockStatementsopt).setParent(this);
            this._EndJava = _EndJava;
            ((Ast) _EndJava).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_BeginJava != null)  list.Add(_BeginJava);
            if(_BlockStatementsopt != null)  list.Add(_BlockStatementsopt);
            if(_EndJava != null)  list.Add(_EndJava);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is LPGUserAction1)) return false;
            if (! base.Equals(o)) return false;
            LPGUserAction1 other = (LPGUserAction1) o;
            if (! _BeginJava.Equals(other._BeginJava)) return false;
            if (_BlockStatementsopt == null)
                if (other._BlockStatementsopt != null) return false;
                else{}// continue
            else if (! _BlockStatementsopt.Equals(other._BlockStatementsopt)) return false;
            if (! _EndJava.Equals(other._EndJava)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_BeginJava.GetHashCode());
            hash = hash * 31 + (_BlockStatementsopt == null ? 0 : _BlockStatementsopt.GetHashCode());
            hash = hash * 31 + (_EndJava.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 7:  LPGUserAction ::= $NoAction
     *</b>
     */
    public class LPGUserAction2 : AstToken , ILPGUserAction
    {
        public IToken getNoAction() { return leftIToken; }

        public LPGUserAction2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 8:  LPGUserAction ::= $NullAction
     *</b>
     */
    public class LPGUserAction3 : AstToken , ILPGUserAction
    {
        public IToken getNullAction() { return leftIToken; }

        public LPGUserAction3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 9:  LPGUserAction ::= $BadAction
     *</b>
     */
    public class LPGUserAction4 : AstToken , ILPGUserAction
    {
        public IToken getBadAction() { return leftIToken; }

        public LPGUserAction4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 16:  IntegralType ::= byte
     *</b>
     */
    public class IntegralType0 : AstToken , IIntegralType
    {
        public IToken getbyte() { return leftIToken; }

        public IntegralType0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 17:  IntegralType ::= short
     *</b>
     */
    public class IntegralType1 : AstToken , IIntegralType
    {
        public IToken getshort() { return leftIToken; }

        public IntegralType1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 18:  IntegralType ::= int
     *</b>
     */
    public class IntegralType2 : AstToken , IIntegralType
    {
        public IToken getint() { return leftIToken; }

        public IntegralType2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 19:  IntegralType ::= long
     *</b>
     */
    public class IntegralType3 : AstToken , IIntegralType
    {
        public IToken getlong() { return leftIToken; }

        public IntegralType3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 20:  IntegralType ::= char
     *</b>
     */
    public class IntegralType4 : AstToken , IIntegralType
    {
        public IToken getchar() { return leftIToken; }

        public IntegralType4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 21:  FloatingPointType ::= float
     *</b>
     */
    public class FloatingPointType0 : AstToken , IFloatingPointType
    {
        public IToken getfloat() { return leftIToken; }

        public FloatingPointType0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 22:  FloatingPointType ::= double
     *</b>
     */
    public class FloatingPointType1 : AstToken , IFloatingPointType
    {
        public IToken getdouble() { return leftIToken; }

        public FloatingPointType1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 45:  WildcardBounds ::= extends ReferenceType
     *</b>
     */
    public class WildcardBounds0 : Ast , IWildcardBounds
    {
        private AstToken _extends;
        private IReferenceType _ReferenceType;

        public AstToken getextends() { return _extends; }
        public void setextends(AstToken _extends) { this._extends = _extends; }
        public IReferenceType getReferenceType() { return _ReferenceType; }
        public void setReferenceType(IReferenceType _ReferenceType) { this._ReferenceType = _ReferenceType; }

        public WildcardBounds0(IToken leftIToken, IToken rightIToken,
                               AstToken _extends,
                               IReferenceType _ReferenceType)
            :base(leftIToken, rightIToken)

        {
            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_extends != null)  list.Add(_extends);
            if(_ReferenceType != null)  list.Add(_ReferenceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is WildcardBounds0)) return false;
            if (! base.Equals(o)) return false;
            WildcardBounds0 other = (WildcardBounds0) o;
            if (! _extends.Equals(other._extends)) return false;
            if (! _ReferenceType.Equals(other._ReferenceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_extends.GetHashCode());
            hash = hash * 31 + (_ReferenceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 46:  WildcardBounds ::= super ReferenceType
     *</b>
     */
    public class WildcardBounds1 : Ast , IWildcardBounds
    {
        private AstToken _super;
        private IReferenceType _ReferenceType;

        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public IReferenceType getReferenceType() { return _ReferenceType; }
        public void setReferenceType(IReferenceType _ReferenceType) { this._ReferenceType = _ReferenceType; }

        public WildcardBounds1(IToken leftIToken, IToken rightIToken,
                               AstToken _super,
                               IReferenceType _ReferenceType)
            :base(leftIToken, rightIToken)

        {
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_super != null)  list.Add(_super);
            if(_ReferenceType != null)  list.Add(_ReferenceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is WildcardBounds1)) return false;
            if (! base.Equals(o)) return false;
            WildcardBounds1 other = (WildcardBounds1) o;
            if (! _super.Equals(other._super)) return false;
            if (! _ReferenceType.Equals(other._ReferenceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_ReferenceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 80:  ClassModifier ::= public
     *</b>
     */
    public class ClassModifier0 : AstToken , IClassModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ClassModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 81:  ClassModifier ::= protected
     *</b>
     */
    public class ClassModifier1 : AstToken , IClassModifier
    {
        public IToken getprotected() { return leftIToken; }

        public ClassModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 82:  ClassModifier ::= private
     *</b>
     */
    public class ClassModifier2 : AstToken , IClassModifier
    {
        public IToken getprivate() { return leftIToken; }

        public ClassModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 83:  ClassModifier ::= abstract
     *</b>
     */
    public class ClassModifier3 : AstToken , IClassModifier
    {
        public IToken getabstract() { return leftIToken; }

        public ClassModifier3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 84:  ClassModifier ::= static
     *</b>
     */
    public class ClassModifier4 : AstToken , IClassModifier
    {
        public IToken getstatic() { return leftIToken; }

        public ClassModifier4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 85:  ClassModifier ::= final
     *</b>
     */
    public class ClassModifier5 : AstToken , IClassModifier
    {
        public IToken getfinal() { return leftIToken; }

        public ClassModifier5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 86:  ClassModifier ::= strictfp
     *</b>
     */
    public class ClassModifier6 : AstToken , IClassModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public ClassModifier6(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 118:  FieldModifier ::= public
     *</b>
     */
    public class FieldModifier0 : AstToken , IFieldModifier
    {
        public IToken getpublic() { return leftIToken; }

        public FieldModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 119:  FieldModifier ::= protected
     *</b>
     */
    public class FieldModifier1 : AstToken , IFieldModifier
    {
        public IToken getprotected() { return leftIToken; }

        public FieldModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 120:  FieldModifier ::= private
     *</b>
     */
    public class FieldModifier2 : AstToken , IFieldModifier
    {
        public IToken getprivate() { return leftIToken; }

        public FieldModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 121:  FieldModifier ::= static
     *</b>
     */
    public class FieldModifier3 : AstToken , IFieldModifier
    {
        public IToken getstatic() { return leftIToken; }

        public FieldModifier3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 122:  FieldModifier ::= final
     *</b>
     */
    public class FieldModifier4 : AstToken , IFieldModifier
    {
        public IToken getfinal() { return leftIToken; }

        public FieldModifier4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 123:  FieldModifier ::= transient
     *</b>
     */
    public class FieldModifier5 : AstToken , IFieldModifier
    {
        public IToken gettransient() { return leftIToken; }

        public FieldModifier5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 124:  FieldModifier ::= volatile
     *</b>
     */
    public class FieldModifier6 : AstToken , IFieldModifier
    {
        public IToken getvolatile() { return leftIToken; }

        public FieldModifier6(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
     *</b>
     */
    public class MethodDeclarator0 : Ast , IMethodDeclarator
    {
        private identifier _identifier;
        private AstToken _LPAREN;
        private IFormalParameterListopt _FormalParameterListopt;
        private AstToken _RPAREN;

        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getFormalParameterListopt</b> may be <b>null</b>
         */
        public IFormalParameterListopt getFormalParameterListopt() { return _FormalParameterListopt; }
        public void setFormalParameterListopt(IFormalParameterListopt _FormalParameterListopt) { this._FormalParameterListopt = _FormalParameterListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodDeclarator0(IToken leftIToken, IToken rightIToken,
                                 identifier _identifier,
                                 AstToken _LPAREN,
                                 IFormalParameterListopt _FormalParameterListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._FormalParameterListopt = _FormalParameterListopt;
            if (_FormalParameterListopt != null) ((Ast) _FormalParameterListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_FormalParameterListopt != null)  list.Add(_FormalParameterListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodDeclarator0)) return false;
            if (! base.Equals(o)) return false;
            MethodDeclarator0 other = (MethodDeclarator0) o;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_FormalParameterListopt == null)
                if (other._FormalParameterListopt != null) return false;
                else{}// continue
            else if (! _FormalParameterListopt.Equals(other._FormalParameterListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_FormalParameterListopt == null ? 0 : _FormalParameterListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
     *</b>
     */
    public class MethodDeclarator1 : Ast , IMethodDeclarator
    {
        private IMethodDeclarator _MethodDeclarator;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IMethodDeclarator getMethodDeclarator() { return _MethodDeclarator; }
        public void setMethodDeclarator(IMethodDeclarator _MethodDeclarator) { this._MethodDeclarator = _MethodDeclarator; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public MethodDeclarator1(IToken leftIToken, IToken rightIToken,
                                 IMethodDeclarator _MethodDeclarator,
                                 AstToken _LBRACKET,
                                 AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._MethodDeclarator = _MethodDeclarator;
            ((Ast) _MethodDeclarator).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MethodDeclarator != null)  list.Add(_MethodDeclarator);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodDeclarator1)) return false;
            if (! base.Equals(o)) return false;
            MethodDeclarator1 other = (MethodDeclarator1) o;
            if (! _MethodDeclarator.Equals(other._MethodDeclarator)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MethodDeclarator.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 144:  MethodModifier ::= public
     *</b>
     */
    public class MethodModifier0 : AstToken , IMethodModifier
    {
        public IToken getpublic() { return leftIToken; }

        public MethodModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 145:  MethodModifier ::= protected
     *</b>
     */
    public class MethodModifier1 : AstToken , IMethodModifier
    {
        public IToken getprotected() { return leftIToken; }

        public MethodModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 146:  MethodModifier ::= private
     *</b>
     */
    public class MethodModifier2 : AstToken , IMethodModifier
    {
        public IToken getprivate() { return leftIToken; }

        public MethodModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 147:  MethodModifier ::= abstract
     *</b>
     */
    public class MethodModifier3 : AstToken , IMethodModifier
    {
        public IToken getabstract() { return leftIToken; }

        public MethodModifier3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 148:  MethodModifier ::= static
     *</b>
     */
    public class MethodModifier4 : AstToken , IMethodModifier
    {
        public IToken getstatic() { return leftIToken; }

        public MethodModifier4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 149:  MethodModifier ::= final
     *</b>
     */
    public class MethodModifier5 : AstToken , IMethodModifier
    {
        public IToken getfinal() { return leftIToken; }

        public MethodModifier5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 150:  MethodModifier ::= synchronized
     *</b>
     */
    public class MethodModifier6 : AstToken , IMethodModifier
    {
        public IToken getsynchronized() { return leftIToken; }

        public MethodModifier6(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 151:  MethodModifier ::= native
     *</b>
     */
    public class MethodModifier7 : AstToken , IMethodModifier
    {
        public IToken getnative() { return leftIToken; }

        public MethodModifier7(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 152:  MethodModifier ::= strictfp
     *</b>
     */
    public class MethodModifier8 : AstToken , IMethodModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public MethodModifier8(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 168:  ConstructorModifier ::= public
     *</b>
     */
    public class ConstructorModifier0 : AstToken , IConstructorModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ConstructorModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 169:  ConstructorModifier ::= protected
     *</b>
     */
    public class ConstructorModifier1 : AstToken , IConstructorModifier
    {
        public IToken getprotected() { return leftIToken; }

        public ConstructorModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 170:  ConstructorModifier ::= private
     *</b>
     */
    public class ConstructorModifier2 : AstToken , IConstructorModifier
    {
        public IToken getprivate() { return leftIToken; }

        public ConstructorModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
     *</b>
     */
    public class ExplicitConstructorInvocation0 : Ast , IExplicitConstructorInvocation
    {
        private TypeArguments _TypeArgumentsopt;
        private AstToken _this;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public AstToken getthis() { return _this; }
        public void setthis(AstToken _this) { this._this = _this; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ExplicitConstructorInvocation0(IToken leftIToken, IToken rightIToken,
                                              TypeArguments _TypeArgumentsopt,
                                              AstToken _this,
                                              AstToken _LPAREN,
                                              IArgumentListopt _ArgumentListopt,
                                              AstToken _RPAREN,
                                              AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._this = _this;
            ((Ast) _this).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_this != null)  list.Add(_this);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExplicitConstructorInvocation0)) return false;
            if (! base.Equals(o)) return false;
            ExplicitConstructorInvocation0 other = (ExplicitConstructorInvocation0) o;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _this.Equals(other._this)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_this.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    public class ExplicitConstructorInvocation1 : Ast , IExplicitConstructorInvocation
    {
        private TypeArguments _TypeArgumentsopt;
        private AstToken _super;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ExplicitConstructorInvocation1(IToken leftIToken, IToken rightIToken,
                                              TypeArguments _TypeArgumentsopt,
                                              AstToken _super,
                                              AstToken _LPAREN,
                                              IArgumentListopt _ArgumentListopt,
                                              AstToken _RPAREN,
                                              AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_super != null)  list.Add(_super);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExplicitConstructorInvocation1)) return false;
            if (! base.Equals(o)) return false;
            ExplicitConstructorInvocation1 other = (ExplicitConstructorInvocation1) o;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _super.Equals(other._super)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
     *</b>
     */
    public class ExplicitConstructorInvocation2 : Ast , IExplicitConstructorInvocation
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private AstToken _super;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private AstToken _SEMICOLON;

        public IPrimary getPrimary() { return _Primary; }
        public void setPrimary(IPrimary _Primary) { this._Primary = _Primary; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public ExplicitConstructorInvocation2(IToken leftIToken, IToken rightIToken,
                                              IPrimary _Primary,
                                              AstToken _DOT,
                                              TypeArguments _TypeArgumentsopt,
                                              AstToken _super,
                                              AstToken _LPAREN,
                                              IArgumentListopt _ArgumentListopt,
                                              AstToken _RPAREN,
                                              AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Primary != null)  list.Add(_Primary);
            if(_DOT != null)  list.Add(_DOT);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_super != null)  list.Add(_super);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExplicitConstructorInvocation2)) return false;
            if (! base.Equals(o)) return false;
            ExplicitConstructorInvocation2 other = (ExplicitConstructorInvocation2) o;
            if (! _Primary.Equals(other._Primary)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _super.Equals(other._super)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Primary.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 188:  InterfaceModifier ::= public
     *</b>
     */
    public class InterfaceModifier0 : AstToken , IInterfaceModifier
    {
        public IToken getpublic() { return leftIToken; }

        public InterfaceModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 189:  InterfaceModifier ::= protected
     *</b>
     */
    public class InterfaceModifier1 : AstToken , IInterfaceModifier
    {
        public IToken getprotected() { return leftIToken; }

        public InterfaceModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 190:  InterfaceModifier ::= private
     *</b>
     */
    public class InterfaceModifier2 : AstToken , IInterfaceModifier
    {
        public IToken getprivate() { return leftIToken; }

        public InterfaceModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 191:  InterfaceModifier ::= abstract
     *</b>
     */
    public class InterfaceModifier3 : AstToken , IInterfaceModifier
    {
        public IToken getabstract() { return leftIToken; }

        public InterfaceModifier3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 192:  InterfaceModifier ::= static
     *</b>
     */
    public class InterfaceModifier4 : AstToken , IInterfaceModifier
    {
        public IToken getstatic() { return leftIToken; }

        public InterfaceModifier4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 193:  InterfaceModifier ::= strictfp
     *</b>
     */
    public class InterfaceModifier5 : AstToken , IInterfaceModifier
    {
        public IToken getstrictfp() { return leftIToken; }

        public InterfaceModifier5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 194:  ExtendsInterfaces ::= extends InterfaceType
     *</b>
     */
    public class ExtendsInterfaces0 : Ast , IExtendsInterfaces
    {
        private AstToken _extends;
        private InterfaceType _InterfaceType;

        public AstToken getextends() { return _extends; }
        public void setextends(AstToken _extends) { this._extends = _extends; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }
        public void setInterfaceType(InterfaceType _InterfaceType) { this._InterfaceType = _InterfaceType; }

        public ExtendsInterfaces0(IToken leftIToken, IToken rightIToken,
                                  AstToken _extends,
                                  InterfaceType _InterfaceType)
            :base(leftIToken, rightIToken)

        {
            this._extends = _extends;
            ((Ast) _extends).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_extends != null)  list.Add(_extends);
            if(_InterfaceType != null)  list.Add(_InterfaceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExtendsInterfaces0)) return false;
            if (! base.Equals(o)) return false;
            ExtendsInterfaces0 other = (ExtendsInterfaces0) o;
            if (! _extends.Equals(other._extends)) return false;
            if (! _InterfaceType.Equals(other._InterfaceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_extends.GetHashCode());
            hash = hash * 31 + (_InterfaceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
     *</b>
     */
    public class ExtendsInterfaces1 : Ast , IExtendsInterfaces
    {
        private IExtendsInterfaces _ExtendsInterfaces;
        private AstToken _COMMA;
        private InterfaceType _InterfaceType;

        public IExtendsInterfaces getExtendsInterfaces() { return _ExtendsInterfaces; }
        public void setExtendsInterfaces(IExtendsInterfaces _ExtendsInterfaces) { this._ExtendsInterfaces = _ExtendsInterfaces; }
        public AstToken getCOMMA() { return _COMMA; }
        public void setCOMMA(AstToken _COMMA) { this._COMMA = _COMMA; }
        public InterfaceType getInterfaceType() { return _InterfaceType; }
        public void setInterfaceType(InterfaceType _InterfaceType) { this._InterfaceType = _InterfaceType; }

        public ExtendsInterfaces1(IToken leftIToken, IToken rightIToken,
                                  IExtendsInterfaces _ExtendsInterfaces,
                                  AstToken _COMMA,
                                  InterfaceType _InterfaceType)
            :base(leftIToken, rightIToken)

        {
            this._ExtendsInterfaces = _ExtendsInterfaces;
            ((Ast) _ExtendsInterfaces).setParent(this);
            this._COMMA = _COMMA;
            ((Ast) _COMMA).setParent(this);
            this._InterfaceType = _InterfaceType;
            ((Ast) _InterfaceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ExtendsInterfaces != null)  list.Add(_ExtendsInterfaces);
            if(_COMMA != null)  list.Add(_COMMA);
            if(_InterfaceType != null)  list.Add(_InterfaceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ExtendsInterfaces1)) return false;
            if (! base.Equals(o)) return false;
            ExtendsInterfaces1 other = (ExtendsInterfaces1) o;
            if (! _ExtendsInterfaces.Equals(other._ExtendsInterfaces)) return false;
            if (! _COMMA.Equals(other._COMMA)) return false;
            if (! _InterfaceType.Equals(other._InterfaceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ExtendsInterfaces.GetHashCode());
            hash = hash * 31 + (_COMMA.GetHashCode());
            hash = hash * 31 + (_InterfaceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 208:  ConstantModifier ::= public
     *</b>
     */
    public class ConstantModifier0 : AstToken , IConstantModifier
    {
        public IToken getpublic() { return leftIToken; }

        public ConstantModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 209:  ConstantModifier ::= static
     *</b>
     */
    public class ConstantModifier1 : AstToken , IConstantModifier
    {
        public IToken getstatic() { return leftIToken; }

        public ConstantModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 210:  ConstantModifier ::= final
     *</b>
     */
    public class ConstantModifier2 : AstToken , IConstantModifier
    {
        public IToken getfinal() { return leftIToken; }

        public ConstantModifier2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 215:  AbstractMethodModifier ::= public
     *</b>
     */
    public class AbstractMethodModifier0 : AstToken , IAbstractMethodModifier
    {
        public IToken getpublic() { return leftIToken; }

        public AbstractMethodModifier0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 216:  AbstractMethodModifier ::= abstract
     *</b>
     */
    public class AbstractMethodModifier1 : AstToken , IAbstractMethodModifier
    {
        public IToken getabstract() { return leftIToken; }

        public AbstractMethodModifier1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
     *</b>
     */
    public class AnnotationTypeElementDeclaration0 : Ast , IAnnotationTypeElementDeclaration
    {
        private IAbstractMethodModifiersopt _AbstractMethodModifiersopt;
        private IType _Type;
        private identifier _identifier;
        private AstToken _LPAREN;
        private AstToken _RPAREN;
        private DefaultValue _DefaultValueopt;
        private AstToken _SEMICOLON;

        /**
         * The value returned by <b>getAbstractMethodModifiersopt</b> may be <b>null</b>
         */
        public IAbstractMethodModifiersopt getAbstractMethodModifiersopt() { return _AbstractMethodModifiersopt; }
        public void setAbstractMethodModifiersopt(IAbstractMethodModifiersopt _AbstractMethodModifiersopt) { this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt; }
        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getDefaultValueopt</b> may be <b>null</b>
         */
        public DefaultValue getDefaultValueopt() { return _DefaultValueopt; }
        public void setDefaultValueopt(DefaultValue _DefaultValueopt) { this._DefaultValueopt = _DefaultValueopt; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public AnnotationTypeElementDeclaration0(IToken leftIToken, IToken rightIToken,
                                                 IAbstractMethodModifiersopt _AbstractMethodModifiersopt,
                                                 IType _Type,
                                                 identifier _identifier,
                                                 AstToken _LPAREN,
                                                 AstToken _RPAREN,
                                                 DefaultValue _DefaultValueopt,
                                                 AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._AbstractMethodModifiersopt = _AbstractMethodModifiersopt;
            if (_AbstractMethodModifiersopt != null) ((Ast) _AbstractMethodModifiersopt).setParent(this);
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._DefaultValueopt = _DefaultValueopt;
            if (_DefaultValueopt != null) ((Ast) _DefaultValueopt).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AbstractMethodModifiersopt != null)  list.Add(_AbstractMethodModifiersopt);
            if(_Type != null)  list.Add(_Type);
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_DefaultValueopt != null)  list.Add(_DefaultValueopt);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AnnotationTypeElementDeclaration0)) return false;
            if (! base.Equals(o)) return false;
            AnnotationTypeElementDeclaration0 other = (AnnotationTypeElementDeclaration0) o;
            if (_AbstractMethodModifiersopt == null)
                if (other._AbstractMethodModifiersopt != null) return false;
                else{}// continue
            else if (! _AbstractMethodModifiersopt.Equals(other._AbstractMethodModifiersopt)) return false;
            if (! _Type.Equals(other._Type)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (_DefaultValueopt == null)
                if (other._DefaultValueopt != null) return false;
                else{}// continue
            else if (! _DefaultValueopt.Equals(other._DefaultValueopt)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AbstractMethodModifiersopt == null ? 0 : _AbstractMethodModifiersopt.GetHashCode());
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_DefaultValueopt == null ? 0 : _DefaultValueopt.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 227:  AnnotationTypeElementDeclaration ::= ;
     *</b>
     */
    public class AnnotationTypeElementDeclaration1 : AstToken , IAnnotationTypeElementDeclaration
    {
        public IToken getSEMICOLON() { return leftIToken; }

        public AnnotationTypeElementDeclaration1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 295:  AssertStatement ::= assert Expression ;
     *</b>
     */
    public class AssertStatement0 : Ast , IAssertStatement
    {
        private AstToken _assert;
        private IExpression _Expression;
        private AstToken _SEMICOLON;

        public AstToken getassert() { return _assert; }
        public void setassert(AstToken _assert) { this._assert = _assert; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public AssertStatement0(IToken leftIToken, IToken rightIToken,
                                AstToken _assert,
                                IExpression _Expression,
                                AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._assert = _assert;
            ((Ast) _assert).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_assert != null)  list.Add(_assert);
            if(_Expression != null)  list.Add(_Expression);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AssertStatement0)) return false;
            if (! base.Equals(o)) return false;
            AssertStatement0 other = (AssertStatement0) o;
            if (! _assert.Equals(other._assert)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_assert.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 296:  AssertStatement ::= assert Expression : Expression ;
     *</b>
     */
    public class AssertStatement1 : Ast , IAssertStatement
    {
        private AstToken _assert;
        private IExpression _Expression;
        private AstToken _COLON;
        private IExpression _Expression4;
        private AstToken _SEMICOLON;

        public AstToken getassert() { return _assert; }
        public void setassert(AstToken _assert) { this._assert = _assert; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }
        public IExpression getExpression4() { return _Expression4; }
        public void setExpression4(IExpression _Expression4) { this._Expression4 = _Expression4; }
        public AstToken getSEMICOLON() { return _SEMICOLON; }
        public void setSEMICOLON(AstToken _SEMICOLON) { this._SEMICOLON = _SEMICOLON; }

        public AssertStatement1(IToken leftIToken, IToken rightIToken,
                                AstToken _assert,
                                IExpression _Expression,
                                AstToken _COLON,
                                IExpression _Expression4,
                                AstToken _SEMICOLON)
            :base(leftIToken, rightIToken)

        {
            this._assert = _assert;
            ((Ast) _assert).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            this._Expression4 = _Expression4;
            ((Ast) _Expression4).setParent(this);
            this._SEMICOLON = _SEMICOLON;
            ((Ast) _SEMICOLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_assert != null)  list.Add(_assert);
            if(_Expression != null)  list.Add(_Expression);
            if(_COLON != null)  list.Add(_COLON);
            if(_Expression4 != null)  list.Add(_Expression4);
            if(_SEMICOLON != null)  list.Add(_SEMICOLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AssertStatement1)) return false;
            if (! base.Equals(o)) return false;
            AssertStatement1 other = (AssertStatement1) o;
            if (! _assert.Equals(other._assert)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            if (! _Expression4.Equals(other._Expression4)) return false;
            if (! _SEMICOLON.Equals(other._SEMICOLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_assert.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            hash = hash * 31 + (_Expression4.GetHashCode());
            hash = hash * 31 + (_SEMICOLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 304:  SwitchLabel ::= case ConstantExpression :
     *</b>
     */
    public class SwitchLabel0 : Ast , ISwitchLabel
    {
        private AstToken _case;
        private IConstantExpression _ConstantExpression;
        private AstToken _COLON;

        public AstToken getcase() { return _case; }
        public void setcase(AstToken _case) { this._case = _case; }
        public IConstantExpression getConstantExpression() { return _ConstantExpression; }
        public void setConstantExpression(IConstantExpression _ConstantExpression) { this._ConstantExpression = _ConstantExpression; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }

        public SwitchLabel0(IToken leftIToken, IToken rightIToken,
                            AstToken _case,
                            IConstantExpression _ConstantExpression,
                            AstToken _COLON)
            :base(leftIToken, rightIToken)

        {
            this._case = _case;
            ((Ast) _case).setParent(this);
            this._ConstantExpression = _ConstantExpression;
            ((Ast) _ConstantExpression).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_case != null)  list.Add(_case);
            if(_ConstantExpression != null)  list.Add(_ConstantExpression);
            if(_COLON != null)  list.Add(_COLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchLabel0)) return false;
            if (! base.Equals(o)) return false;
            SwitchLabel0 other = (SwitchLabel0) o;
            if (! _case.Equals(other._case)) return false;
            if (! _ConstantExpression.Equals(other._ConstantExpression)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_case.GetHashCode());
            hash = hash * 31 + (_ConstantExpression.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 305:  SwitchLabel ::= case EnumConstant :
     *</b>
     */
    public class SwitchLabel1 : Ast , ISwitchLabel
    {
        private AstToken _case;
        private IEnumConstant _EnumConstant;
        private AstToken _COLON;

        public AstToken getcase() { return _case; }
        public void setcase(AstToken _case) { this._case = _case; }
        public IEnumConstant getEnumConstant() { return _EnumConstant; }
        public void setEnumConstant(IEnumConstant _EnumConstant) { this._EnumConstant = _EnumConstant; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }

        public SwitchLabel1(IToken leftIToken, IToken rightIToken,
                            AstToken _case,
                            IEnumConstant _EnumConstant,
                            AstToken _COLON)
            :base(leftIToken, rightIToken)

        {
            this._case = _case;
            ((Ast) _case).setParent(this);
            this._EnumConstant = _EnumConstant;
            ((Ast) _EnumConstant).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_case != null)  list.Add(_case);
            if(_EnumConstant != null)  list.Add(_EnumConstant);
            if(_COLON != null)  list.Add(_COLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchLabel1)) return false;
            if (! base.Equals(o)) return false;
            SwitchLabel1 other = (SwitchLabel1) o;
            if (! _case.Equals(other._case)) return false;
            if (! _EnumConstant.Equals(other._EnumConstant)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_case.GetHashCode());
            hash = hash * 31 + (_EnumConstant.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 306:  SwitchLabel ::= default :
     *</b>
     */
    public class SwitchLabel2 : Ast , ISwitchLabel
    {
        private AstToken _default;
        private AstToken _COLON;

        public AstToken getdefault() { return _default; }
        public void setdefault(AstToken _default) { this._default = _default; }
        public AstToken getCOLON() { return _COLON; }
        public void setCOLON(AstToken _COLON) { this._COLON = _COLON; }

        public SwitchLabel2(IToken leftIToken, IToken rightIToken,
                            AstToken _default,
                            AstToken _COLON)
            :base(leftIToken, rightIToken)

        {
            this._default = _default;
            ((Ast) _default).setParent(this);
            this._COLON = _COLON;
            ((Ast) _COLON).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_default != null)  list.Add(_default);
            if(_COLON != null)  list.Add(_COLON);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is SwitchLabel2)) return false;
            if (! base.Equals(o)) return false;
            SwitchLabel2 other = (SwitchLabel2) o;
            if (! _default.Equals(other._default)) return false;
            if (! _COLON.Equals(other._COLON)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_default.GetHashCode());
            hash = hash * 31 + (_COLON.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 326:  TryStatement ::= try Block Catches
     *</b>
     */
    public class TryStatement0 : Ast , ITryStatement
    {
        private AstToken _try;
        private Block _Block;
        private ICatches _Catches;

        public AstToken gettry() { return _try; }
        public void settry(AstToken _try) { this._try = _try; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }
        public ICatches getCatches() { return _Catches; }
        public void setCatches(ICatches _Catches) { this._Catches = _Catches; }

        public TryStatement0(IToken leftIToken, IToken rightIToken,
                             AstToken _try,
                             Block _Block,
                             ICatches _Catches)
            :base(leftIToken, rightIToken)

        {
            this._try = _try;
            ((Ast) _try).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            this._Catches = _Catches;
            ((Ast) _Catches).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_try != null)  list.Add(_try);
            if(_Block != null)  list.Add(_Block);
            if(_Catches != null)  list.Add(_Catches);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TryStatement0)) return false;
            if (! base.Equals(o)) return false;
            TryStatement0 other = (TryStatement0) o;
            if (! _try.Equals(other._try)) return false;
            if (! _Block.Equals(other._Block)) return false;
            if (! _Catches.Equals(other._Catches)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_try.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            hash = hash * 31 + (_Catches.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 327:  TryStatement ::= try Block Catchesopt Finally
     *</b>
     */
    public class TryStatement1 : Ast , ITryStatement
    {
        private AstToken _try;
        private Block _Block;
        private ICatchesopt _Catchesopt;
        private Finally _Finally;

        public AstToken gettry() { return _try; }
        public void settry(AstToken _try) { this._try = _try; }
        public Block getBlock() { return _Block; }
        public void setBlock(Block _Block) { this._Block = _Block; }
        /**
         * The value returned by <b>getCatchesopt</b> may be <b>null</b>
         */
        public ICatchesopt getCatchesopt() { return _Catchesopt; }
        public void setCatchesopt(ICatchesopt _Catchesopt) { this._Catchesopt = _Catchesopt; }
        public Finally getFinally() { return _Finally; }
        public void setFinally(Finally _Finally) { this._Finally = _Finally; }

        public TryStatement1(IToken leftIToken, IToken rightIToken,
                             AstToken _try,
                             Block _Block,
                             ICatchesopt _Catchesopt,
                             Finally _Finally)
            :base(leftIToken, rightIToken)

        {
            this._try = _try;
            ((Ast) _try).setParent(this);
            this._Block = _Block;
            ((Ast) _Block).setParent(this);
            this._Catchesopt = _Catchesopt;
            if (_Catchesopt != null) ((Ast) _Catchesopt).setParent(this);
            this._Finally = _Finally;
            ((Ast) _Finally).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_try != null)  list.Add(_try);
            if(_Block != null)  list.Add(_Block);
            if(_Catchesopt != null)  list.Add(_Catchesopt);
            if(_Finally != null)  list.Add(_Finally);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is TryStatement1)) return false;
            if (! base.Equals(o)) return false;
            TryStatement1 other = (TryStatement1) o;
            if (! _try.Equals(other._try)) return false;
            if (! _Block.Equals(other._Block)) return false;
            if (_Catchesopt == null)
                if (other._Catchesopt != null) return false;
                else{}// continue
            else if (! _Catchesopt.Equals(other._Catchesopt)) return false;
            if (! _Finally.Equals(other._Finally)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_try.GetHashCode());
            hash = hash * 31 + (_Block.GetHashCode());
            hash = hash * 31 + (_Catchesopt == null ? 0 : _Catchesopt.GetHashCode());
            hash = hash * 31 + (_Finally.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 335:  PrimaryNoNewArray ::= Type . class
     *</b>
     */
    public class PrimaryNoNewArray0 : Ast , IPrimaryNoNewArray
    {
        private IType _Type;
        private AstToken _DOT;
        private AstToken _class;

        public IType getType() { return _Type; }
        public void setType(IType _Type) { this._Type = _Type; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getclass() { return _class; }
        public void setclass(AstToken _class) { this._class = _class; }

        public PrimaryNoNewArray0(IToken leftIToken, IToken rightIToken,
                                  IType _Type,
                                  AstToken _DOT,
                                  AstToken _class)
            :base(leftIToken, rightIToken)

        {
            this._Type = _Type;
            ((Ast) _Type).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Type != null)  list.Add(_Type);
            if(_DOT != null)  list.Add(_DOT);
            if(_class != null)  list.Add(_class);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PrimaryNoNewArray0)) return false;
            if (! base.Equals(o)) return false;
            PrimaryNoNewArray0 other = (PrimaryNoNewArray0) o;
            if (! _Type.Equals(other._Type)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _class.Equals(other._class)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Type.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_class.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 336:  PrimaryNoNewArray ::= void . class
     *</b>
     */
    public class PrimaryNoNewArray1 : Ast , IPrimaryNoNewArray
    {
        private AstToken _void;
        private AstToken _DOT;
        private AstToken _class;

        public AstToken getvoid() { return _void; }
        public void setvoid(AstToken _void) { this._void = _void; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getclass() { return _class; }
        public void setclass(AstToken _class) { this._class = _class; }

        public PrimaryNoNewArray1(IToken leftIToken, IToken rightIToken,
                                  AstToken _void,
                                  AstToken _DOT,
                                  AstToken _class)
            :base(leftIToken, rightIToken)

        {
            this._void = _void;
            ((Ast) _void).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._class = _class;
            ((Ast) _class).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_void != null)  list.Add(_void);
            if(_DOT != null)  list.Add(_DOT);
            if(_class != null)  list.Add(_class);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PrimaryNoNewArray1)) return false;
            if (! base.Equals(o)) return false;
            PrimaryNoNewArray1 other = (PrimaryNoNewArray1) o;
            if (! _void.Equals(other._void)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _class.Equals(other._class)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_void.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_class.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 337:  PrimaryNoNewArray ::= this
     *</b>
     */
    public class PrimaryNoNewArray2 : AstToken , IPrimaryNoNewArray
    {
        public IToken getthis() { return leftIToken; }

        public PrimaryNoNewArray2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 338:  PrimaryNoNewArray ::= ClassName . this
     *</b>
     */
    public class PrimaryNoNewArray3 : Ast , IPrimaryNoNewArray
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _this;

        public IClassName getClassName() { return _ClassName; }
        public void setClassName(IClassName _ClassName) { this._ClassName = _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getthis() { return _this; }
        public void setthis(AstToken _this) { this._this = _this; }

        public PrimaryNoNewArray3(IToken leftIToken, IToken rightIToken,
                                  IClassName _ClassName,
                                  AstToken _DOT,
                                  AstToken _this)
            :base(leftIToken, rightIToken)

        {
            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._this = _this;
            ((Ast) _this).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassName != null)  list.Add(_ClassName);
            if(_DOT != null)  list.Add(_DOT);
            if(_this != null)  list.Add(_this);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PrimaryNoNewArray3)) return false;
            if (! base.Equals(o)) return false;
            PrimaryNoNewArray3 other = (PrimaryNoNewArray3) o;
            if (! _ClassName.Equals(other._ClassName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _this.Equals(other._this)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_this.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 339:  PrimaryNoNewArray ::= ( Expression )
     *</b>
     */
    public class PrimaryNoNewArray4 : Ast , IPrimaryNoNewArray
    {
        private AstToken _LPAREN;
        private IExpression _Expression;
        private AstToken _RPAREN;

        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public PrimaryNoNewArray4(IToken leftIToken, IToken rightIToken,
                                  AstToken _LPAREN,
                                  IExpression _Expression,
                                  AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_Expression != null)  list.Add(_Expression);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is PrimaryNoNewArray4)) return false;
            if (! base.Equals(o)) return false;
            PrimaryNoNewArray4 other = (PrimaryNoNewArray4) o;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 344:  Literal ::= IntegerLiteral
     *</b>
     */
    public class Literal0 : AstToken , ILiteral
    {
        public IToken getIntegerLiteral() { return leftIToken; }

        public Literal0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 345:  Literal ::= LongLiteral
     *</b>
     */
    public class Literal1 : AstToken , ILiteral
    {
        public IToken getLongLiteral() { return leftIToken; }

        public Literal1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 346:  Literal ::= FloatingPointLiteral
     *</b>
     */
    public class Literal2 : AstToken , ILiteral
    {
        public IToken getFloatingPointLiteral() { return leftIToken; }

        public Literal2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 347:  Literal ::= DoubleLiteral
     *</b>
     */
    public class Literal3 : AstToken , ILiteral
    {
        public IToken getDoubleLiteral() { return leftIToken; }

        public Literal3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 349:  Literal ::= CharacterLiteral
     *</b>
     */
    public class Literal4 : AstToken , ILiteral
    {
        public IToken getCharacterLiteral() { return leftIToken; }

        public Literal4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 350:  Literal ::= StringLiteral
     *</b>
     */
    public class Literal5 : AstToken , ILiteral
    {
        public IToken getStringLiteral() { return leftIToken; }

        public Literal5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 351:  Literal ::= null
     *</b>
     */
    public class Literal6 : AstToken , ILiteral
    {
        public IToken getnull() { return leftIToken; }

        public Literal6(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 352:  BooleanLiteral ::= true
     *</b>
     */
    public class BooleanLiteral0 : AstToken , IBooleanLiteral
    {
        public IToken gettrue() { return leftIToken; }

        public BooleanLiteral0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 353:  BooleanLiteral ::= false
     *</b>
     */
    public class BooleanLiteral1 : AstToken , IBooleanLiteral
    {
        public IToken getfalse() { return leftIToken; }

        public BooleanLiteral1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    public class ClassInstanceCreationExpression0 : Ast , IClassInstanceCreationExpression
    {
        private AstToken _new;
        private TypeArguments _TypeArgumentsopt;
        private ClassType _ClassOrInterfaceType;
        private TypeArguments _TypeArgumentsopt4;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private ClassBody _ClassBodyopt;

        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public void setClassOrInterfaceType(ClassType _ClassOrInterfaceType) { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        /**
         * The value returned by <b>getTypeArgumentsopt4</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt4() { return _TypeArgumentsopt4; }
        public void setTypeArgumentsopt4(TypeArguments _TypeArgumentsopt4) { this._TypeArgumentsopt4 = _TypeArgumentsopt4; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }
        public void setClassBodyopt(ClassBody _ClassBodyopt) { this._ClassBodyopt = _ClassBodyopt; }

        public ClassInstanceCreationExpression0(IToken leftIToken, IToken rightIToken,
                                                AstToken _new,
                                                TypeArguments _TypeArgumentsopt,
                                                ClassType _ClassOrInterfaceType,
                                                TypeArguments _TypeArgumentsopt4,
                                                AstToken _LPAREN,
                                                IArgumentListopt _ArgumentListopt,
                                                AstToken _RPAREN,
                                                ClassBody _ClassBodyopt)
            :base(leftIToken, rightIToken)

        {
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._TypeArgumentsopt4 = _TypeArgumentsopt4;
            if (_TypeArgumentsopt4 != null) ((Ast) _TypeArgumentsopt4).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_new != null)  list.Add(_new);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_ClassOrInterfaceType != null)  list.Add(_ClassOrInterfaceType);
            if(_TypeArgumentsopt4 != null)  list.Add(_TypeArgumentsopt4);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_ClassBodyopt != null)  list.Add(_ClassBodyopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassInstanceCreationExpression0)) return false;
            if (! base.Equals(o)) return false;
            ClassInstanceCreationExpression0 other = (ClassInstanceCreationExpression0) o;
            if (! _new.Equals(other._new)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _ClassOrInterfaceType.Equals(other._ClassOrInterfaceType)) return false;
            if (_TypeArgumentsopt4 == null)
                if (other._TypeArgumentsopt4 != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt4.Equals(other._TypeArgumentsopt4)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else{}// continue
            else if (! _ClassBodyopt.Equals(other._ClassBodyopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt4 == null ? 0 : _TypeArgumentsopt4.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
     *</b>
     */
    public class ClassInstanceCreationExpression1 : Ast , IClassInstanceCreationExpression
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private AstToken _new;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private TypeArguments _TypeArgumentsopt6;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;
        private ClassBody _ClassBodyopt;

        public IPrimary getPrimary() { return _Primary; }
        public void setPrimary(IPrimary _Primary) { this._Primary = _Primary; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        /**
         * The value returned by <b>getTypeArgumentsopt6</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt6() { return _TypeArgumentsopt6; }
        public void setTypeArgumentsopt6(TypeArguments _TypeArgumentsopt6) { this._TypeArgumentsopt6 = _TypeArgumentsopt6; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        /**
         * The value returned by <b>getClassBodyopt</b> may be <b>null</b>
         */
        public ClassBody getClassBodyopt() { return _ClassBodyopt; }
        public void setClassBodyopt(ClassBody _ClassBodyopt) { this._ClassBodyopt = _ClassBodyopt; }

        public ClassInstanceCreationExpression1(IToken leftIToken, IToken rightIToken,
                                                IPrimary _Primary,
                                                AstToken _DOT,
                                                AstToken _new,
                                                TypeArguments _TypeArgumentsopt,
                                                identifier _identifier,
                                                TypeArguments _TypeArgumentsopt6,
                                                AstToken _LPAREN,
                                                IArgumentListopt _ArgumentListopt,
                                                AstToken _RPAREN,
                                                ClassBody _ClassBodyopt)
            :base(leftIToken, rightIToken)

        {
            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._TypeArgumentsopt6 = _TypeArgumentsopt6;
            if (_TypeArgumentsopt6 != null) ((Ast) _TypeArgumentsopt6).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._ClassBodyopt = _ClassBodyopt;
            if (_ClassBodyopt != null) ((Ast) _ClassBodyopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Primary != null)  list.Add(_Primary);
            if(_DOT != null)  list.Add(_DOT);
            if(_new != null)  list.Add(_new);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_identifier != null)  list.Add(_identifier);
            if(_TypeArgumentsopt6 != null)  list.Add(_TypeArgumentsopt6);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_ClassBodyopt != null)  list.Add(_ClassBodyopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ClassInstanceCreationExpression1)) return false;
            if (! base.Equals(o)) return false;
            ClassInstanceCreationExpression1 other = (ClassInstanceCreationExpression1) o;
            if (! _Primary.Equals(other._Primary)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _new.Equals(other._new)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (_TypeArgumentsopt6 == null)
                if (other._TypeArgumentsopt6 != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt6.Equals(other._TypeArgumentsopt6)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (_ClassBodyopt == null)
                if (other._ClassBodyopt != null) return false;
                else{}// continue
            else if (! _ClassBodyopt.Equals(other._ClassBodyopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Primary.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt6 == null ? 0 : _TypeArgumentsopt6.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_ClassBodyopt == null ? 0 : _ClassBodyopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
     *</b>
     */
    public class ArrayCreationExpression0 : Ast , IArrayCreationExpression
    {
        private AstToken _new;
        private IPrimitiveType _PrimitiveType;
        private IDimExprs _DimExprs;
        private IDimsopt _Dimsopt;

        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        public void setPrimitiveType(IPrimitiveType _PrimitiveType) { this._PrimitiveType = _PrimitiveType; }
        public IDimExprs getDimExprs() { return _DimExprs; }
        public void setDimExprs(IDimExprs _DimExprs) { this._DimExprs = _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }
        public void setDimsopt(IDimsopt _Dimsopt) { this._Dimsopt = _Dimsopt; }

        public ArrayCreationExpression0(IToken leftIToken, IToken rightIToken,
                                        AstToken _new,
                                        IPrimitiveType _PrimitiveType,
                                        IDimExprs _DimExprs,
                                        IDimsopt _Dimsopt)
            :base(leftIToken, rightIToken)

        {
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_new != null)  list.Add(_new);
            if(_PrimitiveType != null)  list.Add(_PrimitiveType);
            if(_DimExprs != null)  list.Add(_DimExprs);
            if(_Dimsopt != null)  list.Add(_Dimsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayCreationExpression0)) return false;
            if (! base.Equals(o)) return false;
            ArrayCreationExpression0 other = (ArrayCreationExpression0) o;
            if (! _new.Equals(other._new)) return false;
            if (! _PrimitiveType.Equals(other._PrimitiveType)) return false;
            if (! _DimExprs.Equals(other._DimExprs)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else{}// continue
            else if (! _Dimsopt.Equals(other._Dimsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_PrimitiveType.GetHashCode());
            hash = hash * 31 + (_DimExprs.GetHashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
     *</b>
     */
    public class ArrayCreationExpression1 : Ast , IArrayCreationExpression
    {
        private AstToken _new;
        private ClassType _ClassOrInterfaceType;
        private IDimExprs _DimExprs;
        private IDimsopt _Dimsopt;

        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public void setClassOrInterfaceType(ClassType _ClassOrInterfaceType) { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        public IDimExprs getDimExprs() { return _DimExprs; }
        public void setDimExprs(IDimExprs _DimExprs) { this._DimExprs = _DimExprs; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }
        public void setDimsopt(IDimsopt _Dimsopt) { this._Dimsopt = _Dimsopt; }

        public ArrayCreationExpression1(IToken leftIToken, IToken rightIToken,
                                        AstToken _new,
                                        ClassType _ClassOrInterfaceType,
                                        IDimExprs _DimExprs,
                                        IDimsopt _Dimsopt)
            :base(leftIToken, rightIToken)

        {
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._DimExprs = _DimExprs;
            ((Ast) _DimExprs).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_new != null)  list.Add(_new);
            if(_ClassOrInterfaceType != null)  list.Add(_ClassOrInterfaceType);
            if(_DimExprs != null)  list.Add(_DimExprs);
            if(_Dimsopt != null)  list.Add(_Dimsopt);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayCreationExpression1)) return false;
            if (! base.Equals(o)) return false;
            ArrayCreationExpression1 other = (ArrayCreationExpression1) o;
            if (! _new.Equals(other._new)) return false;
            if (! _ClassOrInterfaceType.Equals(other._ClassOrInterfaceType)) return false;
            if (! _DimExprs.Equals(other._DimExprs)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else{}// continue
            else if (! _Dimsopt.Equals(other._Dimsopt)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.GetHashCode());
            hash = hash * 31 + (_DimExprs.GetHashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
     *</b>
     */
    public class ArrayCreationExpression2 : Ast , IArrayCreationExpression
    {
        private AstToken _new;
        private IPrimitiveType _PrimitiveType;
        private IDims _Dims;
        private ArrayInitializer _ArrayInitializer;

        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        public void setPrimitiveType(IPrimitiveType _PrimitiveType) { this._PrimitiveType = _PrimitiveType; }
        public IDims getDims() { return _Dims; }
        public void setDims(IDims _Dims) { this._Dims = _Dims; }
        public ArrayInitializer getArrayInitializer() { return _ArrayInitializer; }
        public void setArrayInitializer(ArrayInitializer _ArrayInitializer) { this._ArrayInitializer = _ArrayInitializer; }

        public ArrayCreationExpression2(IToken leftIToken, IToken rightIToken,
                                        AstToken _new,
                                        IPrimitiveType _PrimitiveType,
                                        IDims _Dims,
                                        ArrayInitializer _ArrayInitializer)
            :base(leftIToken, rightIToken)

        {
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            ((Ast) _ArrayInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_new != null)  list.Add(_new);
            if(_PrimitiveType != null)  list.Add(_PrimitiveType);
            if(_Dims != null)  list.Add(_Dims);
            if(_ArrayInitializer != null)  list.Add(_ArrayInitializer);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayCreationExpression2)) return false;
            if (! base.Equals(o)) return false;
            ArrayCreationExpression2 other = (ArrayCreationExpression2) o;
            if (! _new.Equals(other._new)) return false;
            if (! _PrimitiveType.Equals(other._PrimitiveType)) return false;
            if (! _Dims.Equals(other._Dims)) return false;
            if (! _ArrayInitializer.Equals(other._ArrayInitializer)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_PrimitiveType.GetHashCode());
            hash = hash * 31 + (_Dims.GetHashCode());
            hash = hash * 31 + (_ArrayInitializer.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
     *</b>
     */
    public class ArrayCreationExpression3 : Ast , IArrayCreationExpression
    {
        private AstToken _new;
        private ClassType _ClassOrInterfaceType;
        private IDims _Dims;
        private ArrayInitializer _ArrayInitializer;

        public AstToken getnew() { return _new; }
        public void setnew(AstToken _new) { this._new = _new; }
        public ClassType getClassOrInterfaceType() { return _ClassOrInterfaceType; }
        public void setClassOrInterfaceType(ClassType _ClassOrInterfaceType) { this._ClassOrInterfaceType = _ClassOrInterfaceType; }
        public IDims getDims() { return _Dims; }
        public void setDims(IDims _Dims) { this._Dims = _Dims; }
        public ArrayInitializer getArrayInitializer() { return _ArrayInitializer; }
        public void setArrayInitializer(ArrayInitializer _ArrayInitializer) { this._ArrayInitializer = _ArrayInitializer; }

        public ArrayCreationExpression3(IToken leftIToken, IToken rightIToken,
                                        AstToken _new,
                                        ClassType _ClassOrInterfaceType,
                                        IDims _Dims,
                                        ArrayInitializer _ArrayInitializer)
            :base(leftIToken, rightIToken)

        {
            this._new = _new;
            ((Ast) _new).setParent(this);
            this._ClassOrInterfaceType = _ClassOrInterfaceType;
            ((Ast) _ClassOrInterfaceType).setParent(this);
            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._ArrayInitializer = _ArrayInitializer;
            ((Ast) _ArrayInitializer).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_new != null)  list.Add(_new);
            if(_ClassOrInterfaceType != null)  list.Add(_ClassOrInterfaceType);
            if(_Dims != null)  list.Add(_Dims);
            if(_ArrayInitializer != null)  list.Add(_ArrayInitializer);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayCreationExpression3)) return false;
            if (! base.Equals(o)) return false;
            ArrayCreationExpression3 other = (ArrayCreationExpression3) o;
            if (! _new.Equals(other._new)) return false;
            if (! _ClassOrInterfaceType.Equals(other._ClassOrInterfaceType)) return false;
            if (! _Dims.Equals(other._Dims)) return false;
            if (! _ArrayInitializer.Equals(other._ArrayInitializer)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_new.GetHashCode());
            hash = hash * 31 + (_ClassOrInterfaceType.GetHashCode());
            hash = hash * 31 + (_Dims.GetHashCode());
            hash = hash * 31 + (_ArrayInitializer.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 365:  Dims ::= [ ]
     *</b>
     */
    public class Dims0 : Ast , IDims
    {
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public Dims0(IToken leftIToken, IToken rightIToken,
                     AstToken _LBRACKET,
                     AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Dims0)) return false;
            if (! base.Equals(o)) return false;
            Dims0 other = (Dims0) o;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 366:  Dims ::= Dims [ ]
     *</b>
     */
    public class Dims1 : Ast , IDims
    {
        private IDims _Dims;
        private AstToken _LBRACKET;
        private AstToken _RBRACKET;

        public IDims getDims() { return _Dims; }
        public void setDims(IDims _Dims) { this._Dims = _Dims; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public Dims1(IToken leftIToken, IToken rightIToken,
                     IDims _Dims,
                     AstToken _LBRACKET,
                     AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._Dims = _Dims;
            ((Ast) _Dims).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Dims != null)  list.Add(_Dims);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is Dims1)) return false;
            if (! base.Equals(o)) return false;
            Dims1 other = (Dims1) o;
            if (! _Dims.Equals(other._Dims)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Dims.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 367:  FieldAccess ::= Primary . identifier
     *</b>
     */
    public class FieldAccess0 : Ast , IFieldAccess
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private identifier _identifier;

        public IPrimary getPrimary() { return _Primary; }
        public void setPrimary(IPrimary _Primary) { this._Primary = _Primary; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public FieldAccess0(IToken leftIToken, IToken rightIToken,
                            IPrimary _Primary,
                            AstToken _DOT,
                            identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Primary != null)  list.Add(_Primary);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FieldAccess0)) return false;
            if (! base.Equals(o)) return false;
            FieldAccess0 other = (FieldAccess0) o;
            if (! _Primary.Equals(other._Primary)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Primary.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 368:  FieldAccess ::= super . identifier
     *</b>
     */
    public class FieldAccess1 : Ast , IFieldAccess
    {
        private AstToken _super;
        private AstToken _DOT;
        private identifier _identifier;

        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public FieldAccess1(IToken leftIToken, IToken rightIToken,
                            AstToken _super,
                            AstToken _DOT,
                            identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_super != null)  list.Add(_super);
            if(_DOT != null)  list.Add(_DOT);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FieldAccess1)) return false;
            if (! base.Equals(o)) return false;
            FieldAccess1 other = (FieldAccess1) o;
            if (! _super.Equals(other._super)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 369:  FieldAccess ::= ClassName . super . identifier
     *</b>
     */
    public class FieldAccess2 : Ast , IFieldAccess
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _super;
        private AstToken _DOT4;
        private identifier _identifier;

        public IClassName getClassName() { return _ClassName; }
        public void setClassName(IClassName _ClassName) { this._ClassName = _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getDOT4() { return _DOT4; }
        public void setDOT4(AstToken _DOT4) { this._DOT4 = _DOT4; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }

        public FieldAccess2(IToken leftIToken, IToken rightIToken,
                            IClassName _ClassName,
                            AstToken _DOT,
                            AstToken _super,
                            AstToken _DOT4,
                            identifier _identifier)
            :base(leftIToken, rightIToken)

        {
            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT4 = _DOT4;
            ((Ast) _DOT4).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassName != null)  list.Add(_ClassName);
            if(_DOT != null)  list.Add(_DOT);
            if(_super != null)  list.Add(_super);
            if(_DOT4 != null)  list.Add(_DOT4);
            if(_identifier != null)  list.Add(_identifier);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is FieldAccess2)) return false;
            if (! base.Equals(o)) return false;
            FieldAccess2 other = (FieldAccess2) o;
            if (! _ClassName.Equals(other._ClassName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _super.Equals(other._super)) return false;
            if (! _DOT4.Equals(other._DOT4)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_DOT4.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
     *</b>
     */
    public class MethodInvocation0 : Ast , IMethodInvocation
    {
        private IMethodName _MethodName;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IMethodName getMethodName() { return _MethodName; }
        public void setMethodName(IMethodName _MethodName) { this._MethodName = _MethodName; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodInvocation0(IToken leftIToken, IToken rightIToken,
                                 IMethodName _MethodName,
                                 AstToken _LPAREN,
                                 IArgumentListopt _ArgumentListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._MethodName = _MethodName;
            ((Ast) _MethodName).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MethodName != null)  list.Add(_MethodName);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodInvocation0)) return false;
            if (! base.Equals(o)) return false;
            MethodInvocation0 other = (MethodInvocation0) o;
            if (! _MethodName.Equals(other._MethodName)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MethodName.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    public class MethodInvocation1 : Ast , IMethodInvocation
    {
        private IPrimary _Primary;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IPrimary getPrimary() { return _Primary; }
        public void setPrimary(IPrimary _Primary) { this._Primary = _Primary; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodInvocation1(IToken leftIToken, IToken rightIToken,
                                 IPrimary _Primary,
                                 AstToken _DOT,
                                 TypeArguments _TypeArgumentsopt,
                                 identifier _identifier,
                                 AstToken _LPAREN,
                                 IArgumentListopt _ArgumentListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._Primary = _Primary;
            ((Ast) _Primary).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_Primary != null)  list.Add(_Primary);
            if(_DOT != null)  list.Add(_DOT);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodInvocation1)) return false;
            if (! base.Equals(o)) return false;
            MethodInvocation1 other = (MethodInvocation1) o;
            if (! _Primary.Equals(other._Primary)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_Primary.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    public class MethodInvocation2 : Ast , IMethodInvocation
    {
        private AstToken _super;
        private AstToken _DOT;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodInvocation2(IToken leftIToken, IToken rightIToken,
                                 AstToken _super,
                                 AstToken _DOT,
                                 TypeArguments _TypeArgumentsopt,
                                 identifier _identifier,
                                 AstToken _LPAREN,
                                 IArgumentListopt _ArgumentListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_super != null)  list.Add(_super);
            if(_DOT != null)  list.Add(_DOT);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodInvocation2)) return false;
            if (! base.Equals(o)) return false;
            MethodInvocation2 other = (MethodInvocation2) o;
            if (! _super.Equals(other._super)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
     *</b>
     */
    public class MethodInvocation3 : Ast , IMethodInvocation
    {
        private IClassName _ClassName;
        private AstToken _DOT;
        private AstToken _super;
        private AstToken _DOT4;
        private TypeArguments _TypeArgumentsopt;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public IClassName getClassName() { return _ClassName; }
        public void setClassName(IClassName _ClassName) { this._ClassName = _ClassName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public AstToken getsuper() { return _super; }
        public void setsuper(AstToken _super) { this._super = _super; }
        public AstToken getDOT4() { return _DOT4; }
        public void setDOT4(AstToken _DOT4) { this._DOT4 = _DOT4; }
        /**
         * The value returned by <b>getTypeArgumentsopt</b> may be <b>null</b>
         */
        public TypeArguments getTypeArgumentsopt() { return _TypeArgumentsopt; }
        public void setTypeArgumentsopt(TypeArguments _TypeArgumentsopt) { this._TypeArgumentsopt = _TypeArgumentsopt; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodInvocation3(IToken leftIToken, IToken rightIToken,
                                 IClassName _ClassName,
                                 AstToken _DOT,
                                 AstToken _super,
                                 AstToken _DOT4,
                                 TypeArguments _TypeArgumentsopt,
                                 identifier _identifier,
                                 AstToken _LPAREN,
                                 IArgumentListopt _ArgumentListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._ClassName = _ClassName;
            ((Ast) _ClassName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._super = _super;
            ((Ast) _super).setParent(this);
            this._DOT4 = _DOT4;
            ((Ast) _DOT4).setParent(this);
            this._TypeArgumentsopt = _TypeArgumentsopt;
            if (_TypeArgumentsopt != null) ((Ast) _TypeArgumentsopt).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ClassName != null)  list.Add(_ClassName);
            if(_DOT != null)  list.Add(_DOT);
            if(_super != null)  list.Add(_super);
            if(_DOT4 != null)  list.Add(_DOT4);
            if(_TypeArgumentsopt != null)  list.Add(_TypeArgumentsopt);
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodInvocation3)) return false;
            if (! base.Equals(o)) return false;
            MethodInvocation3 other = (MethodInvocation3) o;
            if (! _ClassName.Equals(other._ClassName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _super.Equals(other._super)) return false;
            if (! _DOT4.Equals(other._DOT4)) return false;
            if (_TypeArgumentsopt == null)
                if (other._TypeArgumentsopt != null) return false;
                else{}// continue
            else if (! _TypeArgumentsopt.Equals(other._TypeArgumentsopt)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ClassName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_super.GetHashCode());
            hash = hash * 31 + (_DOT4.GetHashCode());
            hash = hash * 31 + (_TypeArgumentsopt == null ? 0 : _TypeArgumentsopt.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
     *</b>
     */
    public class MethodInvocation4 : Ast , IMethodInvocation
    {
        private ITypeName _TypeName;
        private AstToken _DOT;
        private TypeArguments _TypeArguments;
        private identifier _identifier;
        private AstToken _LPAREN;
        private IArgumentListopt _ArgumentListopt;
        private AstToken _RPAREN;

        public ITypeName getTypeName() { return _TypeName; }
        public void setTypeName(ITypeName _TypeName) { this._TypeName = _TypeName; }
        public AstToken getDOT() { return _DOT; }
        public void setDOT(AstToken _DOT) { this._DOT = _DOT; }
        public TypeArguments getTypeArguments() { return _TypeArguments; }
        public void setTypeArguments(TypeArguments _TypeArguments) { this._TypeArguments = _TypeArguments; }
        public identifier getidentifier() { return _identifier; }
        public void setidentifier(identifier _identifier) { this._identifier = _identifier; }
        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        /**
         * The value returned by <b>getArgumentListopt</b> may be <b>null</b>
         */
        public IArgumentListopt getArgumentListopt() { return _ArgumentListopt; }
        public void setArgumentListopt(IArgumentListopt _ArgumentListopt) { this._ArgumentListopt = _ArgumentListopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }

        public MethodInvocation4(IToken leftIToken, IToken rightIToken,
                                 ITypeName _TypeName,
                                 AstToken _DOT,
                                 TypeArguments _TypeArguments,
                                 identifier _identifier,
                                 AstToken _LPAREN,
                                 IArgumentListopt _ArgumentListopt,
                                 AstToken _RPAREN)
            :base(leftIToken, rightIToken)

        {
            this._TypeName = _TypeName;
            ((Ast) _TypeName).setParent(this);
            this._DOT = _DOT;
            ((Ast) _DOT).setParent(this);
            this._TypeArguments = _TypeArguments;
            ((Ast) _TypeArguments).setParent(this);
            this._identifier = _identifier;
            ((Ast) _identifier).setParent(this);
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ArgumentListopt = _ArgumentListopt;
            if (_ArgumentListopt != null) ((Ast) _ArgumentListopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TypeName != null)  list.Add(_TypeName);
            if(_DOT != null)  list.Add(_DOT);
            if(_TypeArguments != null)  list.Add(_TypeArguments);
            if(_identifier != null)  list.Add(_identifier);
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ArgumentListopt != null)  list.Add(_ArgumentListopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MethodInvocation4)) return false;
            if (! base.Equals(o)) return false;
            MethodInvocation4 other = (MethodInvocation4) o;
            if (! _TypeName.Equals(other._TypeName)) return false;
            if (! _DOT.Equals(other._DOT)) return false;
            if (! _TypeArguments.Equals(other._TypeArguments)) return false;
            if (! _identifier.Equals(other._identifier)) return false;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (_ArgumentListopt == null)
                if (other._ArgumentListopt != null) return false;
                else{}// continue
            else if (! _ArgumentListopt.Equals(other._ArgumentListopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TypeName.GetHashCode());
            hash = hash * 31 + (_DOT.GetHashCode());
            hash = hash * 31 + (_TypeArguments.GetHashCode());
            hash = hash * 31 + (_identifier.GetHashCode());
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ArgumentListopt == null ? 0 : _ArgumentListopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
     *</b>
     */
    public class ArrayAccess0 : Ast , IArrayAccess
    {
        private IExpressionName _ExpressionName;
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public IExpressionName getExpressionName() { return _ExpressionName; }
        public void setExpressionName(IExpressionName _ExpressionName) { this._ExpressionName = _ExpressionName; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public ArrayAccess0(IToken leftIToken, IToken rightIToken,
                            IExpressionName _ExpressionName,
                            AstToken _LBRACKET,
                            IExpression _Expression,
                            AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._ExpressionName = _ExpressionName;
            ((Ast) _ExpressionName).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ExpressionName != null)  list.Add(_ExpressionName);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_Expression != null)  list.Add(_Expression);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayAccess0)) return false;
            if (! base.Equals(o)) return false;
            ArrayAccess0 other = (ArrayAccess0) o;
            if (! _ExpressionName.Equals(other._ExpressionName)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ExpressionName.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
     *</b>
     */
    public class ArrayAccess1 : Ast , IArrayAccess
    {
        private IPrimaryNoNewArray _PrimaryNoNewArray;
        private AstToken _LBRACKET;
        private IExpression _Expression;
        private AstToken _RBRACKET;

        public IPrimaryNoNewArray getPrimaryNoNewArray() { return _PrimaryNoNewArray; }
        public void setPrimaryNoNewArray(IPrimaryNoNewArray _PrimaryNoNewArray) { this._PrimaryNoNewArray = _PrimaryNoNewArray; }
        public AstToken getLBRACKET() { return _LBRACKET; }
        public void setLBRACKET(AstToken _LBRACKET) { this._LBRACKET = _LBRACKET; }
        public IExpression getExpression() { return _Expression; }
        public void setExpression(IExpression _Expression) { this._Expression = _Expression; }
        public AstToken getRBRACKET() { return _RBRACKET; }
        public void setRBRACKET(AstToken _RBRACKET) { this._RBRACKET = _RBRACKET; }

        public ArrayAccess1(IToken leftIToken, IToken rightIToken,
                            IPrimaryNoNewArray _PrimaryNoNewArray,
                            AstToken _LBRACKET,
                            IExpression _Expression,
                            AstToken _RBRACKET)
            :base(leftIToken, rightIToken)

        {
            this._PrimaryNoNewArray = _PrimaryNoNewArray;
            ((Ast) _PrimaryNoNewArray).setParent(this);
            this._LBRACKET = _LBRACKET;
            ((Ast) _LBRACKET).setParent(this);
            this._Expression = _Expression;
            ((Ast) _Expression).setParent(this);
            this._RBRACKET = _RBRACKET;
            ((Ast) _RBRACKET).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PrimaryNoNewArray != null)  list.Add(_PrimaryNoNewArray);
            if(_LBRACKET != null)  list.Add(_LBRACKET);
            if(_Expression != null)  list.Add(_Expression);
            if(_RBRACKET != null)  list.Add(_RBRACKET);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ArrayAccess1)) return false;
            if (! base.Equals(o)) return false;
            ArrayAccess1 other = (ArrayAccess1) o;
            if (! _PrimaryNoNewArray.Equals(other._PrimaryNoNewArray)) return false;
            if (! _LBRACKET.Equals(other._LBRACKET)) return false;
            if (! _Expression.Equals(other._Expression)) return false;
            if (! _RBRACKET.Equals(other._RBRACKET)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PrimaryNoNewArray.GetHashCode());
            hash = hash * 31 + (_LBRACKET.GetHashCode());
            hash = hash * 31 + (_Expression.GetHashCode());
            hash = hash * 31 + (_RBRACKET.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 385:  UnaryExpression ::= + UnaryExpression
     *</b>
     */
    public class UnaryExpression0 : Ast , IUnaryExpression
    {
        private AstToken _PLUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getPLUS() { return _PLUS; }
        public void setPLUS(AstToken _PLUS) { this._PLUS = _PLUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public UnaryExpression0(IToken leftIToken, IToken rightIToken,
                                AstToken _PLUS,
                                IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._PLUS = _PLUS;
            ((Ast) _PLUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_PLUS != null)  list.Add(_PLUS);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is UnaryExpression0)) return false;
            if (! base.Equals(o)) return false;
            UnaryExpression0 other = (UnaryExpression0) o;
            if (! _PLUS.Equals(other._PLUS)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_PLUS.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 386:  UnaryExpression ::= - UnaryExpression
     *</b>
     */
    public class UnaryExpression1 : Ast , IUnaryExpression
    {
        private AstToken _MINUS;
        private IUnaryExpression _UnaryExpression;

        public AstToken getMINUS() { return _MINUS; }
        public void setMINUS(AstToken _MINUS) { this._MINUS = _MINUS; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public UnaryExpression1(IToken leftIToken, IToken rightIToken,
                                AstToken _MINUS,
                                IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._MINUS = _MINUS;
            ((Ast) _MINUS).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MINUS != null)  list.Add(_MINUS);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is UnaryExpression1)) return false;
            if (! base.Equals(o)) return false;
            UnaryExpression1 other = (UnaryExpression1) o;
            if (! _MINUS.Equals(other._MINUS)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MINUS.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
     *</b>
     */
    public class UnaryExpressionNotPlusMinus0 : Ast , IUnaryExpressionNotPlusMinus
    {
        private AstToken _TWIDDLE;
        private IUnaryExpression _UnaryExpression;

        public AstToken getTWIDDLE() { return _TWIDDLE; }
        public void setTWIDDLE(AstToken _TWIDDLE) { this._TWIDDLE = _TWIDDLE; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public UnaryExpressionNotPlusMinus0(IToken leftIToken, IToken rightIToken,
                                            AstToken _TWIDDLE,
                                            IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._TWIDDLE = _TWIDDLE;
            ((Ast) _TWIDDLE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_TWIDDLE != null)  list.Add(_TWIDDLE);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is UnaryExpressionNotPlusMinus0)) return false;
            if (! base.Equals(o)) return false;
            UnaryExpressionNotPlusMinus0 other = (UnaryExpressionNotPlusMinus0) o;
            if (! _TWIDDLE.Equals(other._TWIDDLE)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_TWIDDLE.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
     *</b>
     */
    public class UnaryExpressionNotPlusMinus1 : Ast , IUnaryExpressionNotPlusMinus
    {
        private AstToken _NOT;
        private IUnaryExpression _UnaryExpression;

        public AstToken getNOT() { return _NOT; }
        public void setNOT(AstToken _NOT) { this._NOT = _NOT; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public UnaryExpressionNotPlusMinus1(IToken leftIToken, IToken rightIToken,
                                            AstToken _NOT,
                                            IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._NOT = _NOT;
            ((Ast) _NOT).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_NOT != null)  list.Add(_NOT);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is UnaryExpressionNotPlusMinus1)) return false;
            if (! base.Equals(o)) return false;
            UnaryExpressionNotPlusMinus1 other = (UnaryExpressionNotPlusMinus1) o;
            if (! _NOT.Equals(other._NOT)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_NOT.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
     *</b>
     */
    public class CastExpression0 : Ast , ICastExpression
    {
        private AstToken _LPAREN;
        private IPrimitiveType _PrimitiveType;
        private IDimsopt _Dimsopt;
        private AstToken _RPAREN;
        private IUnaryExpression _UnaryExpression;

        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IPrimitiveType getPrimitiveType() { return _PrimitiveType; }
        public void setPrimitiveType(IPrimitiveType _PrimitiveType) { this._PrimitiveType = _PrimitiveType; }
        /**
         * The value returned by <b>getDimsopt</b> may be <b>null</b>
         */
        public IDimsopt getDimsopt() { return _Dimsopt; }
        public void setDimsopt(IDimsopt _Dimsopt) { this._Dimsopt = _Dimsopt; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public CastExpression0(IToken leftIToken, IToken rightIToken,
                               AstToken _LPAREN,
                               IPrimitiveType _PrimitiveType,
                               IDimsopt _Dimsopt,
                               AstToken _RPAREN,
                               IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._PrimitiveType = _PrimitiveType;
            ((Ast) _PrimitiveType).setParent(this);
            this._Dimsopt = _Dimsopt;
            if (_Dimsopt != null) ((Ast) _Dimsopt).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_PrimitiveType != null)  list.Add(_PrimitiveType);
            if(_Dimsopt != null)  list.Add(_Dimsopt);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is CastExpression0)) return false;
            if (! base.Equals(o)) return false;
            CastExpression0 other = (CastExpression0) o;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _PrimitiveType.Equals(other._PrimitiveType)) return false;
            if (_Dimsopt == null)
                if (other._Dimsopt != null) return false;
                else{}// continue
            else if (! _Dimsopt.Equals(other._Dimsopt)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_PrimitiveType.GetHashCode());
            hash = hash * 31 + (_Dimsopt == null ? 0 : _Dimsopt.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
     *</b>
     */
    public class CastExpression1 : Ast , ICastExpression
    {
        private AstToken _LPAREN;
        private IReferenceType _ReferenceType;
        private AstToken _RPAREN;
        private IUnaryExpressionNotPlusMinus _UnaryExpressionNotPlusMinus;

        public AstToken getLPAREN() { return _LPAREN; }
        public void setLPAREN(AstToken _LPAREN) { this._LPAREN = _LPAREN; }
        public IReferenceType getReferenceType() { return _ReferenceType; }
        public void setReferenceType(IReferenceType _ReferenceType) { this._ReferenceType = _ReferenceType; }
        public AstToken getRPAREN() { return _RPAREN; }
        public void setRPAREN(AstToken _RPAREN) { this._RPAREN = _RPAREN; }
        public IUnaryExpressionNotPlusMinus getUnaryExpressionNotPlusMinus() { return _UnaryExpressionNotPlusMinus; }
        public void setUnaryExpressionNotPlusMinus(IUnaryExpressionNotPlusMinus _UnaryExpressionNotPlusMinus) { this._UnaryExpressionNotPlusMinus = _UnaryExpressionNotPlusMinus; }

        public CastExpression1(IToken leftIToken, IToken rightIToken,
                               AstToken _LPAREN,
                               IReferenceType _ReferenceType,
                               AstToken _RPAREN,
                               IUnaryExpressionNotPlusMinus _UnaryExpressionNotPlusMinus)
            :base(leftIToken, rightIToken)

        {
            this._LPAREN = _LPAREN;
            ((Ast) _LPAREN).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            this._RPAREN = _RPAREN;
            ((Ast) _RPAREN).setParent(this);
            this._UnaryExpressionNotPlusMinus = _UnaryExpressionNotPlusMinus;
            ((Ast) _UnaryExpressionNotPlusMinus).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_LPAREN != null)  list.Add(_LPAREN);
            if(_ReferenceType != null)  list.Add(_ReferenceType);
            if(_RPAREN != null)  list.Add(_RPAREN);
            if(_UnaryExpressionNotPlusMinus != null)  list.Add(_UnaryExpressionNotPlusMinus);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is CastExpression1)) return false;
            if (! base.Equals(o)) return false;
            CastExpression1 other = (CastExpression1) o;
            if (! _LPAREN.Equals(other._LPAREN)) return false;
            if (! _ReferenceType.Equals(other._ReferenceType)) return false;
            if (! _RPAREN.Equals(other._RPAREN)) return false;
            if (! _UnaryExpressionNotPlusMinus.Equals(other._UnaryExpressionNotPlusMinus)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_LPAREN.GetHashCode());
            hash = hash * 31 + (_ReferenceType.GetHashCode());
            hash = hash * 31 + (_RPAREN.GetHashCode());
            hash = hash * 31 + (_UnaryExpressionNotPlusMinus.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
     *</b>
     */
    public class MultiplicativeExpression0 : Ast , IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _MULTIPLY;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public void setMultiplicativeExpression(IMultiplicativeExpression _MultiplicativeExpression) { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public AstToken getMULTIPLY() { return _MULTIPLY; }
        public void setMULTIPLY(AstToken _MULTIPLY) { this._MULTIPLY = _MULTIPLY; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public MultiplicativeExpression0(IToken leftIToken, IToken rightIToken,
                                         IMultiplicativeExpression _MultiplicativeExpression,
                                         AstToken _MULTIPLY,
                                         IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._MULTIPLY = _MULTIPLY;
            ((Ast) _MULTIPLY).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MultiplicativeExpression != null)  list.Add(_MultiplicativeExpression);
            if(_MULTIPLY != null)  list.Add(_MULTIPLY);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MultiplicativeExpression0)) return false;
            if (! base.Equals(o)) return false;
            MultiplicativeExpression0 other = (MultiplicativeExpression0) o;
            if (! _MultiplicativeExpression.Equals(other._MultiplicativeExpression)) return false;
            if (! _MULTIPLY.Equals(other._MULTIPLY)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MultiplicativeExpression.GetHashCode());
            hash = hash * 31 + (_MULTIPLY.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
     *</b>
     */
    public class MultiplicativeExpression1 : Ast , IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _DIVIDE;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public void setMultiplicativeExpression(IMultiplicativeExpression _MultiplicativeExpression) { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public AstToken getDIVIDE() { return _DIVIDE; }
        public void setDIVIDE(AstToken _DIVIDE) { this._DIVIDE = _DIVIDE; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public MultiplicativeExpression1(IToken leftIToken, IToken rightIToken,
                                         IMultiplicativeExpression _MultiplicativeExpression,
                                         AstToken _DIVIDE,
                                         IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._DIVIDE = _DIVIDE;
            ((Ast) _DIVIDE).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MultiplicativeExpression != null)  list.Add(_MultiplicativeExpression);
            if(_DIVIDE != null)  list.Add(_DIVIDE);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MultiplicativeExpression1)) return false;
            if (! base.Equals(o)) return false;
            MultiplicativeExpression1 other = (MultiplicativeExpression1) o;
            if (! _MultiplicativeExpression.Equals(other._MultiplicativeExpression)) return false;
            if (! _DIVIDE.Equals(other._DIVIDE)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MultiplicativeExpression.GetHashCode());
            hash = hash * 31 + (_DIVIDE.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
     *</b>
     */
    public class MultiplicativeExpression2 : Ast , IMultiplicativeExpression
    {
        private IMultiplicativeExpression _MultiplicativeExpression;
        private AstToken _REMAINDER;
        private IUnaryExpression _UnaryExpression;

        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public void setMultiplicativeExpression(IMultiplicativeExpression _MultiplicativeExpression) { this._MultiplicativeExpression = _MultiplicativeExpression; }
        public AstToken getREMAINDER() { return _REMAINDER; }
        public void setREMAINDER(AstToken _REMAINDER) { this._REMAINDER = _REMAINDER; }
        public IUnaryExpression getUnaryExpression() { return _UnaryExpression; }
        public void setUnaryExpression(IUnaryExpression _UnaryExpression) { this._UnaryExpression = _UnaryExpression; }

        public MultiplicativeExpression2(IToken leftIToken, IToken rightIToken,
                                         IMultiplicativeExpression _MultiplicativeExpression,
                                         AstToken _REMAINDER,
                                         IUnaryExpression _UnaryExpression)
            :base(leftIToken, rightIToken)

        {
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            this._REMAINDER = _REMAINDER;
            ((Ast) _REMAINDER).setParent(this);
            this._UnaryExpression = _UnaryExpression;
            ((Ast) _UnaryExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_MultiplicativeExpression != null)  list.Add(_MultiplicativeExpression);
            if(_REMAINDER != null)  list.Add(_REMAINDER);
            if(_UnaryExpression != null)  list.Add(_UnaryExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is MultiplicativeExpression2)) return false;
            if (! base.Equals(o)) return false;
            MultiplicativeExpression2 other = (MultiplicativeExpression2) o;
            if (! _MultiplicativeExpression.Equals(other._MultiplicativeExpression)) return false;
            if (! _REMAINDER.Equals(other._REMAINDER)) return false;
            if (! _UnaryExpression.Equals(other._UnaryExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_MultiplicativeExpression.GetHashCode());
            hash = hash * 31 + (_REMAINDER.GetHashCode());
            hash = hash * 31 + (_UnaryExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
     *</b>
     */
    public class AdditiveExpression0 : Ast , IAdditiveExpression
    {
        private IAdditiveExpression _AdditiveExpression;
        private AstToken _PLUS;
        private IMultiplicativeExpression _MultiplicativeExpression;

        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public void setAdditiveExpression(IAdditiveExpression _AdditiveExpression) { this._AdditiveExpression = _AdditiveExpression; }
        public AstToken getPLUS() { return _PLUS; }
        public void setPLUS(AstToken _PLUS) { this._PLUS = _PLUS; }
        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public void setMultiplicativeExpression(IMultiplicativeExpression _MultiplicativeExpression) { this._MultiplicativeExpression = _MultiplicativeExpression; }

        public AdditiveExpression0(IToken leftIToken, IToken rightIToken,
                                   IAdditiveExpression _AdditiveExpression,
                                   AstToken _PLUS,
                                   IMultiplicativeExpression _MultiplicativeExpression)
            :base(leftIToken, rightIToken)

        {
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            this._PLUS = _PLUS;
            ((Ast) _PLUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AdditiveExpression != null)  list.Add(_AdditiveExpression);
            if(_PLUS != null)  list.Add(_PLUS);
            if(_MultiplicativeExpression != null)  list.Add(_MultiplicativeExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AdditiveExpression0)) return false;
            if (! base.Equals(o)) return false;
            AdditiveExpression0 other = (AdditiveExpression0) o;
            if (! _AdditiveExpression.Equals(other._AdditiveExpression)) return false;
            if (! _PLUS.Equals(other._PLUS)) return false;
            if (! _MultiplicativeExpression.Equals(other._MultiplicativeExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AdditiveExpression.GetHashCode());
            hash = hash * 31 + (_PLUS.GetHashCode());
            hash = hash * 31 + (_MultiplicativeExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
     *</b>
     */
    public class AdditiveExpression1 : Ast , IAdditiveExpression
    {
        private IAdditiveExpression _AdditiveExpression;
        private AstToken _MINUS;
        private IMultiplicativeExpression _MultiplicativeExpression;

        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public void setAdditiveExpression(IAdditiveExpression _AdditiveExpression) { this._AdditiveExpression = _AdditiveExpression; }
        public AstToken getMINUS() { return _MINUS; }
        public void setMINUS(AstToken _MINUS) { this._MINUS = _MINUS; }
        public IMultiplicativeExpression getMultiplicativeExpression() { return _MultiplicativeExpression; }
        public void setMultiplicativeExpression(IMultiplicativeExpression _MultiplicativeExpression) { this._MultiplicativeExpression = _MultiplicativeExpression; }

        public AdditiveExpression1(IToken leftIToken, IToken rightIToken,
                                   IAdditiveExpression _AdditiveExpression,
                                   AstToken _MINUS,
                                   IMultiplicativeExpression _MultiplicativeExpression)
            :base(leftIToken, rightIToken)

        {
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            this._MINUS = _MINUS;
            ((Ast) _MINUS).setParent(this);
            this._MultiplicativeExpression = _MultiplicativeExpression;
            ((Ast) _MultiplicativeExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_AdditiveExpression != null)  list.Add(_AdditiveExpression);
            if(_MINUS != null)  list.Add(_MINUS);
            if(_MultiplicativeExpression != null)  list.Add(_MultiplicativeExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AdditiveExpression1)) return false;
            if (! base.Equals(o)) return false;
            AdditiveExpression1 other = (AdditiveExpression1) o;
            if (! _AdditiveExpression.Equals(other._AdditiveExpression)) return false;
            if (! _MINUS.Equals(other._MINUS)) return false;
            if (! _MultiplicativeExpression.Equals(other._MultiplicativeExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_AdditiveExpression.GetHashCode());
            hash = hash * 31 + (_MINUS.GetHashCode());
            hash = hash * 31 + (_MultiplicativeExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
     *</b>
     */
    public class ShiftExpression0 : Ast , IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _LEFT_SHIFT;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }
        public AstToken getLEFT_SHIFT() { return _LEFT_SHIFT; }
        public void setLEFT_SHIFT(AstToken _LEFT_SHIFT) { this._LEFT_SHIFT = _LEFT_SHIFT; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public void setAdditiveExpression(IAdditiveExpression _AdditiveExpression) { this._AdditiveExpression = _AdditiveExpression; }

        public ShiftExpression0(IToken leftIToken, IToken rightIToken,
                                IShiftExpression _ShiftExpression,
                                AstToken _LEFT_SHIFT,
                                IAdditiveExpression _AdditiveExpression)
            :base(leftIToken, rightIToken)

        {
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._LEFT_SHIFT = _LEFT_SHIFT;
            ((Ast) _LEFT_SHIFT).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            if(_LEFT_SHIFT != null)  list.Add(_LEFT_SHIFT);
            if(_AdditiveExpression != null)  list.Add(_AdditiveExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ShiftExpression0)) return false;
            if (! base.Equals(o)) return false;
            ShiftExpression0 other = (ShiftExpression0) o;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            if (! _LEFT_SHIFT.Equals(other._LEFT_SHIFT)) return false;
            if (! _AdditiveExpression.Equals(other._AdditiveExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            hash = hash * 31 + (_LEFT_SHIFT.GetHashCode());
            hash = hash * 31 + (_AdditiveExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
     *</b>
     */
    public class ShiftExpression1 : Ast , IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _GREATER;
        private AstToken _GREATER3;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public AstToken getGREATER3() { return _GREATER3; }
        public void setGREATER3(AstToken _GREATER3) { this._GREATER3 = _GREATER3; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public void setAdditiveExpression(IAdditiveExpression _AdditiveExpression) { this._AdditiveExpression = _AdditiveExpression; }

        public ShiftExpression1(IToken leftIToken, IToken rightIToken,
                                IShiftExpression _ShiftExpression,
                                AstToken _GREATER,
                                AstToken _GREATER3,
                                IAdditiveExpression _AdditiveExpression)
            :base(leftIToken, rightIToken)

        {
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            if(_GREATER != null)  list.Add(_GREATER);
            if(_GREATER3 != null)  list.Add(_GREATER3);
            if(_AdditiveExpression != null)  list.Add(_AdditiveExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ShiftExpression1)) return false;
            if (! base.Equals(o)) return false;
            ShiftExpression1 other = (ShiftExpression1) o;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _GREATER3.Equals(other._GREATER3)) return false;
            if (! _AdditiveExpression.Equals(other._AdditiveExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_GREATER3.GetHashCode());
            hash = hash * 31 + (_AdditiveExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
     *</b>
     */
    public class ShiftExpression2 : Ast , IShiftExpression
    {
        private IShiftExpression _ShiftExpression;
        private AstToken _GREATER;
        private AstToken _GREATER3;
        private AstToken _GREATER4;
        private IAdditiveExpression _AdditiveExpression;

        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public AstToken getGREATER3() { return _GREATER3; }
        public void setGREATER3(AstToken _GREATER3) { this._GREATER3 = _GREATER3; }
        public AstToken getGREATER4() { return _GREATER4; }
        public void setGREATER4(AstToken _GREATER4) { this._GREATER4 = _GREATER4; }
        public IAdditiveExpression getAdditiveExpression() { return _AdditiveExpression; }
        public void setAdditiveExpression(IAdditiveExpression _AdditiveExpression) { this._AdditiveExpression = _AdditiveExpression; }

        public ShiftExpression2(IToken leftIToken, IToken rightIToken,
                                IShiftExpression _ShiftExpression,
                                AstToken _GREATER,
                                AstToken _GREATER3,
                                AstToken _GREATER4,
                                IAdditiveExpression _AdditiveExpression)
            :base(leftIToken, rightIToken)

        {
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._GREATER4 = _GREATER4;
            ((Ast) _GREATER4).setParent(this);
            this._AdditiveExpression = _AdditiveExpression;
            ((Ast) _AdditiveExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            if(_GREATER != null)  list.Add(_GREATER);
            if(_GREATER3 != null)  list.Add(_GREATER3);
            if(_GREATER4 != null)  list.Add(_GREATER4);
            if(_AdditiveExpression != null)  list.Add(_AdditiveExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is ShiftExpression2)) return false;
            if (! base.Equals(o)) return false;
            ShiftExpression2 other = (ShiftExpression2) o;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _GREATER3.Equals(other._GREATER3)) return false;
            if (! _GREATER4.Equals(other._GREATER4)) return false;
            if (! _AdditiveExpression.Equals(other._AdditiveExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_GREATER3.GetHashCode());
            hash = hash * 31 + (_GREATER4.GetHashCode());
            hash = hash * 31 + (_AdditiveExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
     *</b>
     */
    public class RelationalExpression0 : Ast , IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _LESS;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }
        public AstToken getLESS() { return _LESS; }
        public void setLESS(AstToken _LESS) { this._LESS = _LESS; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }

        public RelationalExpression0(IToken leftIToken, IToken rightIToken,
                                     IRelationalExpression _RelationalExpression,
                                     AstToken _LESS,
                                     IShiftExpression _ShiftExpression)
            :base(leftIToken, rightIToken)

        {
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._LESS = _LESS;
            ((Ast) _LESS).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            if(_LESS != null)  list.Add(_LESS);
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is RelationalExpression0)) return false;
            if (! base.Equals(o)) return false;
            RelationalExpression0 other = (RelationalExpression0) o;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            if (! _LESS.Equals(other._LESS)) return false;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            hash = hash * 31 + (_LESS.GetHashCode());
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
     *</b>
     */
    public class RelationalExpression1 : Ast , IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _GREATER;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }

        public RelationalExpression1(IToken leftIToken, IToken rightIToken,
                                     IRelationalExpression _RelationalExpression,
                                     AstToken _GREATER,
                                     IShiftExpression _ShiftExpression)
            :base(leftIToken, rightIToken)

        {
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            if(_GREATER != null)  list.Add(_GREATER);
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is RelationalExpression1)) return false;
            if (! base.Equals(o)) return false;
            RelationalExpression1 other = (RelationalExpression1) o;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
     *</b>
     */
    public class RelationalExpression2 : Ast , IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _LESS_EQUAL;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }
        public AstToken getLESS_EQUAL() { return _LESS_EQUAL; }
        public void setLESS_EQUAL(AstToken _LESS_EQUAL) { this._LESS_EQUAL = _LESS_EQUAL; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }

        public RelationalExpression2(IToken leftIToken, IToken rightIToken,
                                     IRelationalExpression _RelationalExpression,
                                     AstToken _LESS_EQUAL,
                                     IShiftExpression _ShiftExpression)
            :base(leftIToken, rightIToken)

        {
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._LESS_EQUAL = _LESS_EQUAL;
            ((Ast) _LESS_EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            if(_LESS_EQUAL != null)  list.Add(_LESS_EQUAL);
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is RelationalExpression2)) return false;
            if (! base.Equals(o)) return false;
            RelationalExpression2 other = (RelationalExpression2) o;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            if (! _LESS_EQUAL.Equals(other._LESS_EQUAL)) return false;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            hash = hash * 31 + (_LESS_EQUAL.GetHashCode());
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
     *</b>
     */
    public class RelationalExpression3 : Ast , IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _GREATER;
        private AstToken _EQUAL;
        private IShiftExpression _ShiftExpression;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }
        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public AstToken getEQUAL() { return _EQUAL; }
        public void setEQUAL(AstToken _EQUAL) { this._EQUAL = _EQUAL; }
        public IShiftExpression getShiftExpression() { return _ShiftExpression; }
        public void setShiftExpression(IShiftExpression _ShiftExpression) { this._ShiftExpression = _ShiftExpression; }

        public RelationalExpression3(IToken leftIToken, IToken rightIToken,
                                     IRelationalExpression _RelationalExpression,
                                     AstToken _GREATER,
                                     AstToken _EQUAL,
                                     IShiftExpression _ShiftExpression)
            :base(leftIToken, rightIToken)

        {
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            this._ShiftExpression = _ShiftExpression;
            ((Ast) _ShiftExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            if(_GREATER != null)  list.Add(_GREATER);
            if(_EQUAL != null)  list.Add(_EQUAL);
            if(_ShiftExpression != null)  list.Add(_ShiftExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is RelationalExpression3)) return false;
            if (! base.Equals(o)) return false;
            RelationalExpression3 other = (RelationalExpression3) o;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _EQUAL.Equals(other._EQUAL)) return false;
            if (! _ShiftExpression.Equals(other._ShiftExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_EQUAL.GetHashCode());
            hash = hash * 31 + (_ShiftExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
     *</b>
     */
    public class RelationalExpression4 : Ast , IRelationalExpression
    {
        private IRelationalExpression _RelationalExpression;
        private AstToken _instanceof;
        private IReferenceType _ReferenceType;

        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }
        public AstToken getinstanceof() { return _instanceof; }
        public void setinstanceof(AstToken _instanceof) { this._instanceof = _instanceof; }
        public IReferenceType getReferenceType() { return _ReferenceType; }
        public void setReferenceType(IReferenceType _ReferenceType) { this._ReferenceType = _ReferenceType; }

        public RelationalExpression4(IToken leftIToken, IToken rightIToken,
                                     IRelationalExpression _RelationalExpression,
                                     AstToken _instanceof,
                                     IReferenceType _ReferenceType)
            :base(leftIToken, rightIToken)

        {
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            this._instanceof = _instanceof;
            ((Ast) _instanceof).setParent(this);
            this._ReferenceType = _ReferenceType;
            ((Ast) _ReferenceType).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            if(_instanceof != null)  list.Add(_instanceof);
            if(_ReferenceType != null)  list.Add(_ReferenceType);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is RelationalExpression4)) return false;
            if (! base.Equals(o)) return false;
            RelationalExpression4 other = (RelationalExpression4) o;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            if (! _instanceof.Equals(other._instanceof)) return false;
            if (! _ReferenceType.Equals(other._ReferenceType)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            hash = hash * 31 + (_instanceof.GetHashCode());
            hash = hash * 31 + (_ReferenceType.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
     *</b>
     */
    public class EqualityExpression0 : Ast , IEqualityExpression
    {
        private IEqualityExpression _EqualityExpression;
        private AstToken _EQUAL_EQUAL;
        private IRelationalExpression _RelationalExpression;

        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }
        public void setEqualityExpression(IEqualityExpression _EqualityExpression) { this._EqualityExpression = _EqualityExpression; }
        public AstToken getEQUAL_EQUAL() { return _EQUAL_EQUAL; }
        public void setEQUAL_EQUAL(AstToken _EQUAL_EQUAL) { this._EQUAL_EQUAL = _EQUAL_EQUAL; }
        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }

        public EqualityExpression0(IToken leftIToken, IToken rightIToken,
                                   IEqualityExpression _EqualityExpression,
                                   AstToken _EQUAL_EQUAL,
                                   IRelationalExpression _RelationalExpression)
            :base(leftIToken, rightIToken)

        {
            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            this._EQUAL_EQUAL = _EQUAL_EQUAL;
            ((Ast) _EQUAL_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_EqualityExpression != null)  list.Add(_EqualityExpression);
            if(_EQUAL_EQUAL != null)  list.Add(_EQUAL_EQUAL);
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EqualityExpression0)) return false;
            if (! base.Equals(o)) return false;
            EqualityExpression0 other = (EqualityExpression0) o;
            if (! _EqualityExpression.Equals(other._EqualityExpression)) return false;
            if (! _EQUAL_EQUAL.Equals(other._EQUAL_EQUAL)) return false;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_EqualityExpression.GetHashCode());
            hash = hash * 31 + (_EQUAL_EQUAL.GetHashCode());
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
     *</b>
     */
    public class EqualityExpression1 : Ast , IEqualityExpression
    {
        private IEqualityExpression _EqualityExpression;
        private AstToken _NOT_EQUAL;
        private IRelationalExpression _RelationalExpression;

        public IEqualityExpression getEqualityExpression() { return _EqualityExpression; }
        public void setEqualityExpression(IEqualityExpression _EqualityExpression) { this._EqualityExpression = _EqualityExpression; }
        public AstToken getNOT_EQUAL() { return _NOT_EQUAL; }
        public void setNOT_EQUAL(AstToken _NOT_EQUAL) { this._NOT_EQUAL = _NOT_EQUAL; }
        public IRelationalExpression getRelationalExpression() { return _RelationalExpression; }
        public void setRelationalExpression(IRelationalExpression _RelationalExpression) { this._RelationalExpression = _RelationalExpression; }

        public EqualityExpression1(IToken leftIToken, IToken rightIToken,
                                   IEqualityExpression _EqualityExpression,
                                   AstToken _NOT_EQUAL,
                                   IRelationalExpression _RelationalExpression)
            :base(leftIToken, rightIToken)

        {
            this._EqualityExpression = _EqualityExpression;
            ((Ast) _EqualityExpression).setParent(this);
            this._NOT_EQUAL = _NOT_EQUAL;
            ((Ast) _NOT_EQUAL).setParent(this);
            this._RelationalExpression = _RelationalExpression;
            ((Ast) _RelationalExpression).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_EqualityExpression != null)  list.Add(_EqualityExpression);
            if(_NOT_EQUAL != null)  list.Add(_NOT_EQUAL);
            if(_RelationalExpression != null)  list.Add(_RelationalExpression);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is EqualityExpression1)) return false;
            if (! base.Equals(o)) return false;
            EqualityExpression1 other = (EqualityExpression1) o;
            if (! _EqualityExpression.Equals(other._EqualityExpression)) return false;
            if (! _NOT_EQUAL.Equals(other._NOT_EQUAL)) return false;
            if (! _RelationalExpression.Equals(other._RelationalExpression)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_EqualityExpression.GetHashCode());
            hash = hash * 31 + (_NOT_EQUAL.GetHashCode());
            hash = hash * 31 + (_RelationalExpression.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 434:  AssignmentOperator ::= =
     *</b>
     */
    public class AssignmentOperator0 : AstToken , IAssignmentOperator
    {
        public IToken getEQUAL() { return leftIToken; }

        public AssignmentOperator0(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 435:  AssignmentOperator ::= *=
     *</b>
     */
    public class AssignmentOperator1 : AstToken , IAssignmentOperator
    {
        public IToken getMULTIPLY_EQUAL() { return leftIToken; }

        public AssignmentOperator1(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 436:  AssignmentOperator ::= /=
     *</b>
     */
    public class AssignmentOperator2 : AstToken , IAssignmentOperator
    {
        public IToken getDIVIDE_EQUAL() { return leftIToken; }

        public AssignmentOperator2(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 437:  AssignmentOperator ::= %=
     *</b>
     */
    public class AssignmentOperator3 : AstToken , IAssignmentOperator
    {
        public IToken getREMAINDER_EQUAL() { return leftIToken; }

        public AssignmentOperator3(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 438:  AssignmentOperator ::= +=
     *</b>
     */
    public class AssignmentOperator4 : AstToken , IAssignmentOperator
    {
        public IToken getPLUS_EQUAL() { return leftIToken; }

        public AssignmentOperator4(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 439:  AssignmentOperator ::= -=
     *</b>
     */
    public class AssignmentOperator5 : AstToken , IAssignmentOperator
    {
        public IToken getMINUS_EQUAL() { return leftIToken; }

        public AssignmentOperator5(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 440:  AssignmentOperator ::= <<=
     *</b>
     */
    public class AssignmentOperator6 : AstToken , IAssignmentOperator
    {
        public IToken getLEFT_SHIFT_EQUAL() { return leftIToken; }

        public AssignmentOperator6(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 441:  AssignmentOperator ::= > > =
     *</b>
     */
    public class AssignmentOperator7 : Ast , IAssignmentOperator
    {
        private AstToken _GREATER;
        private AstToken _GREATER2;
        private AstToken _EQUAL;

        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public AstToken getGREATER2() { return _GREATER2; }
        public void setGREATER2(AstToken _GREATER2) { this._GREATER2 = _GREATER2; }
        public AstToken getEQUAL() { return _EQUAL; }
        public void setEQUAL(AstToken _EQUAL) { this._EQUAL = _EQUAL; }

        public AssignmentOperator7(IToken leftIToken, IToken rightIToken,
                                   AstToken _GREATER,
                                   AstToken _GREATER2,
                                   AstToken _EQUAL)
            :base(leftIToken, rightIToken)

        {
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            ((Ast) _GREATER2).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_GREATER != null)  list.Add(_GREATER);
            if(_GREATER2 != null)  list.Add(_GREATER2);
            if(_EQUAL != null)  list.Add(_EQUAL);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AssignmentOperator7)) return false;
            if (! base.Equals(o)) return false;
            AssignmentOperator7 other = (AssignmentOperator7) o;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _GREATER2.Equals(other._GREATER2)) return false;
            if (! _EQUAL.Equals(other._EQUAL)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_GREATER2.GetHashCode());
            hash = hash * 31 + (_EQUAL.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 442:  AssignmentOperator ::= > > > =
     *</b>
     */
    public class AssignmentOperator8 : Ast , IAssignmentOperator
    {
        private AstToken _GREATER;
        private AstToken _GREATER2;
        private AstToken _GREATER3;
        private AstToken _EQUAL;

        public AstToken getGREATER() { return _GREATER; }
        public void setGREATER(AstToken _GREATER) { this._GREATER = _GREATER; }
        public AstToken getGREATER2() { return _GREATER2; }
        public void setGREATER2(AstToken _GREATER2) { this._GREATER2 = _GREATER2; }
        public AstToken getGREATER3() { return _GREATER3; }
        public void setGREATER3(AstToken _GREATER3) { this._GREATER3 = _GREATER3; }
        public AstToken getEQUAL() { return _EQUAL; }
        public void setEQUAL(AstToken _EQUAL) { this._EQUAL = _EQUAL; }

        public AssignmentOperator8(IToken leftIToken, IToken rightIToken,
                                   AstToken _GREATER,
                                   AstToken _GREATER2,
                                   AstToken _GREATER3,
                                   AstToken _EQUAL)
            :base(leftIToken, rightIToken)

        {
            this._GREATER = _GREATER;
            ((Ast) _GREATER).setParent(this);
            this._GREATER2 = _GREATER2;
            ((Ast) _GREATER2).setParent(this);
            this._GREATER3 = _GREATER3;
            ((Ast) _GREATER3).setParent(this);
            this._EQUAL = _EQUAL;
            ((Ast) _EQUAL).setParent(this);
            initialize();
        }

        /**
         * A list of all children of this node,don't including the null ones.
         */
        public override System.Collections.ArrayList getAllChildren()
        {
            System.Collections.ArrayList list = new System.Collections.ArrayList();
            if(_GREATER != null)  list.Add(_GREATER);
            if(_GREATER2 != null)  list.Add(_GREATER2);
            if(_GREATER3 != null)  list.Add(_GREATER3);
            if(_EQUAL != null)  list.Add(_EQUAL);
            return list;
        }

        public override bool Equals(object o)
        {
            if (o == this) return true;
            if (! (o is AssignmentOperator8)) return false;
            if (! base.Equals(o)) return false;
            AssignmentOperator8 other = (AssignmentOperator8) o;
            if (! _GREATER.Equals(other._GREATER)) return false;
            if (! _GREATER2.Equals(other._GREATER2)) return false;
            if (! _GREATER3.Equals(other._GREATER3)) return false;
            if (! _EQUAL.Equals(other._EQUAL)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = base.GetHashCode();
            hash = hash * 31 + (_GREATER.GetHashCode());
            hash = hash * 31 + (_GREATER2.GetHashCode());
            hash = hash * 31 + (_GREATER3.GetHashCode());
            hash = hash * 31 + (_EQUAL.GetHashCode());
            return hash;
        }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 443:  AssignmentOperator ::= &=
     *</b>
     */
    public class AssignmentOperator9 : AstToken , IAssignmentOperator
    {
        public IToken getAND_EQUAL() { return leftIToken; }

        public AssignmentOperator9(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 444:  AssignmentOperator ::= ^=
     *</b>
     */
    public class AssignmentOperator10 : AstToken , IAssignmentOperator
    {
        public IToken getXOR_EQUAL() { return leftIToken; }

        public AssignmentOperator10(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    /**
     *<b>
    *<li>Rule 445:  AssignmentOperator ::= |=
     *</b>
     */
    public class AssignmentOperator11 : AstToken , IAssignmentOperator
    {
        public IToken getOR_EQUAL() { return leftIToken; }

        public AssignmentOperator11(IToken token):base(token) {  initialize(); }

        public override void accept(Visitor v) { v.visit(this); }
        public override  void accept(ArgumentVisitor v, object o) { v.visit(this, o); }
        public override object accept(ResultVisitor v) { return v.visit(this); }
        public override  object accept(ResultArgumentVisitor v, object o) { return v.visit(this, o); }
    }

    public interface Visitor
    {
        void visit(AstToken n);
        void visit(identifier n);
        void visit(PrimitiveType n);
        void visit(ClassType n);
        void visit(InterfaceType n);
        void visit(TypeName n);
        void visit(ArrayType n);
        void visit(TypeParameter n);
        void visit(TypeBound n);
        void visit(AdditionalBoundList n);
        void visit(AdditionalBound n);
        void visit(TypeArguments n);
        void visit(ActualTypeArgumentList n);
        void visit(Wildcard n);
        void visit(PackageName n);
        void visit(ExpressionName n);
        void visit(MethodName n);
        void visit(PackageOrTypeName n);
        void visit(AmbiguousName n);
        void visit(CompilationUnit n);
        void visit(ImportDeclarations n);
        void visit(TypeDeclarations n);
        void visit(PackageDeclaration n);
        void visit(SingleTypeImportDeclaration n);
        void visit(TypeImportOnDemandDeclaration n);
        void visit(SingleStaticImportDeclaration n);
        void visit(StaticImportOnDemandDeclaration n);
        void visit(TypeDeclaration n);
        void visit(NormalClassDeclaration n);
        void visit(ClassModifiers n);
        void visit(TypeParameters n);
        void visit(TypeParameterList n);
        void visit(Super n);
        void visit(Interfaces n);
        void visit(InterfaceTypeList n);
        void visit(ClassBody n);
        void visit(ClassBodyDeclarations n);
        void visit(ClassMemberDeclaration n);
        void visit(FieldDeclaration n);
        void visit(VariableDeclarators n);
        void visit(VariableDeclarator n);
        void visit(VariableDeclaratorId n);
        void visit(FieldModifiers n);
        void visit(MethodDeclaration n);
        void visit(MethodHeader n);
        void visit(ResultType n);
        void visit(FormalParameterList n);
        void visit(FormalParameters n);
        void visit(FormalParameter n);
        void visit(VariableModifiers n);
        void visit(VariableModifier n);
        void visit(LastFormalParameter n);
        void visit(MethodModifiers n);
        void visit(Throws n);
        void visit(ExceptionTypeList n);
        void visit(MethodBody n);
        void visit(StaticInitializer n);
        void visit(ConstructorDeclaration n);
        void visit(ConstructorDeclarator n);
        void visit(ConstructorModifiers n);
        void visit(ConstructorBody n);
        void visit(EnumDeclaration n);
        void visit(EnumBody n);
        void visit(EnumConstants n);
        void visit(EnumConstant n);
        void visit(Arguments n);
        void visit(EnumBodyDeclarations n);
        void visit(NormalInterfaceDeclaration n);
        void visit(InterfaceModifiers n);
        void visit(InterfaceBody n);
        void visit(InterfaceMemberDeclarations n);
        void visit(InterfaceMemberDeclaration n);
        void visit(ConstantDeclaration n);
        void visit(ConstantModifiers n);
        void visit(AbstractMethodDeclaration n);
        void visit(AbstractMethodModifiers n);
        void visit(AnnotationTypeDeclaration n);
        void visit(AnnotationTypeBody n);
        void visit(AnnotationTypeElementDeclarations n);
        void visit(DefaultValue n);
        void visit(Annotations n);
        void visit(NormalAnnotation n);
        void visit(ElementValuePairs n);
        void visit(ElementValuePair n);
        void visit(ElementValueArrayInitializer n);
        void visit(ElementValues n);
        void visit(MarkerAnnotation n);
        void visit(SingleElementAnnotation n);
        void visit(ArrayInitializer n);
        void visit(VariableInitializers n);
        void visit(Block n);
        void visit(BlockStatements n);
        void visit(LocalVariableDeclarationStatement n);
        void visit(LocalVariableDeclaration n);
        void visit(IfThenStatement n);
        void visit(IfThenElseStatement n);
        void visit(IfThenElseStatementNoShortIf n);
        void visit(EmptyStatement n);
        void visit(LabeledStatement n);
        void visit(LabeledStatementNoShortIf n);
        void visit(ExpressionStatement n);
        void visit(SwitchStatement n);
        void visit(SwitchBlock n);
        void visit(SwitchBlockStatementGroups n);
        void visit(SwitchBlockStatementGroup n);
        void visit(SwitchLabels n);
        void visit(WhileStatement n);
        void visit(WhileStatementNoShortIf n);
        void visit(DoStatement n);
        void visit(BasicForStatement n);
        void visit(ForStatementNoShortIf n);
        void visit(StatementExpressionList n);
        void visit(EnhancedForStatement n);
        void visit(BreakStatement n);
        void visit(ContinueStatement n);
        void visit(ReturnStatement n);
        void visit(ThrowStatement n);
        void visit(SynchronizedStatement n);
        void visit(Catches n);
        void visit(CatchClause n);
        void visit(Finally n);
        void visit(ArgumentList n);
        void visit(DimExprs n);
        void visit(DimExpr n);
        void visit(PostIncrementExpression n);
        void visit(PostDecrementExpression n);
        void visit(PreIncrementExpression n);
        void visit(PreDecrementExpression n);
        void visit(AndExpression n);
        void visit(ExclusiveOrExpression n);
        void visit(InclusiveOrExpression n);
        void visit(ConditionalAndExpression n);
        void visit(ConditionalOrExpression n);
        void visit(ConditionalExpression n);
        void visit(Assignment n);
        void visit(Commaopt n);
        void visit(Ellipsisopt n);
        void visit(LPGUserAction0 n);
        void visit(LPGUserAction1 n);
        void visit(LPGUserAction2 n);
        void visit(LPGUserAction3 n);
        void visit(LPGUserAction4 n);
        void visit(IntegralType0 n);
        void visit(IntegralType1 n);
        void visit(IntegralType2 n);
        void visit(IntegralType3 n);
        void visit(IntegralType4 n);
        void visit(FloatingPointType0 n);
        void visit(FloatingPointType1 n);
        void visit(WildcardBounds0 n);
        void visit(WildcardBounds1 n);
        void visit(ClassModifier0 n);
        void visit(ClassModifier1 n);
        void visit(ClassModifier2 n);
        void visit(ClassModifier3 n);
        void visit(ClassModifier4 n);
        void visit(ClassModifier5 n);
        void visit(ClassModifier6 n);
        void visit(FieldModifier0 n);
        void visit(FieldModifier1 n);
        void visit(FieldModifier2 n);
        void visit(FieldModifier3 n);
        void visit(FieldModifier4 n);
        void visit(FieldModifier5 n);
        void visit(FieldModifier6 n);
        void visit(MethodDeclarator0 n);
        void visit(MethodDeclarator1 n);
        void visit(MethodModifier0 n);
        void visit(MethodModifier1 n);
        void visit(MethodModifier2 n);
        void visit(MethodModifier3 n);
        void visit(MethodModifier4 n);
        void visit(MethodModifier5 n);
        void visit(MethodModifier6 n);
        void visit(MethodModifier7 n);
        void visit(MethodModifier8 n);
        void visit(ConstructorModifier0 n);
        void visit(ConstructorModifier1 n);
        void visit(ConstructorModifier2 n);
        void visit(ExplicitConstructorInvocation0 n);
        void visit(ExplicitConstructorInvocation1 n);
        void visit(ExplicitConstructorInvocation2 n);
        void visit(InterfaceModifier0 n);
        void visit(InterfaceModifier1 n);
        void visit(InterfaceModifier2 n);
        void visit(InterfaceModifier3 n);
        void visit(InterfaceModifier4 n);
        void visit(InterfaceModifier5 n);
        void visit(ExtendsInterfaces0 n);
        void visit(ExtendsInterfaces1 n);
        void visit(ConstantModifier0 n);
        void visit(ConstantModifier1 n);
        void visit(ConstantModifier2 n);
        void visit(AbstractMethodModifier0 n);
        void visit(AbstractMethodModifier1 n);
        void visit(AnnotationTypeElementDeclaration0 n);
        void visit(AnnotationTypeElementDeclaration1 n);
        void visit(AssertStatement0 n);
        void visit(AssertStatement1 n);
        void visit(SwitchLabel0 n);
        void visit(SwitchLabel1 n);
        void visit(SwitchLabel2 n);
        void visit(TryStatement0 n);
        void visit(TryStatement1 n);
        void visit(PrimaryNoNewArray0 n);
        void visit(PrimaryNoNewArray1 n);
        void visit(PrimaryNoNewArray2 n);
        void visit(PrimaryNoNewArray3 n);
        void visit(PrimaryNoNewArray4 n);
        void visit(Literal0 n);
        void visit(Literal1 n);
        void visit(Literal2 n);
        void visit(Literal3 n);
        void visit(Literal4 n);
        void visit(Literal5 n);
        void visit(Literal6 n);
        void visit(BooleanLiteral0 n);
        void visit(BooleanLiteral1 n);
        void visit(ClassInstanceCreationExpression0 n);
        void visit(ClassInstanceCreationExpression1 n);
        void visit(ArrayCreationExpression0 n);
        void visit(ArrayCreationExpression1 n);
        void visit(ArrayCreationExpression2 n);
        void visit(ArrayCreationExpression3 n);
        void visit(Dims0 n);
        void visit(Dims1 n);
        void visit(FieldAccess0 n);
        void visit(FieldAccess1 n);
        void visit(FieldAccess2 n);
        void visit(MethodInvocation0 n);
        void visit(MethodInvocation1 n);
        void visit(MethodInvocation2 n);
        void visit(MethodInvocation3 n);
        void visit(MethodInvocation4 n);
        void visit(ArrayAccess0 n);
        void visit(ArrayAccess1 n);
        void visit(UnaryExpression0 n);
        void visit(UnaryExpression1 n);
        void visit(UnaryExpressionNotPlusMinus0 n);
        void visit(UnaryExpressionNotPlusMinus1 n);
        void visit(CastExpression0 n);
        void visit(CastExpression1 n);
        void visit(MultiplicativeExpression0 n);
        void visit(MultiplicativeExpression1 n);
        void visit(MultiplicativeExpression2 n);
        void visit(AdditiveExpression0 n);
        void visit(AdditiveExpression1 n);
        void visit(ShiftExpression0 n);
        void visit(ShiftExpression1 n);
        void visit(ShiftExpression2 n);
        void visit(RelationalExpression0 n);
        void visit(RelationalExpression1 n);
        void visit(RelationalExpression2 n);
        void visit(RelationalExpression3 n);
        void visit(RelationalExpression4 n);
        void visit(EqualityExpression0 n);
        void visit(EqualityExpression1 n);
        void visit(AssignmentOperator0 n);
        void visit(AssignmentOperator1 n);
        void visit(AssignmentOperator2 n);
        void visit(AssignmentOperator3 n);
        void visit(AssignmentOperator4 n);
        void visit(AssignmentOperator5 n);
        void visit(AssignmentOperator6 n);
        void visit(AssignmentOperator7 n);
        void visit(AssignmentOperator8 n);
        void visit(AssignmentOperator9 n);
        void visit(AssignmentOperator10 n);
        void visit(AssignmentOperator11 n);

        void visit(Ast n);
    }
    public interface ArgumentVisitor
    {
        void visit(AstToken n, object o);
        void visit(identifier n, object o);
        void visit(PrimitiveType n, object o);
        void visit(ClassType n, object o);
        void visit(InterfaceType n, object o);
        void visit(TypeName n, object o);
        void visit(ArrayType n, object o);
        void visit(TypeParameter n, object o);
        void visit(TypeBound n, object o);
        void visit(AdditionalBoundList n, object o);
        void visit(AdditionalBound n, object o);
        void visit(TypeArguments n, object o);
        void visit(ActualTypeArgumentList n, object o);
        void visit(Wildcard n, object o);
        void visit(PackageName n, object o);
        void visit(ExpressionName n, object o);
        void visit(MethodName n, object o);
        void visit(PackageOrTypeName n, object o);
        void visit(AmbiguousName n, object o);
        void visit(CompilationUnit n, object o);
        void visit(ImportDeclarations n, object o);
        void visit(TypeDeclarations n, object o);
        void visit(PackageDeclaration n, object o);
        void visit(SingleTypeImportDeclaration n, object o);
        void visit(TypeImportOnDemandDeclaration n, object o);
        void visit(SingleStaticImportDeclaration n, object o);
        void visit(StaticImportOnDemandDeclaration n, object o);
        void visit(TypeDeclaration n, object o);
        void visit(NormalClassDeclaration n, object o);
        void visit(ClassModifiers n, object o);
        void visit(TypeParameters n, object o);
        void visit(TypeParameterList n, object o);
        void visit(Super n, object o);
        void visit(Interfaces n, object o);
        void visit(InterfaceTypeList n, object o);
        void visit(ClassBody n, object o);
        void visit(ClassBodyDeclarations n, object o);
        void visit(ClassMemberDeclaration n, object o);
        void visit(FieldDeclaration n, object o);
        void visit(VariableDeclarators n, object o);
        void visit(VariableDeclarator n, object o);
        void visit(VariableDeclaratorId n, object o);
        void visit(FieldModifiers n, object o);
        void visit(MethodDeclaration n, object o);
        void visit(MethodHeader n, object o);
        void visit(ResultType n, object o);
        void visit(FormalParameterList n, object o);
        void visit(FormalParameters n, object o);
        void visit(FormalParameter n, object o);
        void visit(VariableModifiers n, object o);
        void visit(VariableModifier n, object o);
        void visit(LastFormalParameter n, object o);
        void visit(MethodModifiers n, object o);
        void visit(Throws n, object o);
        void visit(ExceptionTypeList n, object o);
        void visit(MethodBody n, object o);
        void visit(StaticInitializer n, object o);
        void visit(ConstructorDeclaration n, object o);
        void visit(ConstructorDeclarator n, object o);
        void visit(ConstructorModifiers n, object o);
        void visit(ConstructorBody n, object o);
        void visit(EnumDeclaration n, object o);
        void visit(EnumBody n, object o);
        void visit(EnumConstants n, object o);
        void visit(EnumConstant n, object o);
        void visit(Arguments n, object o);
        void visit(EnumBodyDeclarations n, object o);
        void visit(NormalInterfaceDeclaration n, object o);
        void visit(InterfaceModifiers n, object o);
        void visit(InterfaceBody n, object o);
        void visit(InterfaceMemberDeclarations n, object o);
        void visit(InterfaceMemberDeclaration n, object o);
        void visit(ConstantDeclaration n, object o);
        void visit(ConstantModifiers n, object o);
        void visit(AbstractMethodDeclaration n, object o);
        void visit(AbstractMethodModifiers n, object o);
        void visit(AnnotationTypeDeclaration n, object o);
        void visit(AnnotationTypeBody n, object o);
        void visit(AnnotationTypeElementDeclarations n, object o);
        void visit(DefaultValue n, object o);
        void visit(Annotations n, object o);
        void visit(NormalAnnotation n, object o);
        void visit(ElementValuePairs n, object o);
        void visit(ElementValuePair n, object o);
        void visit(ElementValueArrayInitializer n, object o);
        void visit(ElementValues n, object o);
        void visit(MarkerAnnotation n, object o);
        void visit(SingleElementAnnotation n, object o);
        void visit(ArrayInitializer n, object o);
        void visit(VariableInitializers n, object o);
        void visit(Block n, object o);
        void visit(BlockStatements n, object o);
        void visit(LocalVariableDeclarationStatement n, object o);
        void visit(LocalVariableDeclaration n, object o);
        void visit(IfThenStatement n, object o);
        void visit(IfThenElseStatement n, object o);
        void visit(IfThenElseStatementNoShortIf n, object o);
        void visit(EmptyStatement n, object o);
        void visit(LabeledStatement n, object o);
        void visit(LabeledStatementNoShortIf n, object o);
        void visit(ExpressionStatement n, object o);
        void visit(SwitchStatement n, object o);
        void visit(SwitchBlock n, object o);
        void visit(SwitchBlockStatementGroups n, object o);
        void visit(SwitchBlockStatementGroup n, object o);
        void visit(SwitchLabels n, object o);
        void visit(WhileStatement n, object o);
        void visit(WhileStatementNoShortIf n, object o);
        void visit(DoStatement n, object o);
        void visit(BasicForStatement n, object o);
        void visit(ForStatementNoShortIf n, object o);
        void visit(StatementExpressionList n, object o);
        void visit(EnhancedForStatement n, object o);
        void visit(BreakStatement n, object o);
        void visit(ContinueStatement n, object o);
        void visit(ReturnStatement n, object o);
        void visit(ThrowStatement n, object o);
        void visit(SynchronizedStatement n, object o);
        void visit(Catches n, object o);
        void visit(CatchClause n, object o);
        void visit(Finally n, object o);
        void visit(ArgumentList n, object o);
        void visit(DimExprs n, object o);
        void visit(DimExpr n, object o);
        void visit(PostIncrementExpression n, object o);
        void visit(PostDecrementExpression n, object o);
        void visit(PreIncrementExpression n, object o);
        void visit(PreDecrementExpression n, object o);
        void visit(AndExpression n, object o);
        void visit(ExclusiveOrExpression n, object o);
        void visit(InclusiveOrExpression n, object o);
        void visit(ConditionalAndExpression n, object o);
        void visit(ConditionalOrExpression n, object o);
        void visit(ConditionalExpression n, object o);
        void visit(Assignment n, object o);
        void visit(Commaopt n, object o);
        void visit(Ellipsisopt n, object o);
        void visit(LPGUserAction0 n, object o);
        void visit(LPGUserAction1 n, object o);
        void visit(LPGUserAction2 n, object o);
        void visit(LPGUserAction3 n, object o);
        void visit(LPGUserAction4 n, object o);
        void visit(IntegralType0 n, object o);
        void visit(IntegralType1 n, object o);
        void visit(IntegralType2 n, object o);
        void visit(IntegralType3 n, object o);
        void visit(IntegralType4 n, object o);
        void visit(FloatingPointType0 n, object o);
        void visit(FloatingPointType1 n, object o);
        void visit(WildcardBounds0 n, object o);
        void visit(WildcardBounds1 n, object o);
        void visit(ClassModifier0 n, object o);
        void visit(ClassModifier1 n, object o);
        void visit(ClassModifier2 n, object o);
        void visit(ClassModifier3 n, object o);
        void visit(ClassModifier4 n, object o);
        void visit(ClassModifier5 n, object o);
        void visit(ClassModifier6 n, object o);
        void visit(FieldModifier0 n, object o);
        void visit(FieldModifier1 n, object o);
        void visit(FieldModifier2 n, object o);
        void visit(FieldModifier3 n, object o);
        void visit(FieldModifier4 n, object o);
        void visit(FieldModifier5 n, object o);
        void visit(FieldModifier6 n, object o);
        void visit(MethodDeclarator0 n, object o);
        void visit(MethodDeclarator1 n, object o);
        void visit(MethodModifier0 n, object o);
        void visit(MethodModifier1 n, object o);
        void visit(MethodModifier2 n, object o);
        void visit(MethodModifier3 n, object o);
        void visit(MethodModifier4 n, object o);
        void visit(MethodModifier5 n, object o);
        void visit(MethodModifier6 n, object o);
        void visit(MethodModifier7 n, object o);
        void visit(MethodModifier8 n, object o);
        void visit(ConstructorModifier0 n, object o);
        void visit(ConstructorModifier1 n, object o);
        void visit(ConstructorModifier2 n, object o);
        void visit(ExplicitConstructorInvocation0 n, object o);
        void visit(ExplicitConstructorInvocation1 n, object o);
        void visit(ExplicitConstructorInvocation2 n, object o);
        void visit(InterfaceModifier0 n, object o);
        void visit(InterfaceModifier1 n, object o);
        void visit(InterfaceModifier2 n, object o);
        void visit(InterfaceModifier3 n, object o);
        void visit(InterfaceModifier4 n, object o);
        void visit(InterfaceModifier5 n, object o);
        void visit(ExtendsInterfaces0 n, object o);
        void visit(ExtendsInterfaces1 n, object o);
        void visit(ConstantModifier0 n, object o);
        void visit(ConstantModifier1 n, object o);
        void visit(ConstantModifier2 n, object o);
        void visit(AbstractMethodModifier0 n, object o);
        void visit(AbstractMethodModifier1 n, object o);
        void visit(AnnotationTypeElementDeclaration0 n, object o);
        void visit(AnnotationTypeElementDeclaration1 n, object o);
        void visit(AssertStatement0 n, object o);
        void visit(AssertStatement1 n, object o);
        void visit(SwitchLabel0 n, object o);
        void visit(SwitchLabel1 n, object o);
        void visit(SwitchLabel2 n, object o);
        void visit(TryStatement0 n, object o);
        void visit(TryStatement1 n, object o);
        void visit(PrimaryNoNewArray0 n, object o);
        void visit(PrimaryNoNewArray1 n, object o);
        void visit(PrimaryNoNewArray2 n, object o);
        void visit(PrimaryNoNewArray3 n, object o);
        void visit(PrimaryNoNewArray4 n, object o);
        void visit(Literal0 n, object o);
        void visit(Literal1 n, object o);
        void visit(Literal2 n, object o);
        void visit(Literal3 n, object o);
        void visit(Literal4 n, object o);
        void visit(Literal5 n, object o);
        void visit(Literal6 n, object o);
        void visit(BooleanLiteral0 n, object o);
        void visit(BooleanLiteral1 n, object o);
        void visit(ClassInstanceCreationExpression0 n, object o);
        void visit(ClassInstanceCreationExpression1 n, object o);
        void visit(ArrayCreationExpression0 n, object o);
        void visit(ArrayCreationExpression1 n, object o);
        void visit(ArrayCreationExpression2 n, object o);
        void visit(ArrayCreationExpression3 n, object o);
        void visit(Dims0 n, object o);
        void visit(Dims1 n, object o);
        void visit(FieldAccess0 n, object o);
        void visit(FieldAccess1 n, object o);
        void visit(FieldAccess2 n, object o);
        void visit(MethodInvocation0 n, object o);
        void visit(MethodInvocation1 n, object o);
        void visit(MethodInvocation2 n, object o);
        void visit(MethodInvocation3 n, object o);
        void visit(MethodInvocation4 n, object o);
        void visit(ArrayAccess0 n, object o);
        void visit(ArrayAccess1 n, object o);
        void visit(UnaryExpression0 n, object o);
        void visit(UnaryExpression1 n, object o);
        void visit(UnaryExpressionNotPlusMinus0 n, object o);
        void visit(UnaryExpressionNotPlusMinus1 n, object o);
        void visit(CastExpression0 n, object o);
        void visit(CastExpression1 n, object o);
        void visit(MultiplicativeExpression0 n, object o);
        void visit(MultiplicativeExpression1 n, object o);
        void visit(MultiplicativeExpression2 n, object o);
        void visit(AdditiveExpression0 n, object o);
        void visit(AdditiveExpression1 n, object o);
        void visit(ShiftExpression0 n, object o);
        void visit(ShiftExpression1 n, object o);
        void visit(ShiftExpression2 n, object o);
        void visit(RelationalExpression0 n, object o);
        void visit(RelationalExpression1 n, object o);
        void visit(RelationalExpression2 n, object o);
        void visit(RelationalExpression3 n, object o);
        void visit(RelationalExpression4 n, object o);
        void visit(EqualityExpression0 n, object o);
        void visit(EqualityExpression1 n, object o);
        void visit(AssignmentOperator0 n, object o);
        void visit(AssignmentOperator1 n, object o);
        void visit(AssignmentOperator2 n, object o);
        void visit(AssignmentOperator3 n, object o);
        void visit(AssignmentOperator4 n, object o);
        void visit(AssignmentOperator5 n, object o);
        void visit(AssignmentOperator6 n, object o);
        void visit(AssignmentOperator7 n, object o);
        void visit(AssignmentOperator8 n, object o);
        void visit(AssignmentOperator9 n, object o);
        void visit(AssignmentOperator10 n, object o);
        void visit(AssignmentOperator11 n, object o);

        void visit(Ast n, object o);
    }
    public interface ResultVisitor
    {
        object visit(AstToken n);
        object visit(identifier n);
        object visit(PrimitiveType n);
        object visit(ClassType n);
        object visit(InterfaceType n);
        object visit(TypeName n);
        object visit(ArrayType n);
        object visit(TypeParameter n);
        object visit(TypeBound n);
        object visit(AdditionalBoundList n);
        object visit(AdditionalBound n);
        object visit(TypeArguments n);
        object visit(ActualTypeArgumentList n);
        object visit(Wildcard n);
        object visit(PackageName n);
        object visit(ExpressionName n);
        object visit(MethodName n);
        object visit(PackageOrTypeName n);
        object visit(AmbiguousName n);
        object visit(CompilationUnit n);
        object visit(ImportDeclarations n);
        object visit(TypeDeclarations n);
        object visit(PackageDeclaration n);
        object visit(SingleTypeImportDeclaration n);
        object visit(TypeImportOnDemandDeclaration n);
        object visit(SingleStaticImportDeclaration n);
        object visit(StaticImportOnDemandDeclaration n);
        object visit(TypeDeclaration n);
        object visit(NormalClassDeclaration n);
        object visit(ClassModifiers n);
        object visit(TypeParameters n);
        object visit(TypeParameterList n);
        object visit(Super n);
        object visit(Interfaces n);
        object visit(InterfaceTypeList n);
        object visit(ClassBody n);
        object visit(ClassBodyDeclarations n);
        object visit(ClassMemberDeclaration n);
        object visit(FieldDeclaration n);
        object visit(VariableDeclarators n);
        object visit(VariableDeclarator n);
        object visit(VariableDeclaratorId n);
        object visit(FieldModifiers n);
        object visit(MethodDeclaration n);
        object visit(MethodHeader n);
        object visit(ResultType n);
        object visit(FormalParameterList n);
        object visit(FormalParameters n);
        object visit(FormalParameter n);
        object visit(VariableModifiers n);
        object visit(VariableModifier n);
        object visit(LastFormalParameter n);
        object visit(MethodModifiers n);
        object visit(Throws n);
        object visit(ExceptionTypeList n);
        object visit(MethodBody n);
        object visit(StaticInitializer n);
        object visit(ConstructorDeclaration n);
        object visit(ConstructorDeclarator n);
        object visit(ConstructorModifiers n);
        object visit(ConstructorBody n);
        object visit(EnumDeclaration n);
        object visit(EnumBody n);
        object visit(EnumConstants n);
        object visit(EnumConstant n);
        object visit(Arguments n);
        object visit(EnumBodyDeclarations n);
        object visit(NormalInterfaceDeclaration n);
        object visit(InterfaceModifiers n);
        object visit(InterfaceBody n);
        object visit(InterfaceMemberDeclarations n);
        object visit(InterfaceMemberDeclaration n);
        object visit(ConstantDeclaration n);
        object visit(ConstantModifiers n);
        object visit(AbstractMethodDeclaration n);
        object visit(AbstractMethodModifiers n);
        object visit(AnnotationTypeDeclaration n);
        object visit(AnnotationTypeBody n);
        object visit(AnnotationTypeElementDeclarations n);
        object visit(DefaultValue n);
        object visit(Annotations n);
        object visit(NormalAnnotation n);
        object visit(ElementValuePairs n);
        object visit(ElementValuePair n);
        object visit(ElementValueArrayInitializer n);
        object visit(ElementValues n);
        object visit(MarkerAnnotation n);
        object visit(SingleElementAnnotation n);
        object visit(ArrayInitializer n);
        object visit(VariableInitializers n);
        object visit(Block n);
        object visit(BlockStatements n);
        object visit(LocalVariableDeclarationStatement n);
        object visit(LocalVariableDeclaration n);
        object visit(IfThenStatement n);
        object visit(IfThenElseStatement n);
        object visit(IfThenElseStatementNoShortIf n);
        object visit(EmptyStatement n);
        object visit(LabeledStatement n);
        object visit(LabeledStatementNoShortIf n);
        object visit(ExpressionStatement n);
        object visit(SwitchStatement n);
        object visit(SwitchBlock n);
        object visit(SwitchBlockStatementGroups n);
        object visit(SwitchBlockStatementGroup n);
        object visit(SwitchLabels n);
        object visit(WhileStatement n);
        object visit(WhileStatementNoShortIf n);
        object visit(DoStatement n);
        object visit(BasicForStatement n);
        object visit(ForStatementNoShortIf n);
        object visit(StatementExpressionList n);
        object visit(EnhancedForStatement n);
        object visit(BreakStatement n);
        object visit(ContinueStatement n);
        object visit(ReturnStatement n);
        object visit(ThrowStatement n);
        object visit(SynchronizedStatement n);
        object visit(Catches n);
        object visit(CatchClause n);
        object visit(Finally n);
        object visit(ArgumentList n);
        object visit(DimExprs n);
        object visit(DimExpr n);
        object visit(PostIncrementExpression n);
        object visit(PostDecrementExpression n);
        object visit(PreIncrementExpression n);
        object visit(PreDecrementExpression n);
        object visit(AndExpression n);
        object visit(ExclusiveOrExpression n);
        object visit(InclusiveOrExpression n);
        object visit(ConditionalAndExpression n);
        object visit(ConditionalOrExpression n);
        object visit(ConditionalExpression n);
        object visit(Assignment n);
        object visit(Commaopt n);
        object visit(Ellipsisopt n);
        object visit(LPGUserAction0 n);
        object visit(LPGUserAction1 n);
        object visit(LPGUserAction2 n);
        object visit(LPGUserAction3 n);
        object visit(LPGUserAction4 n);
        object visit(IntegralType0 n);
        object visit(IntegralType1 n);
        object visit(IntegralType2 n);
        object visit(IntegralType3 n);
        object visit(IntegralType4 n);
        object visit(FloatingPointType0 n);
        object visit(FloatingPointType1 n);
        object visit(WildcardBounds0 n);
        object visit(WildcardBounds1 n);
        object visit(ClassModifier0 n);
        object visit(ClassModifier1 n);
        object visit(ClassModifier2 n);
        object visit(ClassModifier3 n);
        object visit(ClassModifier4 n);
        object visit(ClassModifier5 n);
        object visit(ClassModifier6 n);
        object visit(FieldModifier0 n);
        object visit(FieldModifier1 n);
        object visit(FieldModifier2 n);
        object visit(FieldModifier3 n);
        object visit(FieldModifier4 n);
        object visit(FieldModifier5 n);
        object visit(FieldModifier6 n);
        object visit(MethodDeclarator0 n);
        object visit(MethodDeclarator1 n);
        object visit(MethodModifier0 n);
        object visit(MethodModifier1 n);
        object visit(MethodModifier2 n);
        object visit(MethodModifier3 n);
        object visit(MethodModifier4 n);
        object visit(MethodModifier5 n);
        object visit(MethodModifier6 n);
        object visit(MethodModifier7 n);
        object visit(MethodModifier8 n);
        object visit(ConstructorModifier0 n);
        object visit(ConstructorModifier1 n);
        object visit(ConstructorModifier2 n);
        object visit(ExplicitConstructorInvocation0 n);
        object visit(ExplicitConstructorInvocation1 n);
        object visit(ExplicitConstructorInvocation2 n);
        object visit(InterfaceModifier0 n);
        object visit(InterfaceModifier1 n);
        object visit(InterfaceModifier2 n);
        object visit(InterfaceModifier3 n);
        object visit(InterfaceModifier4 n);
        object visit(InterfaceModifier5 n);
        object visit(ExtendsInterfaces0 n);
        object visit(ExtendsInterfaces1 n);
        object visit(ConstantModifier0 n);
        object visit(ConstantModifier1 n);
        object visit(ConstantModifier2 n);
        object visit(AbstractMethodModifier0 n);
        object visit(AbstractMethodModifier1 n);
        object visit(AnnotationTypeElementDeclaration0 n);
        object visit(AnnotationTypeElementDeclaration1 n);
        object visit(AssertStatement0 n);
        object visit(AssertStatement1 n);
        object visit(SwitchLabel0 n);
        object visit(SwitchLabel1 n);
        object visit(SwitchLabel2 n);
        object visit(TryStatement0 n);
        object visit(TryStatement1 n);
        object visit(PrimaryNoNewArray0 n);
        object visit(PrimaryNoNewArray1 n);
        object visit(PrimaryNoNewArray2 n);
        object visit(PrimaryNoNewArray3 n);
        object visit(PrimaryNoNewArray4 n);
        object visit(Literal0 n);
        object visit(Literal1 n);
        object visit(Literal2 n);
        object visit(Literal3 n);
        object visit(Literal4 n);
        object visit(Literal5 n);
        object visit(Literal6 n);
        object visit(BooleanLiteral0 n);
        object visit(BooleanLiteral1 n);
        object visit(ClassInstanceCreationExpression0 n);
        object visit(ClassInstanceCreationExpression1 n);
        object visit(ArrayCreationExpression0 n);
        object visit(ArrayCreationExpression1 n);
        object visit(ArrayCreationExpression2 n);
        object visit(ArrayCreationExpression3 n);
        object visit(Dims0 n);
        object visit(Dims1 n);
        object visit(FieldAccess0 n);
        object visit(FieldAccess1 n);
        object visit(FieldAccess2 n);
        object visit(MethodInvocation0 n);
        object visit(MethodInvocation1 n);
        object visit(MethodInvocation2 n);
        object visit(MethodInvocation3 n);
        object visit(MethodInvocation4 n);
        object visit(ArrayAccess0 n);
        object visit(ArrayAccess1 n);
        object visit(UnaryExpression0 n);
        object visit(UnaryExpression1 n);
        object visit(UnaryExpressionNotPlusMinus0 n);
        object visit(UnaryExpressionNotPlusMinus1 n);
        object visit(CastExpression0 n);
        object visit(CastExpression1 n);
        object visit(MultiplicativeExpression0 n);
        object visit(MultiplicativeExpression1 n);
        object visit(MultiplicativeExpression2 n);
        object visit(AdditiveExpression0 n);
        object visit(AdditiveExpression1 n);
        object visit(ShiftExpression0 n);
        object visit(ShiftExpression1 n);
        object visit(ShiftExpression2 n);
        object visit(RelationalExpression0 n);
        object visit(RelationalExpression1 n);
        object visit(RelationalExpression2 n);
        object visit(RelationalExpression3 n);
        object visit(RelationalExpression4 n);
        object visit(EqualityExpression0 n);
        object visit(EqualityExpression1 n);
        object visit(AssignmentOperator0 n);
        object visit(AssignmentOperator1 n);
        object visit(AssignmentOperator2 n);
        object visit(AssignmentOperator3 n);
        object visit(AssignmentOperator4 n);
        object visit(AssignmentOperator5 n);
        object visit(AssignmentOperator6 n);
        object visit(AssignmentOperator7 n);
        object visit(AssignmentOperator8 n);
        object visit(AssignmentOperator9 n);
        object visit(AssignmentOperator10 n);
        object visit(AssignmentOperator11 n);

        object visit(Ast n);
    }
    public interface ResultArgumentVisitor
    {
        object visit(AstToken n, object o);
        object visit(identifier n, object o);
        object visit(PrimitiveType n, object o);
        object visit(ClassType n, object o);
        object visit(InterfaceType n, object o);
        object visit(TypeName n, object o);
        object visit(ArrayType n, object o);
        object visit(TypeParameter n, object o);
        object visit(TypeBound n, object o);
        object visit(AdditionalBoundList n, object o);
        object visit(AdditionalBound n, object o);
        object visit(TypeArguments n, object o);
        object visit(ActualTypeArgumentList n, object o);
        object visit(Wildcard n, object o);
        object visit(PackageName n, object o);
        object visit(ExpressionName n, object o);
        object visit(MethodName n, object o);
        object visit(PackageOrTypeName n, object o);
        object visit(AmbiguousName n, object o);
        object visit(CompilationUnit n, object o);
        object visit(ImportDeclarations n, object o);
        object visit(TypeDeclarations n, object o);
        object visit(PackageDeclaration n, object o);
        object visit(SingleTypeImportDeclaration n, object o);
        object visit(TypeImportOnDemandDeclaration n, object o);
        object visit(SingleStaticImportDeclaration n, object o);
        object visit(StaticImportOnDemandDeclaration n, object o);
        object visit(TypeDeclaration n, object o);
        object visit(NormalClassDeclaration n, object o);
        object visit(ClassModifiers n, object o);
        object visit(TypeParameters n, object o);
        object visit(TypeParameterList n, object o);
        object visit(Super n, object o);
        object visit(Interfaces n, object o);
        object visit(InterfaceTypeList n, object o);
        object visit(ClassBody n, object o);
        object visit(ClassBodyDeclarations n, object o);
        object visit(ClassMemberDeclaration n, object o);
        object visit(FieldDeclaration n, object o);
        object visit(VariableDeclarators n, object o);
        object visit(VariableDeclarator n, object o);
        object visit(VariableDeclaratorId n, object o);
        object visit(FieldModifiers n, object o);
        object visit(MethodDeclaration n, object o);
        object visit(MethodHeader n, object o);
        object visit(ResultType n, object o);
        object visit(FormalParameterList n, object o);
        object visit(FormalParameters n, object o);
        object visit(FormalParameter n, object o);
        object visit(VariableModifiers n, object o);
        object visit(VariableModifier n, object o);
        object visit(LastFormalParameter n, object o);
        object visit(MethodModifiers n, object o);
        object visit(Throws n, object o);
        object visit(ExceptionTypeList n, object o);
        object visit(MethodBody n, object o);
        object visit(StaticInitializer n, object o);
        object visit(ConstructorDeclaration n, object o);
        object visit(ConstructorDeclarator n, object o);
        object visit(ConstructorModifiers n, object o);
        object visit(ConstructorBody n, object o);
        object visit(EnumDeclaration n, object o);
        object visit(EnumBody n, object o);
        object visit(EnumConstants n, object o);
        object visit(EnumConstant n, object o);
        object visit(Arguments n, object o);
        object visit(EnumBodyDeclarations n, object o);
        object visit(NormalInterfaceDeclaration n, object o);
        object visit(InterfaceModifiers n, object o);
        object visit(InterfaceBody n, object o);
        object visit(InterfaceMemberDeclarations n, object o);
        object visit(InterfaceMemberDeclaration n, object o);
        object visit(ConstantDeclaration n, object o);
        object visit(ConstantModifiers n, object o);
        object visit(AbstractMethodDeclaration n, object o);
        object visit(AbstractMethodModifiers n, object o);
        object visit(AnnotationTypeDeclaration n, object o);
        object visit(AnnotationTypeBody n, object o);
        object visit(AnnotationTypeElementDeclarations n, object o);
        object visit(DefaultValue n, object o);
        object visit(Annotations n, object o);
        object visit(NormalAnnotation n, object o);
        object visit(ElementValuePairs n, object o);
        object visit(ElementValuePair n, object o);
        object visit(ElementValueArrayInitializer n, object o);
        object visit(ElementValues n, object o);
        object visit(MarkerAnnotation n, object o);
        object visit(SingleElementAnnotation n, object o);
        object visit(ArrayInitializer n, object o);
        object visit(VariableInitializers n, object o);
        object visit(Block n, object o);
        object visit(BlockStatements n, object o);
        object visit(LocalVariableDeclarationStatement n, object o);
        object visit(LocalVariableDeclaration n, object o);
        object visit(IfThenStatement n, object o);
        object visit(IfThenElseStatement n, object o);
        object visit(IfThenElseStatementNoShortIf n, object o);
        object visit(EmptyStatement n, object o);
        object visit(LabeledStatement n, object o);
        object visit(LabeledStatementNoShortIf n, object o);
        object visit(ExpressionStatement n, object o);
        object visit(SwitchStatement n, object o);
        object visit(SwitchBlock n, object o);
        object visit(SwitchBlockStatementGroups n, object o);
        object visit(SwitchBlockStatementGroup n, object o);
        object visit(SwitchLabels n, object o);
        object visit(WhileStatement n, object o);
        object visit(WhileStatementNoShortIf n, object o);
        object visit(DoStatement n, object o);
        object visit(BasicForStatement n, object o);
        object visit(ForStatementNoShortIf n, object o);
        object visit(StatementExpressionList n, object o);
        object visit(EnhancedForStatement n, object o);
        object visit(BreakStatement n, object o);
        object visit(ContinueStatement n, object o);
        object visit(ReturnStatement n, object o);
        object visit(ThrowStatement n, object o);
        object visit(SynchronizedStatement n, object o);
        object visit(Catches n, object o);
        object visit(CatchClause n, object o);
        object visit(Finally n, object o);
        object visit(ArgumentList n, object o);
        object visit(DimExprs n, object o);
        object visit(DimExpr n, object o);
        object visit(PostIncrementExpression n, object o);
        object visit(PostDecrementExpression n, object o);
        object visit(PreIncrementExpression n, object o);
        object visit(PreDecrementExpression n, object o);
        object visit(AndExpression n, object o);
        object visit(ExclusiveOrExpression n, object o);
        object visit(InclusiveOrExpression n, object o);
        object visit(ConditionalAndExpression n, object o);
        object visit(ConditionalOrExpression n, object o);
        object visit(ConditionalExpression n, object o);
        object visit(Assignment n, object o);
        object visit(Commaopt n, object o);
        object visit(Ellipsisopt n, object o);
        object visit(LPGUserAction0 n, object o);
        object visit(LPGUserAction1 n, object o);
        object visit(LPGUserAction2 n, object o);
        object visit(LPGUserAction3 n, object o);
        object visit(LPGUserAction4 n, object o);
        object visit(IntegralType0 n, object o);
        object visit(IntegralType1 n, object o);
        object visit(IntegralType2 n, object o);
        object visit(IntegralType3 n, object o);
        object visit(IntegralType4 n, object o);
        object visit(FloatingPointType0 n, object o);
        object visit(FloatingPointType1 n, object o);
        object visit(WildcardBounds0 n, object o);
        object visit(WildcardBounds1 n, object o);
        object visit(ClassModifier0 n, object o);
        object visit(ClassModifier1 n, object o);
        object visit(ClassModifier2 n, object o);
        object visit(ClassModifier3 n, object o);
        object visit(ClassModifier4 n, object o);
        object visit(ClassModifier5 n, object o);
        object visit(ClassModifier6 n, object o);
        object visit(FieldModifier0 n, object o);
        object visit(FieldModifier1 n, object o);
        object visit(FieldModifier2 n, object o);
        object visit(FieldModifier3 n, object o);
        object visit(FieldModifier4 n, object o);
        object visit(FieldModifier5 n, object o);
        object visit(FieldModifier6 n, object o);
        object visit(MethodDeclarator0 n, object o);
        object visit(MethodDeclarator1 n, object o);
        object visit(MethodModifier0 n, object o);
        object visit(MethodModifier1 n, object o);
        object visit(MethodModifier2 n, object o);
        object visit(MethodModifier3 n, object o);
        object visit(MethodModifier4 n, object o);
        object visit(MethodModifier5 n, object o);
        object visit(MethodModifier6 n, object o);
        object visit(MethodModifier7 n, object o);
        object visit(MethodModifier8 n, object o);
        object visit(ConstructorModifier0 n, object o);
        object visit(ConstructorModifier1 n, object o);
        object visit(ConstructorModifier2 n, object o);
        object visit(ExplicitConstructorInvocation0 n, object o);
        object visit(ExplicitConstructorInvocation1 n, object o);
        object visit(ExplicitConstructorInvocation2 n, object o);
        object visit(InterfaceModifier0 n, object o);
        object visit(InterfaceModifier1 n, object o);
        object visit(InterfaceModifier2 n, object o);
        object visit(InterfaceModifier3 n, object o);
        object visit(InterfaceModifier4 n, object o);
        object visit(InterfaceModifier5 n, object o);
        object visit(ExtendsInterfaces0 n, object o);
        object visit(ExtendsInterfaces1 n, object o);
        object visit(ConstantModifier0 n, object o);
        object visit(ConstantModifier1 n, object o);
        object visit(ConstantModifier2 n, object o);
        object visit(AbstractMethodModifier0 n, object o);
        object visit(AbstractMethodModifier1 n, object o);
        object visit(AnnotationTypeElementDeclaration0 n, object o);
        object visit(AnnotationTypeElementDeclaration1 n, object o);
        object visit(AssertStatement0 n, object o);
        object visit(AssertStatement1 n, object o);
        object visit(SwitchLabel0 n, object o);
        object visit(SwitchLabel1 n, object o);
        object visit(SwitchLabel2 n, object o);
        object visit(TryStatement0 n, object o);
        object visit(TryStatement1 n, object o);
        object visit(PrimaryNoNewArray0 n, object o);
        object visit(PrimaryNoNewArray1 n, object o);
        object visit(PrimaryNoNewArray2 n, object o);
        object visit(PrimaryNoNewArray3 n, object o);
        object visit(PrimaryNoNewArray4 n, object o);
        object visit(Literal0 n, object o);
        object visit(Literal1 n, object o);
        object visit(Literal2 n, object o);
        object visit(Literal3 n, object o);
        object visit(Literal4 n, object o);
        object visit(Literal5 n, object o);
        object visit(Literal6 n, object o);
        object visit(BooleanLiteral0 n, object o);
        object visit(BooleanLiteral1 n, object o);
        object visit(ClassInstanceCreationExpression0 n, object o);
        object visit(ClassInstanceCreationExpression1 n, object o);
        object visit(ArrayCreationExpression0 n, object o);
        object visit(ArrayCreationExpression1 n, object o);
        object visit(ArrayCreationExpression2 n, object o);
        object visit(ArrayCreationExpression3 n, object o);
        object visit(Dims0 n, object o);
        object visit(Dims1 n, object o);
        object visit(FieldAccess0 n, object o);
        object visit(FieldAccess1 n, object o);
        object visit(FieldAccess2 n, object o);
        object visit(MethodInvocation0 n, object o);
        object visit(MethodInvocation1 n, object o);
        object visit(MethodInvocation2 n, object o);
        object visit(MethodInvocation3 n, object o);
        object visit(MethodInvocation4 n, object o);
        object visit(ArrayAccess0 n, object o);
        object visit(ArrayAccess1 n, object o);
        object visit(UnaryExpression0 n, object o);
        object visit(UnaryExpression1 n, object o);
        object visit(UnaryExpressionNotPlusMinus0 n, object o);
        object visit(UnaryExpressionNotPlusMinus1 n, object o);
        object visit(CastExpression0 n, object o);
        object visit(CastExpression1 n, object o);
        object visit(MultiplicativeExpression0 n, object o);
        object visit(MultiplicativeExpression1 n, object o);
        object visit(MultiplicativeExpression2 n, object o);
        object visit(AdditiveExpression0 n, object o);
        object visit(AdditiveExpression1 n, object o);
        object visit(ShiftExpression0 n, object o);
        object visit(ShiftExpression1 n, object o);
        object visit(ShiftExpression2 n, object o);
        object visit(RelationalExpression0 n, object o);
        object visit(RelationalExpression1 n, object o);
        object visit(RelationalExpression2 n, object o);
        object visit(RelationalExpression3 n, object o);
        object visit(RelationalExpression4 n, object o);
        object visit(EqualityExpression0 n, object o);
        object visit(EqualityExpression1 n, object o);
        object visit(AssignmentOperator0 n, object o);
        object visit(AssignmentOperator1 n, object o);
        object visit(AssignmentOperator2 n, object o);
        object visit(AssignmentOperator3 n, object o);
        object visit(AssignmentOperator4 n, object o);
        object visit(AssignmentOperator5 n, object o);
        object visit(AssignmentOperator6 n, object o);
        object visit(AssignmentOperator7 n, object o);
        object visit(AssignmentOperator8 n, object o);
        object visit(AssignmentOperator9 n, object o);
        object visit(AssignmentOperator10 n, object o);
        object visit(AssignmentOperator11 n, object o);

        object visit(Ast n, object o);
    }
    public abstract class AbstractVisitor : Visitor, ArgumentVisitor
    {
        public abstract void unimplementedVisitor(string s);

        public void visit(AstToken n) { unimplementedVisitor("visit(AstToken)"); }
        public void visit(AstToken n, object o) { unimplementedVisitor("visit(AstToken, object)"); }

        public void visit(identifier n) { unimplementedVisitor("visit(identifier)"); }
        public void visit(identifier n, object o) { unimplementedVisitor("visit(identifier, object)"); }

        public void visit(PrimitiveType n) { unimplementedVisitor("visit(PrimitiveType)"); }
        public void visit(PrimitiveType n, object o) { unimplementedVisitor("visit(PrimitiveType, object)"); }

        public void visit(ClassType n) { unimplementedVisitor("visit(ClassType)"); }
        public void visit(ClassType n, object o) { unimplementedVisitor("visit(ClassType, object)"); }

        public void visit(InterfaceType n) { unimplementedVisitor("visit(InterfaceType)"); }
        public void visit(InterfaceType n, object o) { unimplementedVisitor("visit(InterfaceType, object)"); }

        public void visit(TypeName n) { unimplementedVisitor("visit(TypeName)"); }
        public void visit(TypeName n, object o) { unimplementedVisitor("visit(TypeName, object)"); }

        public void visit(ArrayType n) { unimplementedVisitor("visit(ArrayType)"); }
        public void visit(ArrayType n, object o) { unimplementedVisitor("visit(ArrayType, object)"); }

        public void visit(TypeParameter n) { unimplementedVisitor("visit(TypeParameter)"); }
        public void visit(TypeParameter n, object o) { unimplementedVisitor("visit(TypeParameter, object)"); }

        public void visit(TypeBound n) { unimplementedVisitor("visit(TypeBound)"); }
        public void visit(TypeBound n, object o) { unimplementedVisitor("visit(TypeBound, object)"); }

        public void visit(AdditionalBoundList n) { unimplementedVisitor("visit(AdditionalBoundList)"); }
        public void visit(AdditionalBoundList n, object o) { unimplementedVisitor("visit(AdditionalBoundList, object)"); }

        public void visit(AdditionalBound n) { unimplementedVisitor("visit(AdditionalBound)"); }
        public void visit(AdditionalBound n, object o) { unimplementedVisitor("visit(AdditionalBound, object)"); }

        public void visit(TypeArguments n) { unimplementedVisitor("visit(TypeArguments)"); }
        public void visit(TypeArguments n, object o) { unimplementedVisitor("visit(TypeArguments, object)"); }

        public void visit(ActualTypeArgumentList n) { unimplementedVisitor("visit(ActualTypeArgumentList)"); }
        public void visit(ActualTypeArgumentList n, object o) { unimplementedVisitor("visit(ActualTypeArgumentList, object)"); }

        public void visit(Wildcard n) { unimplementedVisitor("visit(Wildcard)"); }
        public void visit(Wildcard n, object o) { unimplementedVisitor("visit(Wildcard, object)"); }

        public void visit(PackageName n) { unimplementedVisitor("visit(PackageName)"); }
        public void visit(PackageName n, object o) { unimplementedVisitor("visit(PackageName, object)"); }

        public void visit(ExpressionName n) { unimplementedVisitor("visit(ExpressionName)"); }
        public void visit(ExpressionName n, object o) { unimplementedVisitor("visit(ExpressionName, object)"); }

        public void visit(MethodName n) { unimplementedVisitor("visit(MethodName)"); }
        public void visit(MethodName n, object o) { unimplementedVisitor("visit(MethodName, object)"); }

        public void visit(PackageOrTypeName n) { unimplementedVisitor("visit(PackageOrTypeName)"); }
        public void visit(PackageOrTypeName n, object o) { unimplementedVisitor("visit(PackageOrTypeName, object)"); }

        public void visit(AmbiguousName n) { unimplementedVisitor("visit(AmbiguousName)"); }
        public void visit(AmbiguousName n, object o) { unimplementedVisitor("visit(AmbiguousName, object)"); }

        public void visit(CompilationUnit n) { unimplementedVisitor("visit(CompilationUnit)"); }
        public void visit(CompilationUnit n, object o) { unimplementedVisitor("visit(CompilationUnit, object)"); }

        public void visit(ImportDeclarations n) { unimplementedVisitor("visit(ImportDeclarations)"); }
        public void visit(ImportDeclarations n, object o) { unimplementedVisitor("visit(ImportDeclarations, object)"); }

        public void visit(TypeDeclarations n) { unimplementedVisitor("visit(TypeDeclarations)"); }
        public void visit(TypeDeclarations n, object o) { unimplementedVisitor("visit(TypeDeclarations, object)"); }

        public void visit(PackageDeclaration n) { unimplementedVisitor("visit(PackageDeclaration)"); }
        public void visit(PackageDeclaration n, object o) { unimplementedVisitor("visit(PackageDeclaration, object)"); }

        public void visit(SingleTypeImportDeclaration n) { unimplementedVisitor("visit(SingleTypeImportDeclaration)"); }
        public void visit(SingleTypeImportDeclaration n, object o) { unimplementedVisitor("visit(SingleTypeImportDeclaration, object)"); }

        public void visit(TypeImportOnDemandDeclaration n) { unimplementedVisitor("visit(TypeImportOnDemandDeclaration)"); }
        public void visit(TypeImportOnDemandDeclaration n, object o) { unimplementedVisitor("visit(TypeImportOnDemandDeclaration, object)"); }

        public void visit(SingleStaticImportDeclaration n) { unimplementedVisitor("visit(SingleStaticImportDeclaration)"); }
        public void visit(SingleStaticImportDeclaration n, object o) { unimplementedVisitor("visit(SingleStaticImportDeclaration, object)"); }

        public void visit(StaticImportOnDemandDeclaration n) { unimplementedVisitor("visit(StaticImportOnDemandDeclaration)"); }
        public void visit(StaticImportOnDemandDeclaration n, object o) { unimplementedVisitor("visit(StaticImportOnDemandDeclaration, object)"); }

        public void visit(TypeDeclaration n) { unimplementedVisitor("visit(TypeDeclaration)"); }
        public void visit(TypeDeclaration n, object o) { unimplementedVisitor("visit(TypeDeclaration, object)"); }

        public void visit(NormalClassDeclaration n) { unimplementedVisitor("visit(NormalClassDeclaration)"); }
        public void visit(NormalClassDeclaration n, object o) { unimplementedVisitor("visit(NormalClassDeclaration, object)"); }

        public void visit(ClassModifiers n) { unimplementedVisitor("visit(ClassModifiers)"); }
        public void visit(ClassModifiers n, object o) { unimplementedVisitor("visit(ClassModifiers, object)"); }

        public void visit(TypeParameters n) { unimplementedVisitor("visit(TypeParameters)"); }
        public void visit(TypeParameters n, object o) { unimplementedVisitor("visit(TypeParameters, object)"); }

        public void visit(TypeParameterList n) { unimplementedVisitor("visit(TypeParameterList)"); }
        public void visit(TypeParameterList n, object o) { unimplementedVisitor("visit(TypeParameterList, object)"); }

        public void visit(Super n) { unimplementedVisitor("visit(Super)"); }
        public void visit(Super n, object o) { unimplementedVisitor("visit(Super, object)"); }

        public void visit(Interfaces n) { unimplementedVisitor("visit(Interfaces)"); }
        public void visit(Interfaces n, object o) { unimplementedVisitor("visit(Interfaces, object)"); }

        public void visit(InterfaceTypeList n) { unimplementedVisitor("visit(InterfaceTypeList)"); }
        public void visit(InterfaceTypeList n, object o) { unimplementedVisitor("visit(InterfaceTypeList, object)"); }

        public void visit(ClassBody n) { unimplementedVisitor("visit(ClassBody)"); }
        public void visit(ClassBody n, object o) { unimplementedVisitor("visit(ClassBody, object)"); }

        public void visit(ClassBodyDeclarations n) { unimplementedVisitor("visit(ClassBodyDeclarations)"); }
        public void visit(ClassBodyDeclarations n, object o) { unimplementedVisitor("visit(ClassBodyDeclarations, object)"); }

        public void visit(ClassMemberDeclaration n) { unimplementedVisitor("visit(ClassMemberDeclaration)"); }
        public void visit(ClassMemberDeclaration n, object o) { unimplementedVisitor("visit(ClassMemberDeclaration, object)"); }

        public void visit(FieldDeclaration n) { unimplementedVisitor("visit(FieldDeclaration)"); }
        public void visit(FieldDeclaration n, object o) { unimplementedVisitor("visit(FieldDeclaration, object)"); }

        public void visit(VariableDeclarators n) { unimplementedVisitor("visit(VariableDeclarators)"); }
        public void visit(VariableDeclarators n, object o) { unimplementedVisitor("visit(VariableDeclarators, object)"); }

        public void visit(VariableDeclarator n) { unimplementedVisitor("visit(VariableDeclarator)"); }
        public void visit(VariableDeclarator n, object o) { unimplementedVisitor("visit(VariableDeclarator, object)"); }

        public void visit(VariableDeclaratorId n) { unimplementedVisitor("visit(VariableDeclaratorId)"); }
        public void visit(VariableDeclaratorId n, object o) { unimplementedVisitor("visit(VariableDeclaratorId, object)"); }

        public void visit(FieldModifiers n) { unimplementedVisitor("visit(FieldModifiers)"); }
        public void visit(FieldModifiers n, object o) { unimplementedVisitor("visit(FieldModifiers, object)"); }

        public void visit(MethodDeclaration n) { unimplementedVisitor("visit(MethodDeclaration)"); }
        public void visit(MethodDeclaration n, object o) { unimplementedVisitor("visit(MethodDeclaration, object)"); }

        public void visit(MethodHeader n) { unimplementedVisitor("visit(MethodHeader)"); }
        public void visit(MethodHeader n, object o) { unimplementedVisitor("visit(MethodHeader, object)"); }

        public void visit(ResultType n) { unimplementedVisitor("visit(ResultType)"); }
        public void visit(ResultType n, object o) { unimplementedVisitor("visit(ResultType, object)"); }

        public void visit(FormalParameterList n) { unimplementedVisitor("visit(FormalParameterList)"); }
        public void visit(FormalParameterList n, object o) { unimplementedVisitor("visit(FormalParameterList, object)"); }

        public void visit(FormalParameters n) { unimplementedVisitor("visit(FormalParameters)"); }
        public void visit(FormalParameters n, object o) { unimplementedVisitor("visit(FormalParameters, object)"); }

        public void visit(FormalParameter n) { unimplementedVisitor("visit(FormalParameter)"); }
        public void visit(FormalParameter n, object o) { unimplementedVisitor("visit(FormalParameter, object)"); }

        public void visit(VariableModifiers n) { unimplementedVisitor("visit(VariableModifiers)"); }
        public void visit(VariableModifiers n, object o) { unimplementedVisitor("visit(VariableModifiers, object)"); }

        public void visit(VariableModifier n) { unimplementedVisitor("visit(VariableModifier)"); }
        public void visit(VariableModifier n, object o) { unimplementedVisitor("visit(VariableModifier, object)"); }

        public void visit(LastFormalParameter n) { unimplementedVisitor("visit(LastFormalParameter)"); }
        public void visit(LastFormalParameter n, object o) { unimplementedVisitor("visit(LastFormalParameter, object)"); }

        public void visit(MethodModifiers n) { unimplementedVisitor("visit(MethodModifiers)"); }
        public void visit(MethodModifiers n, object o) { unimplementedVisitor("visit(MethodModifiers, object)"); }

        public void visit(Throws n) { unimplementedVisitor("visit(Throws)"); }
        public void visit(Throws n, object o) { unimplementedVisitor("visit(Throws, object)"); }

        public void visit(ExceptionTypeList n) { unimplementedVisitor("visit(ExceptionTypeList)"); }
        public void visit(ExceptionTypeList n, object o) { unimplementedVisitor("visit(ExceptionTypeList, object)"); }

        public void visit(MethodBody n) { unimplementedVisitor("visit(MethodBody)"); }
        public void visit(MethodBody n, object o) { unimplementedVisitor("visit(MethodBody, object)"); }

        public void visit(StaticInitializer n) { unimplementedVisitor("visit(StaticInitializer)"); }
        public void visit(StaticInitializer n, object o) { unimplementedVisitor("visit(StaticInitializer, object)"); }

        public void visit(ConstructorDeclaration n) { unimplementedVisitor("visit(ConstructorDeclaration)"); }
        public void visit(ConstructorDeclaration n, object o) { unimplementedVisitor("visit(ConstructorDeclaration, object)"); }

        public void visit(ConstructorDeclarator n) { unimplementedVisitor("visit(ConstructorDeclarator)"); }
        public void visit(ConstructorDeclarator n, object o) { unimplementedVisitor("visit(ConstructorDeclarator, object)"); }

        public void visit(ConstructorModifiers n) { unimplementedVisitor("visit(ConstructorModifiers)"); }
        public void visit(ConstructorModifiers n, object o) { unimplementedVisitor("visit(ConstructorModifiers, object)"); }

        public void visit(ConstructorBody n) { unimplementedVisitor("visit(ConstructorBody)"); }
        public void visit(ConstructorBody n, object o) { unimplementedVisitor("visit(ConstructorBody, object)"); }

        public void visit(EnumDeclaration n) { unimplementedVisitor("visit(EnumDeclaration)"); }
        public void visit(EnumDeclaration n, object o) { unimplementedVisitor("visit(EnumDeclaration, object)"); }

        public void visit(EnumBody n) { unimplementedVisitor("visit(EnumBody)"); }
        public void visit(EnumBody n, object o) { unimplementedVisitor("visit(EnumBody, object)"); }

        public void visit(EnumConstants n) { unimplementedVisitor("visit(EnumConstants)"); }
        public void visit(EnumConstants n, object o) { unimplementedVisitor("visit(EnumConstants, object)"); }

        public void visit(EnumConstant n) { unimplementedVisitor("visit(EnumConstant)"); }
        public void visit(EnumConstant n, object o) { unimplementedVisitor("visit(EnumConstant, object)"); }

        public void visit(Arguments n) { unimplementedVisitor("visit(Arguments)"); }
        public void visit(Arguments n, object o) { unimplementedVisitor("visit(Arguments, object)"); }

        public void visit(EnumBodyDeclarations n) { unimplementedVisitor("visit(EnumBodyDeclarations)"); }
        public void visit(EnumBodyDeclarations n, object o) { unimplementedVisitor("visit(EnumBodyDeclarations, object)"); }

        public void visit(NormalInterfaceDeclaration n) { unimplementedVisitor("visit(NormalInterfaceDeclaration)"); }
        public void visit(NormalInterfaceDeclaration n, object o) { unimplementedVisitor("visit(NormalInterfaceDeclaration, object)"); }

        public void visit(InterfaceModifiers n) { unimplementedVisitor("visit(InterfaceModifiers)"); }
        public void visit(InterfaceModifiers n, object o) { unimplementedVisitor("visit(InterfaceModifiers, object)"); }

        public void visit(InterfaceBody n) { unimplementedVisitor("visit(InterfaceBody)"); }
        public void visit(InterfaceBody n, object o) { unimplementedVisitor("visit(InterfaceBody, object)"); }

        public void visit(InterfaceMemberDeclarations n) { unimplementedVisitor("visit(InterfaceMemberDeclarations)"); }
        public void visit(InterfaceMemberDeclarations n, object o) { unimplementedVisitor("visit(InterfaceMemberDeclarations, object)"); }

        public void visit(InterfaceMemberDeclaration n) { unimplementedVisitor("visit(InterfaceMemberDeclaration)"); }
        public void visit(InterfaceMemberDeclaration n, object o) { unimplementedVisitor("visit(InterfaceMemberDeclaration, object)"); }

        public void visit(ConstantDeclaration n) { unimplementedVisitor("visit(ConstantDeclaration)"); }
        public void visit(ConstantDeclaration n, object o) { unimplementedVisitor("visit(ConstantDeclaration, object)"); }

        public void visit(ConstantModifiers n) { unimplementedVisitor("visit(ConstantModifiers)"); }
        public void visit(ConstantModifiers n, object o) { unimplementedVisitor("visit(ConstantModifiers, object)"); }

        public void visit(AbstractMethodDeclaration n) { unimplementedVisitor("visit(AbstractMethodDeclaration)"); }
        public void visit(AbstractMethodDeclaration n, object o) { unimplementedVisitor("visit(AbstractMethodDeclaration, object)"); }

        public void visit(AbstractMethodModifiers n) { unimplementedVisitor("visit(AbstractMethodModifiers)"); }
        public void visit(AbstractMethodModifiers n, object o) { unimplementedVisitor("visit(AbstractMethodModifiers, object)"); }

        public void visit(AnnotationTypeDeclaration n) { unimplementedVisitor("visit(AnnotationTypeDeclaration)"); }
        public void visit(AnnotationTypeDeclaration n, object o) { unimplementedVisitor("visit(AnnotationTypeDeclaration, object)"); }

        public void visit(AnnotationTypeBody n) { unimplementedVisitor("visit(AnnotationTypeBody)"); }
        public void visit(AnnotationTypeBody n, object o) { unimplementedVisitor("visit(AnnotationTypeBody, object)"); }

        public void visit(AnnotationTypeElementDeclarations n) { unimplementedVisitor("visit(AnnotationTypeElementDeclarations)"); }
        public void visit(AnnotationTypeElementDeclarations n, object o) { unimplementedVisitor("visit(AnnotationTypeElementDeclarations, object)"); }

        public void visit(DefaultValue n) { unimplementedVisitor("visit(DefaultValue)"); }
        public void visit(DefaultValue n, object o) { unimplementedVisitor("visit(DefaultValue, object)"); }

        public void visit(Annotations n) { unimplementedVisitor("visit(Annotations)"); }
        public void visit(Annotations n, object o) { unimplementedVisitor("visit(Annotations, object)"); }

        public void visit(NormalAnnotation n) { unimplementedVisitor("visit(NormalAnnotation)"); }
        public void visit(NormalAnnotation n, object o) { unimplementedVisitor("visit(NormalAnnotation, object)"); }

        public void visit(ElementValuePairs n) { unimplementedVisitor("visit(ElementValuePairs)"); }
        public void visit(ElementValuePairs n, object o) { unimplementedVisitor("visit(ElementValuePairs, object)"); }

        public void visit(ElementValuePair n) { unimplementedVisitor("visit(ElementValuePair)"); }
        public void visit(ElementValuePair n, object o) { unimplementedVisitor("visit(ElementValuePair, object)"); }

        public void visit(ElementValueArrayInitializer n) { unimplementedVisitor("visit(ElementValueArrayInitializer)"); }
        public void visit(ElementValueArrayInitializer n, object o) { unimplementedVisitor("visit(ElementValueArrayInitializer, object)"); }

        public void visit(ElementValues n) { unimplementedVisitor("visit(ElementValues)"); }
        public void visit(ElementValues n, object o) { unimplementedVisitor("visit(ElementValues, object)"); }

        public void visit(MarkerAnnotation n) { unimplementedVisitor("visit(MarkerAnnotation)"); }
        public void visit(MarkerAnnotation n, object o) { unimplementedVisitor("visit(MarkerAnnotation, object)"); }

        public void visit(SingleElementAnnotation n) { unimplementedVisitor("visit(SingleElementAnnotation)"); }
        public void visit(SingleElementAnnotation n, object o) { unimplementedVisitor("visit(SingleElementAnnotation, object)"); }

        public void visit(ArrayInitializer n) { unimplementedVisitor("visit(ArrayInitializer)"); }
        public void visit(ArrayInitializer n, object o) { unimplementedVisitor("visit(ArrayInitializer, object)"); }

        public void visit(VariableInitializers n) { unimplementedVisitor("visit(VariableInitializers)"); }
        public void visit(VariableInitializers n, object o) { unimplementedVisitor("visit(VariableInitializers, object)"); }

        public void visit(Block n) { unimplementedVisitor("visit(Block)"); }
        public void visit(Block n, object o) { unimplementedVisitor("visit(Block, object)"); }

        public void visit(BlockStatements n) { unimplementedVisitor("visit(BlockStatements)"); }
        public void visit(BlockStatements n, object o) { unimplementedVisitor("visit(BlockStatements, object)"); }

        public void visit(LocalVariableDeclarationStatement n) { unimplementedVisitor("visit(LocalVariableDeclarationStatement)"); }
        public void visit(LocalVariableDeclarationStatement n, object o) { unimplementedVisitor("visit(LocalVariableDeclarationStatement, object)"); }

        public void visit(LocalVariableDeclaration n) { unimplementedVisitor("visit(LocalVariableDeclaration)"); }
        public void visit(LocalVariableDeclaration n, object o) { unimplementedVisitor("visit(LocalVariableDeclaration, object)"); }

        public void visit(IfThenStatement n) { unimplementedVisitor("visit(IfThenStatement)"); }
        public void visit(IfThenStatement n, object o) { unimplementedVisitor("visit(IfThenStatement, object)"); }

        public void visit(IfThenElseStatement n) { unimplementedVisitor("visit(IfThenElseStatement)"); }
        public void visit(IfThenElseStatement n, object o) { unimplementedVisitor("visit(IfThenElseStatement, object)"); }

        public void visit(IfThenElseStatementNoShortIf n) { unimplementedVisitor("visit(IfThenElseStatementNoShortIf)"); }
        public void visit(IfThenElseStatementNoShortIf n, object o) { unimplementedVisitor("visit(IfThenElseStatementNoShortIf, object)"); }

        public void visit(EmptyStatement n) { unimplementedVisitor("visit(EmptyStatement)"); }
        public void visit(EmptyStatement n, object o) { unimplementedVisitor("visit(EmptyStatement, object)"); }

        public void visit(LabeledStatement n) { unimplementedVisitor("visit(LabeledStatement)"); }
        public void visit(LabeledStatement n, object o) { unimplementedVisitor("visit(LabeledStatement, object)"); }

        public void visit(LabeledStatementNoShortIf n) { unimplementedVisitor("visit(LabeledStatementNoShortIf)"); }
        public void visit(LabeledStatementNoShortIf n, object o) { unimplementedVisitor("visit(LabeledStatementNoShortIf, object)"); }

        public void visit(ExpressionStatement n) { unimplementedVisitor("visit(ExpressionStatement)"); }
        public void visit(ExpressionStatement n, object o) { unimplementedVisitor("visit(ExpressionStatement, object)"); }

        public void visit(SwitchStatement n) { unimplementedVisitor("visit(SwitchStatement)"); }
        public void visit(SwitchStatement n, object o) { unimplementedVisitor("visit(SwitchStatement, object)"); }

        public void visit(SwitchBlock n) { unimplementedVisitor("visit(SwitchBlock)"); }
        public void visit(SwitchBlock n, object o) { unimplementedVisitor("visit(SwitchBlock, object)"); }

        public void visit(SwitchBlockStatementGroups n) { unimplementedVisitor("visit(SwitchBlockStatementGroups)"); }
        public void visit(SwitchBlockStatementGroups n, object o) { unimplementedVisitor("visit(SwitchBlockStatementGroups, object)"); }

        public void visit(SwitchBlockStatementGroup n) { unimplementedVisitor("visit(SwitchBlockStatementGroup)"); }
        public void visit(SwitchBlockStatementGroup n, object o) { unimplementedVisitor("visit(SwitchBlockStatementGroup, object)"); }

        public void visit(SwitchLabels n) { unimplementedVisitor("visit(SwitchLabels)"); }
        public void visit(SwitchLabels n, object o) { unimplementedVisitor("visit(SwitchLabels, object)"); }

        public void visit(WhileStatement n) { unimplementedVisitor("visit(WhileStatement)"); }
        public void visit(WhileStatement n, object o) { unimplementedVisitor("visit(WhileStatement, object)"); }

        public void visit(WhileStatementNoShortIf n) { unimplementedVisitor("visit(WhileStatementNoShortIf)"); }
        public void visit(WhileStatementNoShortIf n, object o) { unimplementedVisitor("visit(WhileStatementNoShortIf, object)"); }

        public void visit(DoStatement n) { unimplementedVisitor("visit(DoStatement)"); }
        public void visit(DoStatement n, object o) { unimplementedVisitor("visit(DoStatement, object)"); }

        public void visit(BasicForStatement n) { unimplementedVisitor("visit(BasicForStatement)"); }
        public void visit(BasicForStatement n, object o) { unimplementedVisitor("visit(BasicForStatement, object)"); }

        public void visit(ForStatementNoShortIf n) { unimplementedVisitor("visit(ForStatementNoShortIf)"); }
        public void visit(ForStatementNoShortIf n, object o) { unimplementedVisitor("visit(ForStatementNoShortIf, object)"); }

        public void visit(StatementExpressionList n) { unimplementedVisitor("visit(StatementExpressionList)"); }
        public void visit(StatementExpressionList n, object o) { unimplementedVisitor("visit(StatementExpressionList, object)"); }

        public void visit(EnhancedForStatement n) { unimplementedVisitor("visit(EnhancedForStatement)"); }
        public void visit(EnhancedForStatement n, object o) { unimplementedVisitor("visit(EnhancedForStatement, object)"); }

        public void visit(BreakStatement n) { unimplementedVisitor("visit(BreakStatement)"); }
        public void visit(BreakStatement n, object o) { unimplementedVisitor("visit(BreakStatement, object)"); }

        public void visit(ContinueStatement n) { unimplementedVisitor("visit(ContinueStatement)"); }
        public void visit(ContinueStatement n, object o) { unimplementedVisitor("visit(ContinueStatement, object)"); }

        public void visit(ReturnStatement n) { unimplementedVisitor("visit(ReturnStatement)"); }
        public void visit(ReturnStatement n, object o) { unimplementedVisitor("visit(ReturnStatement, object)"); }

        public void visit(ThrowStatement n) { unimplementedVisitor("visit(ThrowStatement)"); }
        public void visit(ThrowStatement n, object o) { unimplementedVisitor("visit(ThrowStatement, object)"); }

        public void visit(SynchronizedStatement n) { unimplementedVisitor("visit(SynchronizedStatement)"); }
        public void visit(SynchronizedStatement n, object o) { unimplementedVisitor("visit(SynchronizedStatement, object)"); }

        public void visit(Catches n) { unimplementedVisitor("visit(Catches)"); }
        public void visit(Catches n, object o) { unimplementedVisitor("visit(Catches, object)"); }

        public void visit(CatchClause n) { unimplementedVisitor("visit(CatchClause)"); }
        public void visit(CatchClause n, object o) { unimplementedVisitor("visit(CatchClause, object)"); }

        public void visit(Finally n) { unimplementedVisitor("visit(Finally)"); }
        public void visit(Finally n, object o) { unimplementedVisitor("visit(Finally, object)"); }

        public void visit(ArgumentList n) { unimplementedVisitor("visit(ArgumentList)"); }
        public void visit(ArgumentList n, object o) { unimplementedVisitor("visit(ArgumentList, object)"); }

        public void visit(DimExprs n) { unimplementedVisitor("visit(DimExprs)"); }
        public void visit(DimExprs n, object o) { unimplementedVisitor("visit(DimExprs, object)"); }

        public void visit(DimExpr n) { unimplementedVisitor("visit(DimExpr)"); }
        public void visit(DimExpr n, object o) { unimplementedVisitor("visit(DimExpr, object)"); }

        public void visit(PostIncrementExpression n) { unimplementedVisitor("visit(PostIncrementExpression)"); }
        public void visit(PostIncrementExpression n, object o) { unimplementedVisitor("visit(PostIncrementExpression, object)"); }

        public void visit(PostDecrementExpression n) { unimplementedVisitor("visit(PostDecrementExpression)"); }
        public void visit(PostDecrementExpression n, object o) { unimplementedVisitor("visit(PostDecrementExpression, object)"); }

        public void visit(PreIncrementExpression n) { unimplementedVisitor("visit(PreIncrementExpression)"); }
        public void visit(PreIncrementExpression n, object o) { unimplementedVisitor("visit(PreIncrementExpression, object)"); }

        public void visit(PreDecrementExpression n) { unimplementedVisitor("visit(PreDecrementExpression)"); }
        public void visit(PreDecrementExpression n, object o) { unimplementedVisitor("visit(PreDecrementExpression, object)"); }

        public void visit(AndExpression n) { unimplementedVisitor("visit(AndExpression)"); }
        public void visit(AndExpression n, object o) { unimplementedVisitor("visit(AndExpression, object)"); }

        public void visit(ExclusiveOrExpression n) { unimplementedVisitor("visit(ExclusiveOrExpression)"); }
        public void visit(ExclusiveOrExpression n, object o) { unimplementedVisitor("visit(ExclusiveOrExpression, object)"); }

        public void visit(InclusiveOrExpression n) { unimplementedVisitor("visit(InclusiveOrExpression)"); }
        public void visit(InclusiveOrExpression n, object o) { unimplementedVisitor("visit(InclusiveOrExpression, object)"); }

        public void visit(ConditionalAndExpression n) { unimplementedVisitor("visit(ConditionalAndExpression)"); }
        public void visit(ConditionalAndExpression n, object o) { unimplementedVisitor("visit(ConditionalAndExpression, object)"); }

        public void visit(ConditionalOrExpression n) { unimplementedVisitor("visit(ConditionalOrExpression)"); }
        public void visit(ConditionalOrExpression n, object o) { unimplementedVisitor("visit(ConditionalOrExpression, object)"); }

        public void visit(ConditionalExpression n) { unimplementedVisitor("visit(ConditionalExpression)"); }
        public void visit(ConditionalExpression n, object o) { unimplementedVisitor("visit(ConditionalExpression, object)"); }

        public void visit(Assignment n) { unimplementedVisitor("visit(Assignment)"); }
        public void visit(Assignment n, object o) { unimplementedVisitor("visit(Assignment, object)"); }

        public void visit(Commaopt n) { unimplementedVisitor("visit(Commaopt)"); }
        public void visit(Commaopt n, object o) { unimplementedVisitor("visit(Commaopt, object)"); }

        public void visit(Ellipsisopt n) { unimplementedVisitor("visit(Ellipsisopt)"); }
        public void visit(Ellipsisopt n, object o) { unimplementedVisitor("visit(Ellipsisopt, object)"); }

        public void visit(LPGUserAction0 n) { unimplementedVisitor("visit(LPGUserAction0)"); }
        public void visit(LPGUserAction0 n, object o) { unimplementedVisitor("visit(LPGUserAction0, object)"); }

        public void visit(LPGUserAction1 n) { unimplementedVisitor("visit(LPGUserAction1)"); }
        public void visit(LPGUserAction1 n, object o) { unimplementedVisitor("visit(LPGUserAction1, object)"); }

        public void visit(LPGUserAction2 n) { unimplementedVisitor("visit(LPGUserAction2)"); }
        public void visit(LPGUserAction2 n, object o) { unimplementedVisitor("visit(LPGUserAction2, object)"); }

        public void visit(LPGUserAction3 n) { unimplementedVisitor("visit(LPGUserAction3)"); }
        public void visit(LPGUserAction3 n, object o) { unimplementedVisitor("visit(LPGUserAction3, object)"); }

        public void visit(LPGUserAction4 n) { unimplementedVisitor("visit(LPGUserAction4)"); }
        public void visit(LPGUserAction4 n, object o) { unimplementedVisitor("visit(LPGUserAction4, object)"); }

        public void visit(IntegralType0 n) { unimplementedVisitor("visit(IntegralType0)"); }
        public void visit(IntegralType0 n, object o) { unimplementedVisitor("visit(IntegralType0, object)"); }

        public void visit(IntegralType1 n) { unimplementedVisitor("visit(IntegralType1)"); }
        public void visit(IntegralType1 n, object o) { unimplementedVisitor("visit(IntegralType1, object)"); }

        public void visit(IntegralType2 n) { unimplementedVisitor("visit(IntegralType2)"); }
        public void visit(IntegralType2 n, object o) { unimplementedVisitor("visit(IntegralType2, object)"); }

        public void visit(IntegralType3 n) { unimplementedVisitor("visit(IntegralType3)"); }
        public void visit(IntegralType3 n, object o) { unimplementedVisitor("visit(IntegralType3, object)"); }

        public void visit(IntegralType4 n) { unimplementedVisitor("visit(IntegralType4)"); }
        public void visit(IntegralType4 n, object o) { unimplementedVisitor("visit(IntegralType4, object)"); }

        public void visit(FloatingPointType0 n) { unimplementedVisitor("visit(FloatingPointType0)"); }
        public void visit(FloatingPointType0 n, object o) { unimplementedVisitor("visit(FloatingPointType0, object)"); }

        public void visit(FloatingPointType1 n) { unimplementedVisitor("visit(FloatingPointType1)"); }
        public void visit(FloatingPointType1 n, object o) { unimplementedVisitor("visit(FloatingPointType1, object)"); }

        public void visit(WildcardBounds0 n) { unimplementedVisitor("visit(WildcardBounds0)"); }
        public void visit(WildcardBounds0 n, object o) { unimplementedVisitor("visit(WildcardBounds0, object)"); }

        public void visit(WildcardBounds1 n) { unimplementedVisitor("visit(WildcardBounds1)"); }
        public void visit(WildcardBounds1 n, object o) { unimplementedVisitor("visit(WildcardBounds1, object)"); }

        public void visit(ClassModifier0 n) { unimplementedVisitor("visit(ClassModifier0)"); }
        public void visit(ClassModifier0 n, object o) { unimplementedVisitor("visit(ClassModifier0, object)"); }

        public void visit(ClassModifier1 n) { unimplementedVisitor("visit(ClassModifier1)"); }
        public void visit(ClassModifier1 n, object o) { unimplementedVisitor("visit(ClassModifier1, object)"); }

        public void visit(ClassModifier2 n) { unimplementedVisitor("visit(ClassModifier2)"); }
        public void visit(ClassModifier2 n, object o) { unimplementedVisitor("visit(ClassModifier2, object)"); }

        public void visit(ClassModifier3 n) { unimplementedVisitor("visit(ClassModifier3)"); }
        public void visit(ClassModifier3 n, object o) { unimplementedVisitor("visit(ClassModifier3, object)"); }

        public void visit(ClassModifier4 n) { unimplementedVisitor("visit(ClassModifier4)"); }
        public void visit(ClassModifier4 n, object o) { unimplementedVisitor("visit(ClassModifier4, object)"); }

        public void visit(ClassModifier5 n) { unimplementedVisitor("visit(ClassModifier5)"); }
        public void visit(ClassModifier5 n, object o) { unimplementedVisitor("visit(ClassModifier5, object)"); }

        public void visit(ClassModifier6 n) { unimplementedVisitor("visit(ClassModifier6)"); }
        public void visit(ClassModifier6 n, object o) { unimplementedVisitor("visit(ClassModifier6, object)"); }

        public void visit(FieldModifier0 n) { unimplementedVisitor("visit(FieldModifier0)"); }
        public void visit(FieldModifier0 n, object o) { unimplementedVisitor("visit(FieldModifier0, object)"); }

        public void visit(FieldModifier1 n) { unimplementedVisitor("visit(FieldModifier1)"); }
        public void visit(FieldModifier1 n, object o) { unimplementedVisitor("visit(FieldModifier1, object)"); }

        public void visit(FieldModifier2 n) { unimplementedVisitor("visit(FieldModifier2)"); }
        public void visit(FieldModifier2 n, object o) { unimplementedVisitor("visit(FieldModifier2, object)"); }

        public void visit(FieldModifier3 n) { unimplementedVisitor("visit(FieldModifier3)"); }
        public void visit(FieldModifier3 n, object o) { unimplementedVisitor("visit(FieldModifier3, object)"); }

        public void visit(FieldModifier4 n) { unimplementedVisitor("visit(FieldModifier4)"); }
        public void visit(FieldModifier4 n, object o) { unimplementedVisitor("visit(FieldModifier4, object)"); }

        public void visit(FieldModifier5 n) { unimplementedVisitor("visit(FieldModifier5)"); }
        public void visit(FieldModifier5 n, object o) { unimplementedVisitor("visit(FieldModifier5, object)"); }

        public void visit(FieldModifier6 n) { unimplementedVisitor("visit(FieldModifier6)"); }
        public void visit(FieldModifier6 n, object o) { unimplementedVisitor("visit(FieldModifier6, object)"); }

        public void visit(MethodDeclarator0 n) { unimplementedVisitor("visit(MethodDeclarator0)"); }
        public void visit(MethodDeclarator0 n, object o) { unimplementedVisitor("visit(MethodDeclarator0, object)"); }

        public void visit(MethodDeclarator1 n) { unimplementedVisitor("visit(MethodDeclarator1)"); }
        public void visit(MethodDeclarator1 n, object o) { unimplementedVisitor("visit(MethodDeclarator1, object)"); }

        public void visit(MethodModifier0 n) { unimplementedVisitor("visit(MethodModifier0)"); }
        public void visit(MethodModifier0 n, object o) { unimplementedVisitor("visit(MethodModifier0, object)"); }

        public void visit(MethodModifier1 n) { unimplementedVisitor("visit(MethodModifier1)"); }
        public void visit(MethodModifier1 n, object o) { unimplementedVisitor("visit(MethodModifier1, object)"); }

        public void visit(MethodModifier2 n) { unimplementedVisitor("visit(MethodModifier2)"); }
        public void visit(MethodModifier2 n, object o) { unimplementedVisitor("visit(MethodModifier2, object)"); }

        public void visit(MethodModifier3 n) { unimplementedVisitor("visit(MethodModifier3)"); }
        public void visit(MethodModifier3 n, object o) { unimplementedVisitor("visit(MethodModifier3, object)"); }

        public void visit(MethodModifier4 n) { unimplementedVisitor("visit(MethodModifier4)"); }
        public void visit(MethodModifier4 n, object o) { unimplementedVisitor("visit(MethodModifier4, object)"); }

        public void visit(MethodModifier5 n) { unimplementedVisitor("visit(MethodModifier5)"); }
        public void visit(MethodModifier5 n, object o) { unimplementedVisitor("visit(MethodModifier5, object)"); }

        public void visit(MethodModifier6 n) { unimplementedVisitor("visit(MethodModifier6)"); }
        public void visit(MethodModifier6 n, object o) { unimplementedVisitor("visit(MethodModifier6, object)"); }

        public void visit(MethodModifier7 n) { unimplementedVisitor("visit(MethodModifier7)"); }
        public void visit(MethodModifier7 n, object o) { unimplementedVisitor("visit(MethodModifier7, object)"); }

        public void visit(MethodModifier8 n) { unimplementedVisitor("visit(MethodModifier8)"); }
        public void visit(MethodModifier8 n, object o) { unimplementedVisitor("visit(MethodModifier8, object)"); }

        public void visit(ConstructorModifier0 n) { unimplementedVisitor("visit(ConstructorModifier0)"); }
        public void visit(ConstructorModifier0 n, object o) { unimplementedVisitor("visit(ConstructorModifier0, object)"); }

        public void visit(ConstructorModifier1 n) { unimplementedVisitor("visit(ConstructorModifier1)"); }
        public void visit(ConstructorModifier1 n, object o) { unimplementedVisitor("visit(ConstructorModifier1, object)"); }

        public void visit(ConstructorModifier2 n) { unimplementedVisitor("visit(ConstructorModifier2)"); }
        public void visit(ConstructorModifier2 n, object o) { unimplementedVisitor("visit(ConstructorModifier2, object)"); }

        public void visit(ExplicitConstructorInvocation0 n) { unimplementedVisitor("visit(ExplicitConstructorInvocation0)"); }
        public void visit(ExplicitConstructorInvocation0 n, object o) { unimplementedVisitor("visit(ExplicitConstructorInvocation0, object)"); }

        public void visit(ExplicitConstructorInvocation1 n) { unimplementedVisitor("visit(ExplicitConstructorInvocation1)"); }
        public void visit(ExplicitConstructorInvocation1 n, object o) { unimplementedVisitor("visit(ExplicitConstructorInvocation1, object)"); }

        public void visit(ExplicitConstructorInvocation2 n) { unimplementedVisitor("visit(ExplicitConstructorInvocation2)"); }
        public void visit(ExplicitConstructorInvocation2 n, object o) { unimplementedVisitor("visit(ExplicitConstructorInvocation2, object)"); }

        public void visit(InterfaceModifier0 n) { unimplementedVisitor("visit(InterfaceModifier0)"); }
        public void visit(InterfaceModifier0 n, object o) { unimplementedVisitor("visit(InterfaceModifier0, object)"); }

        public void visit(InterfaceModifier1 n) { unimplementedVisitor("visit(InterfaceModifier1)"); }
        public void visit(InterfaceModifier1 n, object o) { unimplementedVisitor("visit(InterfaceModifier1, object)"); }

        public void visit(InterfaceModifier2 n) { unimplementedVisitor("visit(InterfaceModifier2)"); }
        public void visit(InterfaceModifier2 n, object o) { unimplementedVisitor("visit(InterfaceModifier2, object)"); }

        public void visit(InterfaceModifier3 n) { unimplementedVisitor("visit(InterfaceModifier3)"); }
        public void visit(InterfaceModifier3 n, object o) { unimplementedVisitor("visit(InterfaceModifier3, object)"); }

        public void visit(InterfaceModifier4 n) { unimplementedVisitor("visit(InterfaceModifier4)"); }
        public void visit(InterfaceModifier4 n, object o) { unimplementedVisitor("visit(InterfaceModifier4, object)"); }

        public void visit(InterfaceModifier5 n) { unimplementedVisitor("visit(InterfaceModifier5)"); }
        public void visit(InterfaceModifier5 n, object o) { unimplementedVisitor("visit(InterfaceModifier5, object)"); }

        public void visit(ExtendsInterfaces0 n) { unimplementedVisitor("visit(ExtendsInterfaces0)"); }
        public void visit(ExtendsInterfaces0 n, object o) { unimplementedVisitor("visit(ExtendsInterfaces0, object)"); }

        public void visit(ExtendsInterfaces1 n) { unimplementedVisitor("visit(ExtendsInterfaces1)"); }
        public void visit(ExtendsInterfaces1 n, object o) { unimplementedVisitor("visit(ExtendsInterfaces1, object)"); }

        public void visit(ConstantModifier0 n) { unimplementedVisitor("visit(ConstantModifier0)"); }
        public void visit(ConstantModifier0 n, object o) { unimplementedVisitor("visit(ConstantModifier0, object)"); }

        public void visit(ConstantModifier1 n) { unimplementedVisitor("visit(ConstantModifier1)"); }
        public void visit(ConstantModifier1 n, object o) { unimplementedVisitor("visit(ConstantModifier1, object)"); }

        public void visit(ConstantModifier2 n) { unimplementedVisitor("visit(ConstantModifier2)"); }
        public void visit(ConstantModifier2 n, object o) { unimplementedVisitor("visit(ConstantModifier2, object)"); }

        public void visit(AbstractMethodModifier0 n) { unimplementedVisitor("visit(AbstractMethodModifier0)"); }
        public void visit(AbstractMethodModifier0 n, object o) { unimplementedVisitor("visit(AbstractMethodModifier0, object)"); }

        public void visit(AbstractMethodModifier1 n) { unimplementedVisitor("visit(AbstractMethodModifier1)"); }
        public void visit(AbstractMethodModifier1 n, object o) { unimplementedVisitor("visit(AbstractMethodModifier1, object)"); }

        public void visit(AnnotationTypeElementDeclaration0 n) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration0)"); }
        public void visit(AnnotationTypeElementDeclaration0 n, object o) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration0, object)"); }

        public void visit(AnnotationTypeElementDeclaration1 n) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration1)"); }
        public void visit(AnnotationTypeElementDeclaration1 n, object o) { unimplementedVisitor("visit(AnnotationTypeElementDeclaration1, object)"); }

        public void visit(AssertStatement0 n) { unimplementedVisitor("visit(AssertStatement0)"); }
        public void visit(AssertStatement0 n, object o) { unimplementedVisitor("visit(AssertStatement0, object)"); }

        public void visit(AssertStatement1 n) { unimplementedVisitor("visit(AssertStatement1)"); }
        public void visit(AssertStatement1 n, object o) { unimplementedVisitor("visit(AssertStatement1, object)"); }

        public void visit(SwitchLabel0 n) { unimplementedVisitor("visit(SwitchLabel0)"); }
        public void visit(SwitchLabel0 n, object o) { unimplementedVisitor("visit(SwitchLabel0, object)"); }

        public void visit(SwitchLabel1 n) { unimplementedVisitor("visit(SwitchLabel1)"); }
        public void visit(SwitchLabel1 n, object o) { unimplementedVisitor("visit(SwitchLabel1, object)"); }

        public void visit(SwitchLabel2 n) { unimplementedVisitor("visit(SwitchLabel2)"); }
        public void visit(SwitchLabel2 n, object o) { unimplementedVisitor("visit(SwitchLabel2, object)"); }

        public void visit(TryStatement0 n) { unimplementedVisitor("visit(TryStatement0)"); }
        public void visit(TryStatement0 n, object o) { unimplementedVisitor("visit(TryStatement0, object)"); }

        public void visit(TryStatement1 n) { unimplementedVisitor("visit(TryStatement1)"); }
        public void visit(TryStatement1 n, object o) { unimplementedVisitor("visit(TryStatement1, object)"); }

        public void visit(PrimaryNoNewArray0 n) { unimplementedVisitor("visit(PrimaryNoNewArray0)"); }
        public void visit(PrimaryNoNewArray0 n, object o) { unimplementedVisitor("visit(PrimaryNoNewArray0, object)"); }

        public void visit(PrimaryNoNewArray1 n) { unimplementedVisitor("visit(PrimaryNoNewArray1)"); }
        public void visit(PrimaryNoNewArray1 n, object o) { unimplementedVisitor("visit(PrimaryNoNewArray1, object)"); }

        public void visit(PrimaryNoNewArray2 n) { unimplementedVisitor("visit(PrimaryNoNewArray2)"); }
        public void visit(PrimaryNoNewArray2 n, object o) { unimplementedVisitor("visit(PrimaryNoNewArray2, object)"); }

        public void visit(PrimaryNoNewArray3 n) { unimplementedVisitor("visit(PrimaryNoNewArray3)"); }
        public void visit(PrimaryNoNewArray3 n, object o) { unimplementedVisitor("visit(PrimaryNoNewArray3, object)"); }

        public void visit(PrimaryNoNewArray4 n) { unimplementedVisitor("visit(PrimaryNoNewArray4)"); }
        public void visit(PrimaryNoNewArray4 n, object o) { unimplementedVisitor("visit(PrimaryNoNewArray4, object)"); }

        public void visit(Literal0 n) { unimplementedVisitor("visit(Literal0)"); }
        public void visit(Literal0 n, object o) { unimplementedVisitor("visit(Literal0, object)"); }

        public void visit(Literal1 n) { unimplementedVisitor("visit(Literal1)"); }
        public void visit(Literal1 n, object o) { unimplementedVisitor("visit(Literal1, object)"); }

        public void visit(Literal2 n) { unimplementedVisitor("visit(Literal2)"); }
        public void visit(Literal2 n, object o) { unimplementedVisitor("visit(Literal2, object)"); }

        public void visit(Literal3 n) { unimplementedVisitor("visit(Literal3)"); }
        public void visit(Literal3 n, object o) { unimplementedVisitor("visit(Literal3, object)"); }

        public void visit(Literal4 n) { unimplementedVisitor("visit(Literal4)"); }
        public void visit(Literal4 n, object o) { unimplementedVisitor("visit(Literal4, object)"); }

        public void visit(Literal5 n) { unimplementedVisitor("visit(Literal5)"); }
        public void visit(Literal5 n, object o) { unimplementedVisitor("visit(Literal5, object)"); }

        public void visit(Literal6 n) { unimplementedVisitor("visit(Literal6)"); }
        public void visit(Literal6 n, object o) { unimplementedVisitor("visit(Literal6, object)"); }

        public void visit(BooleanLiteral0 n) { unimplementedVisitor("visit(BooleanLiteral0)"); }
        public void visit(BooleanLiteral0 n, object o) { unimplementedVisitor("visit(BooleanLiteral0, object)"); }

        public void visit(BooleanLiteral1 n) { unimplementedVisitor("visit(BooleanLiteral1)"); }
        public void visit(BooleanLiteral1 n, object o) { unimplementedVisitor("visit(BooleanLiteral1, object)"); }

        public void visit(ClassInstanceCreationExpression0 n) { unimplementedVisitor("visit(ClassInstanceCreationExpression0)"); }
        public void visit(ClassInstanceCreationExpression0 n, object o) { unimplementedVisitor("visit(ClassInstanceCreationExpression0, object)"); }

        public void visit(ClassInstanceCreationExpression1 n) { unimplementedVisitor("visit(ClassInstanceCreationExpression1)"); }
        public void visit(ClassInstanceCreationExpression1 n, object o) { unimplementedVisitor("visit(ClassInstanceCreationExpression1, object)"); }

        public void visit(ArrayCreationExpression0 n) { unimplementedVisitor("visit(ArrayCreationExpression0)"); }
        public void visit(ArrayCreationExpression0 n, object o) { unimplementedVisitor("visit(ArrayCreationExpression0, object)"); }

        public void visit(ArrayCreationExpression1 n) { unimplementedVisitor("visit(ArrayCreationExpression1)"); }
        public void visit(ArrayCreationExpression1 n, object o) { unimplementedVisitor("visit(ArrayCreationExpression1, object)"); }

        public void visit(ArrayCreationExpression2 n) { unimplementedVisitor("visit(ArrayCreationExpression2)"); }
        public void visit(ArrayCreationExpression2 n, object o) { unimplementedVisitor("visit(ArrayCreationExpression2, object)"); }

        public void visit(ArrayCreationExpression3 n) { unimplementedVisitor("visit(ArrayCreationExpression3)"); }
        public void visit(ArrayCreationExpression3 n, object o) { unimplementedVisitor("visit(ArrayCreationExpression3, object)"); }

        public void visit(Dims0 n) { unimplementedVisitor("visit(Dims0)"); }
        public void visit(Dims0 n, object o) { unimplementedVisitor("visit(Dims0, object)"); }

        public void visit(Dims1 n) { unimplementedVisitor("visit(Dims1)"); }
        public void visit(Dims1 n, object o) { unimplementedVisitor("visit(Dims1, object)"); }

        public void visit(FieldAccess0 n) { unimplementedVisitor("visit(FieldAccess0)"); }
        public void visit(FieldAccess0 n, object o) { unimplementedVisitor("visit(FieldAccess0, object)"); }

        public void visit(FieldAccess1 n) { unimplementedVisitor("visit(FieldAccess1)"); }
        public void visit(FieldAccess1 n, object o) { unimplementedVisitor("visit(FieldAccess1, object)"); }

        public void visit(FieldAccess2 n) { unimplementedVisitor("visit(FieldAccess2)"); }
        public void visit(FieldAccess2 n, object o) { unimplementedVisitor("visit(FieldAccess2, object)"); }

        public void visit(MethodInvocation0 n) { unimplementedVisitor("visit(MethodInvocation0)"); }
        public void visit(MethodInvocation0 n, object o) { unimplementedVisitor("visit(MethodInvocation0, object)"); }

        public void visit(MethodInvocation1 n) { unimplementedVisitor("visit(MethodInvocation1)"); }
        public void visit(MethodInvocation1 n, object o) { unimplementedVisitor("visit(MethodInvocation1, object)"); }

        public void visit(MethodInvocation2 n) { unimplementedVisitor("visit(MethodInvocation2)"); }
        public void visit(MethodInvocation2 n, object o) { unimplementedVisitor("visit(MethodInvocation2, object)"); }

        public void visit(MethodInvocation3 n) { unimplementedVisitor("visit(MethodInvocation3)"); }
        public void visit(MethodInvocation3 n, object o) { unimplementedVisitor("visit(MethodInvocation3, object)"); }

        public void visit(MethodInvocation4 n) { unimplementedVisitor("visit(MethodInvocation4)"); }
        public void visit(MethodInvocation4 n, object o) { unimplementedVisitor("visit(MethodInvocation4, object)"); }

        public void visit(ArrayAccess0 n) { unimplementedVisitor("visit(ArrayAccess0)"); }
        public void visit(ArrayAccess0 n, object o) { unimplementedVisitor("visit(ArrayAccess0, object)"); }

        public void visit(ArrayAccess1 n) { unimplementedVisitor("visit(ArrayAccess1)"); }
        public void visit(ArrayAccess1 n, object o) { unimplementedVisitor("visit(ArrayAccess1, object)"); }

        public void visit(UnaryExpression0 n) { unimplementedVisitor("visit(UnaryExpression0)"); }
        public void visit(UnaryExpression0 n, object o) { unimplementedVisitor("visit(UnaryExpression0, object)"); }

        public void visit(UnaryExpression1 n) { unimplementedVisitor("visit(UnaryExpression1)"); }
        public void visit(UnaryExpression1 n, object o) { unimplementedVisitor("visit(UnaryExpression1, object)"); }

        public void visit(UnaryExpressionNotPlusMinus0 n) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus0)"); }
        public void visit(UnaryExpressionNotPlusMinus0 n, object o) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus0, object)"); }

        public void visit(UnaryExpressionNotPlusMinus1 n) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus1)"); }
        public void visit(UnaryExpressionNotPlusMinus1 n, object o) { unimplementedVisitor("visit(UnaryExpressionNotPlusMinus1, object)"); }

        public void visit(CastExpression0 n) { unimplementedVisitor("visit(CastExpression0)"); }
        public void visit(CastExpression0 n, object o) { unimplementedVisitor("visit(CastExpression0, object)"); }

        public void visit(CastExpression1 n) { unimplementedVisitor("visit(CastExpression1)"); }
        public void visit(CastExpression1 n, object o) { unimplementedVisitor("visit(CastExpression1, object)"); }

        public void visit(MultiplicativeExpression0 n) { unimplementedVisitor("visit(MultiplicativeExpression0)"); }
        public void visit(MultiplicativeExpression0 n, object o) { unimplementedVisitor("visit(MultiplicativeExpression0, object)"); }

        public void visit(MultiplicativeExpression1 n) { unimplementedVisitor("visit(MultiplicativeExpression1)"); }
        public void visit(MultiplicativeExpression1 n, object o) { unimplementedVisitor("visit(MultiplicativeExpression1, object)"); }

        public void visit(MultiplicativeExpression2 n) { unimplementedVisitor("visit(MultiplicativeExpression2)"); }
        public void visit(MultiplicativeExpression2 n, object o) { unimplementedVisitor("visit(MultiplicativeExpression2, object)"); }

        public void visit(AdditiveExpression0 n) { unimplementedVisitor("visit(AdditiveExpression0)"); }
        public void visit(AdditiveExpression0 n, object o) { unimplementedVisitor("visit(AdditiveExpression0, object)"); }

        public void visit(AdditiveExpression1 n) { unimplementedVisitor("visit(AdditiveExpression1)"); }
        public void visit(AdditiveExpression1 n, object o) { unimplementedVisitor("visit(AdditiveExpression1, object)"); }

        public void visit(ShiftExpression0 n) { unimplementedVisitor("visit(ShiftExpression0)"); }
        public void visit(ShiftExpression0 n, object o) { unimplementedVisitor("visit(ShiftExpression0, object)"); }

        public void visit(ShiftExpression1 n) { unimplementedVisitor("visit(ShiftExpression1)"); }
        public void visit(ShiftExpression1 n, object o) { unimplementedVisitor("visit(ShiftExpression1, object)"); }

        public void visit(ShiftExpression2 n) { unimplementedVisitor("visit(ShiftExpression2)"); }
        public void visit(ShiftExpression2 n, object o) { unimplementedVisitor("visit(ShiftExpression2, object)"); }

        public void visit(RelationalExpression0 n) { unimplementedVisitor("visit(RelationalExpression0)"); }
        public void visit(RelationalExpression0 n, object o) { unimplementedVisitor("visit(RelationalExpression0, object)"); }

        public void visit(RelationalExpression1 n) { unimplementedVisitor("visit(RelationalExpression1)"); }
        public void visit(RelationalExpression1 n, object o) { unimplementedVisitor("visit(RelationalExpression1, object)"); }

        public void visit(RelationalExpression2 n) { unimplementedVisitor("visit(RelationalExpression2)"); }
        public void visit(RelationalExpression2 n, object o) { unimplementedVisitor("visit(RelationalExpression2, object)"); }

        public void visit(RelationalExpression3 n) { unimplementedVisitor("visit(RelationalExpression3)"); }
        public void visit(RelationalExpression3 n, object o) { unimplementedVisitor("visit(RelationalExpression3, object)"); }

        public void visit(RelationalExpression4 n) { unimplementedVisitor("visit(RelationalExpression4)"); }
        public void visit(RelationalExpression4 n, object o) { unimplementedVisitor("visit(RelationalExpression4, object)"); }

        public void visit(EqualityExpression0 n) { unimplementedVisitor("visit(EqualityExpression0)"); }
        public void visit(EqualityExpression0 n, object o) { unimplementedVisitor("visit(EqualityExpression0, object)"); }

        public void visit(EqualityExpression1 n) { unimplementedVisitor("visit(EqualityExpression1)"); }
        public void visit(EqualityExpression1 n, object o) { unimplementedVisitor("visit(EqualityExpression1, object)"); }

        public void visit(AssignmentOperator0 n) { unimplementedVisitor("visit(AssignmentOperator0)"); }
        public void visit(AssignmentOperator0 n, object o) { unimplementedVisitor("visit(AssignmentOperator0, object)"); }

        public void visit(AssignmentOperator1 n) { unimplementedVisitor("visit(AssignmentOperator1)"); }
        public void visit(AssignmentOperator1 n, object o) { unimplementedVisitor("visit(AssignmentOperator1, object)"); }

        public void visit(AssignmentOperator2 n) { unimplementedVisitor("visit(AssignmentOperator2)"); }
        public void visit(AssignmentOperator2 n, object o) { unimplementedVisitor("visit(AssignmentOperator2, object)"); }

        public void visit(AssignmentOperator3 n) { unimplementedVisitor("visit(AssignmentOperator3)"); }
        public void visit(AssignmentOperator3 n, object o) { unimplementedVisitor("visit(AssignmentOperator3, object)"); }

        public void visit(AssignmentOperator4 n) { unimplementedVisitor("visit(AssignmentOperator4)"); }
        public void visit(AssignmentOperator4 n, object o) { unimplementedVisitor("visit(AssignmentOperator4, object)"); }

        public void visit(AssignmentOperator5 n) { unimplementedVisitor("visit(AssignmentOperator5)"); }
        public void visit(AssignmentOperator5 n, object o) { unimplementedVisitor("visit(AssignmentOperator5, object)"); }

        public void visit(AssignmentOperator6 n) { unimplementedVisitor("visit(AssignmentOperator6)"); }
        public void visit(AssignmentOperator6 n, object o) { unimplementedVisitor("visit(AssignmentOperator6, object)"); }

        public void visit(AssignmentOperator7 n) { unimplementedVisitor("visit(AssignmentOperator7)"); }
        public void visit(AssignmentOperator7 n, object o) { unimplementedVisitor("visit(AssignmentOperator7, object)"); }

        public void visit(AssignmentOperator8 n) { unimplementedVisitor("visit(AssignmentOperator8)"); }
        public void visit(AssignmentOperator8 n, object o) { unimplementedVisitor("visit(AssignmentOperator8, object)"); }

        public void visit(AssignmentOperator9 n) { unimplementedVisitor("visit(AssignmentOperator9)"); }
        public void visit(AssignmentOperator9 n, object o) { unimplementedVisitor("visit(AssignmentOperator9, object)"); }

        public void visit(AssignmentOperator10 n) { unimplementedVisitor("visit(AssignmentOperator10)"); }
        public void visit(AssignmentOperator10 n, object o) { unimplementedVisitor("visit(AssignmentOperator10, object)"); }

        public void visit(AssignmentOperator11 n) { unimplementedVisitor("visit(AssignmentOperator11)"); }
        public void visit(AssignmentOperator11 n, object o) { unimplementedVisitor("visit(AssignmentOperator11, object)"); }


        public void visit(Ast n)
        {
            if (n is AstToken) visit((AstToken) n);
            else if (n is identifier) visit((identifier) n);
            else if (n is PrimitiveType) visit((PrimitiveType) n);
            else if (n is ClassType) visit((ClassType) n);
            else if (n is InterfaceType) visit((InterfaceType) n);
            else if (n is TypeName) visit((TypeName) n);
            else if (n is ArrayType) visit((ArrayType) n);
            else if (n is TypeParameter) visit((TypeParameter) n);
            else if (n is TypeBound) visit((TypeBound) n);
            else if (n is AdditionalBoundList) visit((AdditionalBoundList) n);
            else if (n is AdditionalBound) visit((AdditionalBound) n);
            else if (n is TypeArguments) visit((TypeArguments) n);
            else if (n is ActualTypeArgumentList) visit((ActualTypeArgumentList) n);
            else if (n is Wildcard) visit((Wildcard) n);
            else if (n is PackageName) visit((PackageName) n);
            else if (n is ExpressionName) visit((ExpressionName) n);
            else if (n is MethodName) visit((MethodName) n);
            else if (n is PackageOrTypeName) visit((PackageOrTypeName) n);
            else if (n is AmbiguousName) visit((AmbiguousName) n);
            else if (n is CompilationUnit) visit((CompilationUnit) n);
            else if (n is ImportDeclarations) visit((ImportDeclarations) n);
            else if (n is TypeDeclarations) visit((TypeDeclarations) n);
            else if (n is PackageDeclaration) visit((PackageDeclaration) n);
            else if (n is SingleTypeImportDeclaration) visit((SingleTypeImportDeclaration) n);
            else if (n is TypeImportOnDemandDeclaration) visit((TypeImportOnDemandDeclaration) n);
            else if (n is SingleStaticImportDeclaration) visit((SingleStaticImportDeclaration) n);
            else if (n is StaticImportOnDemandDeclaration) visit((StaticImportOnDemandDeclaration) n);
            else if (n is TypeDeclaration) visit((TypeDeclaration) n);
            else if (n is NormalClassDeclaration) visit((NormalClassDeclaration) n);
            else if (n is ClassModifiers) visit((ClassModifiers) n);
            else if (n is TypeParameters) visit((TypeParameters) n);
            else if (n is TypeParameterList) visit((TypeParameterList) n);
            else if (n is Super) visit((Super) n);
            else if (n is Interfaces) visit((Interfaces) n);
            else if (n is InterfaceTypeList) visit((InterfaceTypeList) n);
            else if (n is ClassBody) visit((ClassBody) n);
            else if (n is ClassBodyDeclarations) visit((ClassBodyDeclarations) n);
            else if (n is ClassMemberDeclaration) visit((ClassMemberDeclaration) n);
            else if (n is FieldDeclaration) visit((FieldDeclaration) n);
            else if (n is VariableDeclarators) visit((VariableDeclarators) n);
            else if (n is VariableDeclarator) visit((VariableDeclarator) n);
            else if (n is VariableDeclaratorId) visit((VariableDeclaratorId) n);
            else if (n is FieldModifiers) visit((FieldModifiers) n);
            else if (n is MethodDeclaration) visit((MethodDeclaration) n);
            else if (n is MethodHeader) visit((MethodHeader) n);
            else if (n is ResultType) visit((ResultType) n);
            else if (n is FormalParameterList) visit((FormalParameterList) n);
            else if (n is FormalParameters) visit((FormalParameters) n);
            else if (n is FormalParameter) visit((FormalParameter) n);
            else if (n is VariableModifiers) visit((VariableModifiers) n);
            else if (n is VariableModifier) visit((VariableModifier) n);
            else if (n is LastFormalParameter) visit((LastFormalParameter) n);
            else if (n is MethodModifiers) visit((MethodModifiers) n);
            else if (n is Throws) visit((Throws) n);
            else if (n is ExceptionTypeList) visit((ExceptionTypeList) n);
            else if (n is MethodBody) visit((MethodBody) n);
            else if (n is StaticInitializer) visit((StaticInitializer) n);
            else if (n is ConstructorDeclaration) visit((ConstructorDeclaration) n);
            else if (n is ConstructorDeclarator) visit((ConstructorDeclarator) n);
            else if (n is ConstructorModifiers) visit((ConstructorModifiers) n);
            else if (n is ConstructorBody) visit((ConstructorBody) n);
            else if (n is EnumDeclaration) visit((EnumDeclaration) n);
            else if (n is EnumBody) visit((EnumBody) n);
            else if (n is EnumConstants) visit((EnumConstants) n);
            else if (n is EnumConstant) visit((EnumConstant) n);
            else if (n is Arguments) visit((Arguments) n);
            else if (n is EnumBodyDeclarations) visit((EnumBodyDeclarations) n);
            else if (n is NormalInterfaceDeclaration) visit((NormalInterfaceDeclaration) n);
            else if (n is InterfaceModifiers) visit((InterfaceModifiers) n);
            else if (n is InterfaceBody) visit((InterfaceBody) n);
            else if (n is InterfaceMemberDeclarations) visit((InterfaceMemberDeclarations) n);
            else if (n is InterfaceMemberDeclaration) visit((InterfaceMemberDeclaration) n);
            else if (n is ConstantDeclaration) visit((ConstantDeclaration) n);
            else if (n is ConstantModifiers) visit((ConstantModifiers) n);
            else if (n is AbstractMethodDeclaration) visit((AbstractMethodDeclaration) n);
            else if (n is AbstractMethodModifiers) visit((AbstractMethodModifiers) n);
            else if (n is AnnotationTypeDeclaration) visit((AnnotationTypeDeclaration) n);
            else if (n is AnnotationTypeBody) visit((AnnotationTypeBody) n);
            else if (n is AnnotationTypeElementDeclarations) visit((AnnotationTypeElementDeclarations) n);
            else if (n is DefaultValue) visit((DefaultValue) n);
            else if (n is Annotations) visit((Annotations) n);
            else if (n is NormalAnnotation) visit((NormalAnnotation) n);
            else if (n is ElementValuePairs) visit((ElementValuePairs) n);
            else if (n is ElementValuePair) visit((ElementValuePair) n);
            else if (n is ElementValueArrayInitializer) visit((ElementValueArrayInitializer) n);
            else if (n is ElementValues) visit((ElementValues) n);
            else if (n is MarkerAnnotation) visit((MarkerAnnotation) n);
            else if (n is SingleElementAnnotation) visit((SingleElementAnnotation) n);
            else if (n is ArrayInitializer) visit((ArrayInitializer) n);
            else if (n is VariableInitializers) visit((VariableInitializers) n);
            else if (n is Block) visit((Block) n);
            else if (n is BlockStatements) visit((BlockStatements) n);
            else if (n is LocalVariableDeclarationStatement) visit((LocalVariableDeclarationStatement) n);
            else if (n is LocalVariableDeclaration) visit((LocalVariableDeclaration) n);
            else if (n is IfThenStatement) visit((IfThenStatement) n);
            else if (n is IfThenElseStatement) visit((IfThenElseStatement) n);
            else if (n is IfThenElseStatementNoShortIf) visit((IfThenElseStatementNoShortIf) n);
            else if (n is EmptyStatement) visit((EmptyStatement) n);
            else if (n is LabeledStatement) visit((LabeledStatement) n);
            else if (n is LabeledStatementNoShortIf) visit((LabeledStatementNoShortIf) n);
            else if (n is ExpressionStatement) visit((ExpressionStatement) n);
            else if (n is SwitchStatement) visit((SwitchStatement) n);
            else if (n is SwitchBlock) visit((SwitchBlock) n);
            else if (n is SwitchBlockStatementGroups) visit((SwitchBlockStatementGroups) n);
            else if (n is SwitchBlockStatementGroup) visit((SwitchBlockStatementGroup) n);
            else if (n is SwitchLabels) visit((SwitchLabels) n);
            else if (n is WhileStatement) visit((WhileStatement) n);
            else if (n is WhileStatementNoShortIf) visit((WhileStatementNoShortIf) n);
            else if (n is DoStatement) visit((DoStatement) n);
            else if (n is BasicForStatement) visit((BasicForStatement) n);
            else if (n is ForStatementNoShortIf) visit((ForStatementNoShortIf) n);
            else if (n is StatementExpressionList) visit((StatementExpressionList) n);
            else if (n is EnhancedForStatement) visit((EnhancedForStatement) n);
            else if (n is BreakStatement) visit((BreakStatement) n);
            else if (n is ContinueStatement) visit((ContinueStatement) n);
            else if (n is ReturnStatement) visit((ReturnStatement) n);
            else if (n is ThrowStatement) visit((ThrowStatement) n);
            else if (n is SynchronizedStatement) visit((SynchronizedStatement) n);
            else if (n is Catches) visit((Catches) n);
            else if (n is CatchClause) visit((CatchClause) n);
            else if (n is Finally) visit((Finally) n);
            else if (n is ArgumentList) visit((ArgumentList) n);
            else if (n is DimExprs) visit((DimExprs) n);
            else if (n is DimExpr) visit((DimExpr) n);
            else if (n is PostIncrementExpression) visit((PostIncrementExpression) n);
            else if (n is PostDecrementExpression) visit((PostDecrementExpression) n);
            else if (n is PreIncrementExpression) visit((PreIncrementExpression) n);
            else if (n is PreDecrementExpression) visit((PreDecrementExpression) n);
            else if (n is AndExpression) visit((AndExpression) n);
            else if (n is ExclusiveOrExpression) visit((ExclusiveOrExpression) n);
            else if (n is InclusiveOrExpression) visit((InclusiveOrExpression) n);
            else if (n is ConditionalAndExpression) visit((ConditionalAndExpression) n);
            else if (n is ConditionalOrExpression) visit((ConditionalOrExpression) n);
            else if (n is ConditionalExpression) visit((ConditionalExpression) n);
            else if (n is Assignment) visit((Assignment) n);
            else if (n is Commaopt) visit((Commaopt) n);
            else if (n is Ellipsisopt) visit((Ellipsisopt) n);
            else if (n is LPGUserAction0) visit((LPGUserAction0) n);
            else if (n is LPGUserAction1) visit((LPGUserAction1) n);
            else if (n is LPGUserAction2) visit((LPGUserAction2) n);
            else if (n is LPGUserAction3) visit((LPGUserAction3) n);
            else if (n is LPGUserAction4) visit((LPGUserAction4) n);
            else if (n is IntegralType0) visit((IntegralType0) n);
            else if (n is IntegralType1) visit((IntegralType1) n);
            else if (n is IntegralType2) visit((IntegralType2) n);
            else if (n is IntegralType3) visit((IntegralType3) n);
            else if (n is IntegralType4) visit((IntegralType4) n);
            else if (n is FloatingPointType0) visit((FloatingPointType0) n);
            else if (n is FloatingPointType1) visit((FloatingPointType1) n);
            else if (n is WildcardBounds0) visit((WildcardBounds0) n);
            else if (n is WildcardBounds1) visit((WildcardBounds1) n);
            else if (n is ClassModifier0) visit((ClassModifier0) n);
            else if (n is ClassModifier1) visit((ClassModifier1) n);
            else if (n is ClassModifier2) visit((ClassModifier2) n);
            else if (n is ClassModifier3) visit((ClassModifier3) n);
            else if (n is ClassModifier4) visit((ClassModifier4) n);
            else if (n is ClassModifier5) visit((ClassModifier5) n);
            else if (n is ClassModifier6) visit((ClassModifier6) n);
            else if (n is FieldModifier0) visit((FieldModifier0) n);
            else if (n is FieldModifier1) visit((FieldModifier1) n);
            else if (n is FieldModifier2) visit((FieldModifier2) n);
            else if (n is FieldModifier3) visit((FieldModifier3) n);
            else if (n is FieldModifier4) visit((FieldModifier4) n);
            else if (n is FieldModifier5) visit((FieldModifier5) n);
            else if (n is FieldModifier6) visit((FieldModifier6) n);
            else if (n is MethodDeclarator0) visit((MethodDeclarator0) n);
            else if (n is MethodDeclarator1) visit((MethodDeclarator1) n);
            else if (n is MethodModifier0) visit((MethodModifier0) n);
            else if (n is MethodModifier1) visit((MethodModifier1) n);
            else if (n is MethodModifier2) visit((MethodModifier2) n);
            else if (n is MethodModifier3) visit((MethodModifier3) n);
            else if (n is MethodModifier4) visit((MethodModifier4) n);
            else if (n is MethodModifier5) visit((MethodModifier5) n);
            else if (n is MethodModifier6) visit((MethodModifier6) n);
            else if (n is MethodModifier7) visit((MethodModifier7) n);
            else if (n is MethodModifier8) visit((MethodModifier8) n);
            else if (n is ConstructorModifier0) visit((ConstructorModifier0) n);
            else if (n is ConstructorModifier1) visit((ConstructorModifier1) n);
            else if (n is ConstructorModifier2) visit((ConstructorModifier2) n);
            else if (n is ExplicitConstructorInvocation0) visit((ExplicitConstructorInvocation0) n);
            else if (n is ExplicitConstructorInvocation1) visit((ExplicitConstructorInvocation1) n);
            else if (n is ExplicitConstructorInvocation2) visit((ExplicitConstructorInvocation2) n);
            else if (n is InterfaceModifier0) visit((InterfaceModifier0) n);
            else if (n is InterfaceModifier1) visit((InterfaceModifier1) n);
            else if (n is InterfaceModifier2) visit((InterfaceModifier2) n);
            else if (n is InterfaceModifier3) visit((InterfaceModifier3) n);
            else if (n is InterfaceModifier4) visit((InterfaceModifier4) n);
            else if (n is InterfaceModifier5) visit((InterfaceModifier5) n);
            else if (n is ExtendsInterfaces0) visit((ExtendsInterfaces0) n);
            else if (n is ExtendsInterfaces1) visit((ExtendsInterfaces1) n);
            else if (n is ConstantModifier0) visit((ConstantModifier0) n);
            else if (n is ConstantModifier1) visit((ConstantModifier1) n);
            else if (n is ConstantModifier2) visit((ConstantModifier2) n);
            else if (n is AbstractMethodModifier0) visit((AbstractMethodModifier0) n);
            else if (n is AbstractMethodModifier1) visit((AbstractMethodModifier1) n);
            else if (n is AnnotationTypeElementDeclaration0) visit((AnnotationTypeElementDeclaration0) n);
            else if (n is AnnotationTypeElementDeclaration1) visit((AnnotationTypeElementDeclaration1) n);
            else if (n is AssertStatement0) visit((AssertStatement0) n);
            else if (n is AssertStatement1) visit((AssertStatement1) n);
            else if (n is SwitchLabel0) visit((SwitchLabel0) n);
            else if (n is SwitchLabel1) visit((SwitchLabel1) n);
            else if (n is SwitchLabel2) visit((SwitchLabel2) n);
            else if (n is TryStatement0) visit((TryStatement0) n);
            else if (n is TryStatement1) visit((TryStatement1) n);
            else if (n is PrimaryNoNewArray0) visit((PrimaryNoNewArray0) n);
            else if (n is PrimaryNoNewArray1) visit((PrimaryNoNewArray1) n);
            else if (n is PrimaryNoNewArray2) visit((PrimaryNoNewArray2) n);
            else if (n is PrimaryNoNewArray3) visit((PrimaryNoNewArray3) n);
            else if (n is PrimaryNoNewArray4) visit((PrimaryNoNewArray4) n);
            else if (n is Literal0) visit((Literal0) n);
            else if (n is Literal1) visit((Literal1) n);
            else if (n is Literal2) visit((Literal2) n);
            else if (n is Literal3) visit((Literal3) n);
            else if (n is Literal4) visit((Literal4) n);
            else if (n is Literal5) visit((Literal5) n);
            else if (n is Literal6) visit((Literal6) n);
            else if (n is BooleanLiteral0) visit((BooleanLiteral0) n);
            else if (n is BooleanLiteral1) visit((BooleanLiteral1) n);
            else if (n is ClassInstanceCreationExpression0) visit((ClassInstanceCreationExpression0) n);
            else if (n is ClassInstanceCreationExpression1) visit((ClassInstanceCreationExpression1) n);
            else if (n is ArrayCreationExpression0) visit((ArrayCreationExpression0) n);
            else if (n is ArrayCreationExpression1) visit((ArrayCreationExpression1) n);
            else if (n is ArrayCreationExpression2) visit((ArrayCreationExpression2) n);
            else if (n is ArrayCreationExpression3) visit((ArrayCreationExpression3) n);
            else if (n is Dims0) visit((Dims0) n);
            else if (n is Dims1) visit((Dims1) n);
            else if (n is FieldAccess0) visit((FieldAccess0) n);
            else if (n is FieldAccess1) visit((FieldAccess1) n);
            else if (n is FieldAccess2) visit((FieldAccess2) n);
            else if (n is MethodInvocation0) visit((MethodInvocation0) n);
            else if (n is MethodInvocation1) visit((MethodInvocation1) n);
            else if (n is MethodInvocation2) visit((MethodInvocation2) n);
            else if (n is MethodInvocation3) visit((MethodInvocation3) n);
            else if (n is MethodInvocation4) visit((MethodInvocation4) n);
            else if (n is ArrayAccess0) visit((ArrayAccess0) n);
            else if (n is ArrayAccess1) visit((ArrayAccess1) n);
            else if (n is UnaryExpression0) visit((UnaryExpression0) n);
            else if (n is UnaryExpression1) visit((UnaryExpression1) n);
            else if (n is UnaryExpressionNotPlusMinus0) visit((UnaryExpressionNotPlusMinus0) n);
            else if (n is UnaryExpressionNotPlusMinus1) visit((UnaryExpressionNotPlusMinus1) n);
            else if (n is CastExpression0) visit((CastExpression0) n);
            else if (n is CastExpression1) visit((CastExpression1) n);
            else if (n is MultiplicativeExpression0) visit((MultiplicativeExpression0) n);
            else if (n is MultiplicativeExpression1) visit((MultiplicativeExpression1) n);
            else if (n is MultiplicativeExpression2) visit((MultiplicativeExpression2) n);
            else if (n is AdditiveExpression0) visit((AdditiveExpression0) n);
            else if (n is AdditiveExpression1) visit((AdditiveExpression1) n);
            else if (n is ShiftExpression0) visit((ShiftExpression0) n);
            else if (n is ShiftExpression1) visit((ShiftExpression1) n);
            else if (n is ShiftExpression2) visit((ShiftExpression2) n);
            else if (n is RelationalExpression0) visit((RelationalExpression0) n);
            else if (n is RelationalExpression1) visit((RelationalExpression1) n);
            else if (n is RelationalExpression2) visit((RelationalExpression2) n);
            else if (n is RelationalExpression3) visit((RelationalExpression3) n);
            else if (n is RelationalExpression4) visit((RelationalExpression4) n);
            else if (n is EqualityExpression0) visit((EqualityExpression0) n);
            else if (n is EqualityExpression1) visit((EqualityExpression1) n);
            else if (n is AssignmentOperator0) visit((AssignmentOperator0) n);
            else if (n is AssignmentOperator1) visit((AssignmentOperator1) n);
            else if (n is AssignmentOperator2) visit((AssignmentOperator2) n);
            else if (n is AssignmentOperator3) visit((AssignmentOperator3) n);
            else if (n is AssignmentOperator4) visit((AssignmentOperator4) n);
            else if (n is AssignmentOperator5) visit((AssignmentOperator5) n);
            else if (n is AssignmentOperator6) visit((AssignmentOperator6) n);
            else if (n is AssignmentOperator7) visit((AssignmentOperator7) n);
            else if (n is AssignmentOperator8) visit((AssignmentOperator8) n);
            else if (n is AssignmentOperator9) visit((AssignmentOperator9) n);
            else if (n is AssignmentOperator10) visit((AssignmentOperator10) n);
            else if (n is AssignmentOperator11) visit((AssignmentOperator11) n);
            throw new System.NotSupportedException("visit(" + n.GetType().ToString() + ")");
        }
        public void visit(Ast n, object o)
        {
            if (n is AstToken) visit((AstToken) n, o);
            else if (n is identifier) visit((identifier) n, o);
            else if (n is PrimitiveType) visit((PrimitiveType) n, o);
            else if (n is ClassType) visit((ClassType) n, o);
            else if (n is InterfaceType) visit((InterfaceType) n, o);
            else if (n is TypeName) visit((TypeName) n, o);
            else if (n is ArrayType) visit((ArrayType) n, o);
            else if (n is TypeParameter) visit((TypeParameter) n, o);
            else if (n is TypeBound) visit((TypeBound) n, o);
            else if (n is AdditionalBoundList) visit((AdditionalBoundList) n, o);
            else if (n is AdditionalBound) visit((AdditionalBound) n, o);
            else if (n is TypeArguments) visit((TypeArguments) n, o);
            else if (n is ActualTypeArgumentList) visit((ActualTypeArgumentList) n, o);
            else if (n is Wildcard) visit((Wildcard) n, o);
            else if (n is PackageName) visit((PackageName) n, o);
            else if (n is ExpressionName) visit((ExpressionName) n, o);
            else if (n is MethodName) visit((MethodName) n, o);
            else if (n is PackageOrTypeName) visit((PackageOrTypeName) n, o);
            else if (n is AmbiguousName) visit((AmbiguousName) n, o);
            else if (n is CompilationUnit) visit((CompilationUnit) n, o);
            else if (n is ImportDeclarations) visit((ImportDeclarations) n, o);
            else if (n is TypeDeclarations) visit((TypeDeclarations) n, o);
            else if (n is PackageDeclaration) visit((PackageDeclaration) n, o);
            else if (n is SingleTypeImportDeclaration) visit((SingleTypeImportDeclaration) n, o);
            else if (n is TypeImportOnDemandDeclaration) visit((TypeImportOnDemandDeclaration) n, o);
            else if (n is SingleStaticImportDeclaration) visit((SingleStaticImportDeclaration) n, o);
            else if (n is StaticImportOnDemandDeclaration) visit((StaticImportOnDemandDeclaration) n, o);
            else if (n is TypeDeclaration) visit((TypeDeclaration) n, o);
            else if (n is NormalClassDeclaration) visit((NormalClassDeclaration) n, o);
            else if (n is ClassModifiers) visit((ClassModifiers) n, o);
            else if (n is TypeParameters) visit((TypeParameters) n, o);
            else if (n is TypeParameterList) visit((TypeParameterList) n, o);
            else if (n is Super) visit((Super) n, o);
            else if (n is Interfaces) visit((Interfaces) n, o);
            else if (n is InterfaceTypeList) visit((InterfaceTypeList) n, o);
            else if (n is ClassBody) visit((ClassBody) n, o);
            else if (n is ClassBodyDeclarations) visit((ClassBodyDeclarations) n, o);
            else if (n is ClassMemberDeclaration) visit((ClassMemberDeclaration) n, o);
            else if (n is FieldDeclaration) visit((FieldDeclaration) n, o);
            else if (n is VariableDeclarators) visit((VariableDeclarators) n, o);
            else if (n is VariableDeclarator) visit((VariableDeclarator) n, o);
            else if (n is VariableDeclaratorId) visit((VariableDeclaratorId) n, o);
            else if (n is FieldModifiers) visit((FieldModifiers) n, o);
            else if (n is MethodDeclaration) visit((MethodDeclaration) n, o);
            else if (n is MethodHeader) visit((MethodHeader) n, o);
            else if (n is ResultType) visit((ResultType) n, o);
            else if (n is FormalParameterList) visit((FormalParameterList) n, o);
            else if (n is FormalParameters) visit((FormalParameters) n, o);
            else if (n is FormalParameter) visit((FormalParameter) n, o);
            else if (n is VariableModifiers) visit((VariableModifiers) n, o);
            else if (n is VariableModifier) visit((VariableModifier) n, o);
            else if (n is LastFormalParameter) visit((LastFormalParameter) n, o);
            else if (n is MethodModifiers) visit((MethodModifiers) n, o);
            else if (n is Throws) visit((Throws) n, o);
            else if (n is ExceptionTypeList) visit((ExceptionTypeList) n, o);
            else if (n is MethodBody) visit((MethodBody) n, o);
            else if (n is StaticInitializer) visit((StaticInitializer) n, o);
            else if (n is ConstructorDeclaration) visit((ConstructorDeclaration) n, o);
            else if (n is ConstructorDeclarator) visit((ConstructorDeclarator) n, o);
            else if (n is ConstructorModifiers) visit((ConstructorModifiers) n, o);
            else if (n is ConstructorBody) visit((ConstructorBody) n, o);
            else if (n is EnumDeclaration) visit((EnumDeclaration) n, o);
            else if (n is EnumBody) visit((EnumBody) n, o);
            else if (n is EnumConstants) visit((EnumConstants) n, o);
            else if (n is EnumConstant) visit((EnumConstant) n, o);
            else if (n is Arguments) visit((Arguments) n, o);
            else if (n is EnumBodyDeclarations) visit((EnumBodyDeclarations) n, o);
            else if (n is NormalInterfaceDeclaration) visit((NormalInterfaceDeclaration) n, o);
            else if (n is InterfaceModifiers) visit((InterfaceModifiers) n, o);
            else if (n is InterfaceBody) visit((InterfaceBody) n, o);
            else if (n is InterfaceMemberDeclarations) visit((InterfaceMemberDeclarations) n, o);
            else if (n is InterfaceMemberDeclaration) visit((InterfaceMemberDeclaration) n, o);
            else if (n is ConstantDeclaration) visit((ConstantDeclaration) n, o);
            else if (n is ConstantModifiers) visit((ConstantModifiers) n, o);
            else if (n is AbstractMethodDeclaration) visit((AbstractMethodDeclaration) n, o);
            else if (n is AbstractMethodModifiers) visit((AbstractMethodModifiers) n, o);
            else if (n is AnnotationTypeDeclaration) visit((AnnotationTypeDeclaration) n, o);
            else if (n is AnnotationTypeBody) visit((AnnotationTypeBody) n, o);
            else if (n is AnnotationTypeElementDeclarations) visit((AnnotationTypeElementDeclarations) n, o);
            else if (n is DefaultValue) visit((DefaultValue) n, o);
            else if (n is Annotations) visit((Annotations) n, o);
            else if (n is NormalAnnotation) visit((NormalAnnotation) n, o);
            else if (n is ElementValuePairs) visit((ElementValuePairs) n, o);
            else if (n is ElementValuePair) visit((ElementValuePair) n, o);
            else if (n is ElementValueArrayInitializer) visit((ElementValueArrayInitializer) n, o);
            else if (n is ElementValues) visit((ElementValues) n, o);
            else if (n is MarkerAnnotation) visit((MarkerAnnotation) n, o);
            else if (n is SingleElementAnnotation) visit((SingleElementAnnotation) n, o);
            else if (n is ArrayInitializer) visit((ArrayInitializer) n, o);
            else if (n is VariableInitializers) visit((VariableInitializers) n, o);
            else if (n is Block) visit((Block) n, o);
            else if (n is BlockStatements) visit((BlockStatements) n, o);
            else if (n is LocalVariableDeclarationStatement) visit((LocalVariableDeclarationStatement) n, o);
            else if (n is LocalVariableDeclaration) visit((LocalVariableDeclaration) n, o);
            else if (n is IfThenStatement) visit((IfThenStatement) n, o);
            else if (n is IfThenElseStatement) visit((IfThenElseStatement) n, o);
            else if (n is IfThenElseStatementNoShortIf) visit((IfThenElseStatementNoShortIf) n, o);
            else if (n is EmptyStatement) visit((EmptyStatement) n, o);
            else if (n is LabeledStatement) visit((LabeledStatement) n, o);
            else if (n is LabeledStatementNoShortIf) visit((LabeledStatementNoShortIf) n, o);
            else if (n is ExpressionStatement) visit((ExpressionStatement) n, o);
            else if (n is SwitchStatement) visit((SwitchStatement) n, o);
            else if (n is SwitchBlock) visit((SwitchBlock) n, o);
            else if (n is SwitchBlockStatementGroups) visit((SwitchBlockStatementGroups) n, o);
            else if (n is SwitchBlockStatementGroup) visit((SwitchBlockStatementGroup) n, o);
            else if (n is SwitchLabels) visit((SwitchLabels) n, o);
            else if (n is WhileStatement) visit((WhileStatement) n, o);
            else if (n is WhileStatementNoShortIf) visit((WhileStatementNoShortIf) n, o);
            else if (n is DoStatement) visit((DoStatement) n, o);
            else if (n is BasicForStatement) visit((BasicForStatement) n, o);
            else if (n is ForStatementNoShortIf) visit((ForStatementNoShortIf) n, o);
            else if (n is StatementExpressionList) visit((StatementExpressionList) n, o);
            else if (n is EnhancedForStatement) visit((EnhancedForStatement) n, o);
            else if (n is BreakStatement) visit((BreakStatement) n, o);
            else if (n is ContinueStatement) visit((ContinueStatement) n, o);
            else if (n is ReturnStatement) visit((ReturnStatement) n, o);
            else if (n is ThrowStatement) visit((ThrowStatement) n, o);
            else if (n is SynchronizedStatement) visit((SynchronizedStatement) n, o);
            else if (n is Catches) visit((Catches) n, o);
            else if (n is CatchClause) visit((CatchClause) n, o);
            else if (n is Finally) visit((Finally) n, o);
            else if (n is ArgumentList) visit((ArgumentList) n, o);
            else if (n is DimExprs) visit((DimExprs) n, o);
            else if (n is DimExpr) visit((DimExpr) n, o);
            else if (n is PostIncrementExpression) visit((PostIncrementExpression) n, o);
            else if (n is PostDecrementExpression) visit((PostDecrementExpression) n, o);
            else if (n is PreIncrementExpression) visit((PreIncrementExpression) n, o);
            else if (n is PreDecrementExpression) visit((PreDecrementExpression) n, o);
            else if (n is AndExpression) visit((AndExpression) n, o);
            else if (n is ExclusiveOrExpression) visit((ExclusiveOrExpression) n, o);
            else if (n is InclusiveOrExpression) visit((InclusiveOrExpression) n, o);
            else if (n is ConditionalAndExpression) visit((ConditionalAndExpression) n, o);
            else if (n is ConditionalOrExpression) visit((ConditionalOrExpression) n, o);
            else if (n is ConditionalExpression) visit((ConditionalExpression) n, o);
            else if (n is Assignment) visit((Assignment) n, o);
            else if (n is Commaopt) visit((Commaopt) n, o);
            else if (n is Ellipsisopt) visit((Ellipsisopt) n, o);
            else if (n is LPGUserAction0) visit((LPGUserAction0) n, o);
            else if (n is LPGUserAction1) visit((LPGUserAction1) n, o);
            else if (n is LPGUserAction2) visit((LPGUserAction2) n, o);
            else if (n is LPGUserAction3) visit((LPGUserAction3) n, o);
            else if (n is LPGUserAction4) visit((LPGUserAction4) n, o);
            else if (n is IntegralType0) visit((IntegralType0) n, o);
            else if (n is IntegralType1) visit((IntegralType1) n, o);
            else if (n is IntegralType2) visit((IntegralType2) n, o);
            else if (n is IntegralType3) visit((IntegralType3) n, o);
            else if (n is IntegralType4) visit((IntegralType4) n, o);
            else if (n is FloatingPointType0) visit((FloatingPointType0) n, o);
            else if (n is FloatingPointType1) visit((FloatingPointType1) n, o);
            else if (n is WildcardBounds0) visit((WildcardBounds0) n, o);
            else if (n is WildcardBounds1) visit((WildcardBounds1) n, o);
            else if (n is ClassModifier0) visit((ClassModifier0) n, o);
            else if (n is ClassModifier1) visit((ClassModifier1) n, o);
            else if (n is ClassModifier2) visit((ClassModifier2) n, o);
            else if (n is ClassModifier3) visit((ClassModifier3) n, o);
            else if (n is ClassModifier4) visit((ClassModifier4) n, o);
            else if (n is ClassModifier5) visit((ClassModifier5) n, o);
            else if (n is ClassModifier6) visit((ClassModifier6) n, o);
            else if (n is FieldModifier0) visit((FieldModifier0) n, o);
            else if (n is FieldModifier1) visit((FieldModifier1) n, o);
            else if (n is FieldModifier2) visit((FieldModifier2) n, o);
            else if (n is FieldModifier3) visit((FieldModifier3) n, o);
            else if (n is FieldModifier4) visit((FieldModifier4) n, o);
            else if (n is FieldModifier5) visit((FieldModifier5) n, o);
            else if (n is FieldModifier6) visit((FieldModifier6) n, o);
            else if (n is MethodDeclarator0) visit((MethodDeclarator0) n, o);
            else if (n is MethodDeclarator1) visit((MethodDeclarator1) n, o);
            else if (n is MethodModifier0) visit((MethodModifier0) n, o);
            else if (n is MethodModifier1) visit((MethodModifier1) n, o);
            else if (n is MethodModifier2) visit((MethodModifier2) n, o);
            else if (n is MethodModifier3) visit((MethodModifier3) n, o);
            else if (n is MethodModifier4) visit((MethodModifier4) n, o);
            else if (n is MethodModifier5) visit((MethodModifier5) n, o);
            else if (n is MethodModifier6) visit((MethodModifier6) n, o);
            else if (n is MethodModifier7) visit((MethodModifier7) n, o);
            else if (n is MethodModifier8) visit((MethodModifier8) n, o);
            else if (n is ConstructorModifier0) visit((ConstructorModifier0) n, o);
            else if (n is ConstructorModifier1) visit((ConstructorModifier1) n, o);
            else if (n is ConstructorModifier2) visit((ConstructorModifier2) n, o);
            else if (n is ExplicitConstructorInvocation0) visit((ExplicitConstructorInvocation0) n, o);
            else if (n is ExplicitConstructorInvocation1) visit((ExplicitConstructorInvocation1) n, o);
            else if (n is ExplicitConstructorInvocation2) visit((ExplicitConstructorInvocation2) n, o);
            else if (n is InterfaceModifier0) visit((InterfaceModifier0) n, o);
            else if (n is InterfaceModifier1) visit((InterfaceModifier1) n, o);
            else if (n is InterfaceModifier2) visit((InterfaceModifier2) n, o);
            else if (n is InterfaceModifier3) visit((InterfaceModifier3) n, o);
            else if (n is InterfaceModifier4) visit((InterfaceModifier4) n, o);
            else if (n is InterfaceModifier5) visit((InterfaceModifier5) n, o);
            else if (n is ExtendsInterfaces0) visit((ExtendsInterfaces0) n, o);
            else if (n is ExtendsInterfaces1) visit((ExtendsInterfaces1) n, o);
            else if (n is ConstantModifier0) visit((ConstantModifier0) n, o);
            else if (n is ConstantModifier1) visit((ConstantModifier1) n, o);
            else if (n is ConstantModifier2) visit((ConstantModifier2) n, o);
            else if (n is AbstractMethodModifier0) visit((AbstractMethodModifier0) n, o);
            else if (n is AbstractMethodModifier1) visit((AbstractMethodModifier1) n, o);
            else if (n is AnnotationTypeElementDeclaration0) visit((AnnotationTypeElementDeclaration0) n, o);
            else if (n is AnnotationTypeElementDeclaration1) visit((AnnotationTypeElementDeclaration1) n, o);
            else if (n is AssertStatement0) visit((AssertStatement0) n, o);
            else if (n is AssertStatement1) visit((AssertStatement1) n, o);
            else if (n is SwitchLabel0) visit((SwitchLabel0) n, o);
            else if (n is SwitchLabel1) visit((SwitchLabel1) n, o);
            else if (n is SwitchLabel2) visit((SwitchLabel2) n, o);
            else if (n is TryStatement0) visit((TryStatement0) n, o);
            else if (n is TryStatement1) visit((TryStatement1) n, o);
            else if (n is PrimaryNoNewArray0) visit((PrimaryNoNewArray0) n, o);
            else if (n is PrimaryNoNewArray1) visit((PrimaryNoNewArray1) n, o);
            else if (n is PrimaryNoNewArray2) visit((PrimaryNoNewArray2) n, o);
            else if (n is PrimaryNoNewArray3) visit((PrimaryNoNewArray3) n, o);
            else if (n is PrimaryNoNewArray4) visit((PrimaryNoNewArray4) n, o);
            else if (n is Literal0) visit((Literal0) n, o);
            else if (n is Literal1) visit((Literal1) n, o);
            else if (n is Literal2) visit((Literal2) n, o);
            else if (n is Literal3) visit((Literal3) n, o);
            else if (n is Literal4) visit((Literal4) n, o);
            else if (n is Literal5) visit((Literal5) n, o);
            else if (n is Literal6) visit((Literal6) n, o);
            else if (n is BooleanLiteral0) visit((BooleanLiteral0) n, o);
            else if (n is BooleanLiteral1) visit((BooleanLiteral1) n, o);
            else if (n is ClassInstanceCreationExpression0) visit((ClassInstanceCreationExpression0) n, o);
            else if (n is ClassInstanceCreationExpression1) visit((ClassInstanceCreationExpression1) n, o);
            else if (n is ArrayCreationExpression0) visit((ArrayCreationExpression0) n, o);
            else if (n is ArrayCreationExpression1) visit((ArrayCreationExpression1) n, o);
            else if (n is ArrayCreationExpression2) visit((ArrayCreationExpression2) n, o);
            else if (n is ArrayCreationExpression3) visit((ArrayCreationExpression3) n, o);
            else if (n is Dims0) visit((Dims0) n, o);
            else if (n is Dims1) visit((Dims1) n, o);
            else if (n is FieldAccess0) visit((FieldAccess0) n, o);
            else if (n is FieldAccess1) visit((FieldAccess1) n, o);
            else if (n is FieldAccess2) visit((FieldAccess2) n, o);
            else if (n is MethodInvocation0) visit((MethodInvocation0) n, o);
            else if (n is MethodInvocation1) visit((MethodInvocation1) n, o);
            else if (n is MethodInvocation2) visit((MethodInvocation2) n, o);
            else if (n is MethodInvocation3) visit((MethodInvocation3) n, o);
            else if (n is MethodInvocation4) visit((MethodInvocation4) n, o);
            else if (n is ArrayAccess0) visit((ArrayAccess0) n, o);
            else if (n is ArrayAccess1) visit((ArrayAccess1) n, o);
            else if (n is UnaryExpression0) visit((UnaryExpression0) n, o);
            else if (n is UnaryExpression1) visit((UnaryExpression1) n, o);
            else if (n is UnaryExpressionNotPlusMinus0) visit((UnaryExpressionNotPlusMinus0) n, o);
            else if (n is UnaryExpressionNotPlusMinus1) visit((UnaryExpressionNotPlusMinus1) n, o);
            else if (n is CastExpression0) visit((CastExpression0) n, o);
            else if (n is CastExpression1) visit((CastExpression1) n, o);
            else if (n is MultiplicativeExpression0) visit((MultiplicativeExpression0) n, o);
            else if (n is MultiplicativeExpression1) visit((MultiplicativeExpression1) n, o);
            else if (n is MultiplicativeExpression2) visit((MultiplicativeExpression2) n, o);
            else if (n is AdditiveExpression0) visit((AdditiveExpression0) n, o);
            else if (n is AdditiveExpression1) visit((AdditiveExpression1) n, o);
            else if (n is ShiftExpression0) visit((ShiftExpression0) n, o);
            else if (n is ShiftExpression1) visit((ShiftExpression1) n, o);
            else if (n is ShiftExpression2) visit((ShiftExpression2) n, o);
            else if (n is RelationalExpression0) visit((RelationalExpression0) n, o);
            else if (n is RelationalExpression1) visit((RelationalExpression1) n, o);
            else if (n is RelationalExpression2) visit((RelationalExpression2) n, o);
            else if (n is RelationalExpression3) visit((RelationalExpression3) n, o);
            else if (n is RelationalExpression4) visit((RelationalExpression4) n, o);
            else if (n is EqualityExpression0) visit((EqualityExpression0) n, o);
            else if (n is EqualityExpression1) visit((EqualityExpression1) n, o);
            else if (n is AssignmentOperator0) visit((AssignmentOperator0) n, o);
            else if (n is AssignmentOperator1) visit((AssignmentOperator1) n, o);
            else if (n is AssignmentOperator2) visit((AssignmentOperator2) n, o);
            else if (n is AssignmentOperator3) visit((AssignmentOperator3) n, o);
            else if (n is AssignmentOperator4) visit((AssignmentOperator4) n, o);
            else if (n is AssignmentOperator5) visit((AssignmentOperator5) n, o);
            else if (n is AssignmentOperator6) visit((AssignmentOperator6) n, o);
            else if (n is AssignmentOperator7) visit((AssignmentOperator7) n, o);
            else if (n is AssignmentOperator8) visit((AssignmentOperator8) n, o);
            else if (n is AssignmentOperator9) visit((AssignmentOperator9) n, o);
            else if (n is AssignmentOperator10) visit((AssignmentOperator10) n, o);
            else if (n is AssignmentOperator11) visit((AssignmentOperator11) n, o);
            throw new System.NotSupportedException("visit(" + n.GetType().ToString() + ")");
        }
    }
    public abstract class AbstractResultVisitor : ResultVisitor, ResultArgumentVisitor
    {
        public abstract object unimplementedVisitor(string s);

        public object visit(AstToken n) { return unimplementedVisitor("visit(AstToken)"); }
        public object visit(AstToken n, object o) { return  unimplementedVisitor("visit(AstToken, object)"); }

        public object visit(identifier n) { return unimplementedVisitor("visit(identifier)"); }
        public object visit(identifier n, object o) { return  unimplementedVisitor("visit(identifier, object)"); }

        public object visit(PrimitiveType n) { return unimplementedVisitor("visit(PrimitiveType)"); }
        public object visit(PrimitiveType n, object o) { return  unimplementedVisitor("visit(PrimitiveType, object)"); }

        public object visit(ClassType n) { return unimplementedVisitor("visit(ClassType)"); }
        public object visit(ClassType n, object o) { return  unimplementedVisitor("visit(ClassType, object)"); }

        public object visit(InterfaceType n) { return unimplementedVisitor("visit(InterfaceType)"); }
        public object visit(InterfaceType n, object o) { return  unimplementedVisitor("visit(InterfaceType, object)"); }

        public object visit(TypeName n) { return unimplementedVisitor("visit(TypeName)"); }
        public object visit(TypeName n, object o) { return  unimplementedVisitor("visit(TypeName, object)"); }

        public object visit(ArrayType n) { return unimplementedVisitor("visit(ArrayType)"); }
        public object visit(ArrayType n, object o) { return  unimplementedVisitor("visit(ArrayType, object)"); }

        public object visit(TypeParameter n) { return unimplementedVisitor("visit(TypeParameter)"); }
        public object visit(TypeParameter n, object o) { return  unimplementedVisitor("visit(TypeParameter, object)"); }

        public object visit(TypeBound n) { return unimplementedVisitor("visit(TypeBound)"); }
        public object visit(TypeBound n, object o) { return  unimplementedVisitor("visit(TypeBound, object)"); }

        public object visit(AdditionalBoundList n) { return unimplementedVisitor("visit(AdditionalBoundList)"); }
        public object visit(AdditionalBoundList n, object o) { return  unimplementedVisitor("visit(AdditionalBoundList, object)"); }

        public object visit(AdditionalBound n) { return unimplementedVisitor("visit(AdditionalBound)"); }
        public object visit(AdditionalBound n, object o) { return  unimplementedVisitor("visit(AdditionalBound, object)"); }

        public object visit(TypeArguments n) { return unimplementedVisitor("visit(TypeArguments)"); }
        public object visit(TypeArguments n, object o) { return  unimplementedVisitor("visit(TypeArguments, object)"); }

        public object visit(ActualTypeArgumentList n) { return unimplementedVisitor("visit(ActualTypeArgumentList)"); }
        public object visit(ActualTypeArgumentList n, object o) { return  unimplementedVisitor("visit(ActualTypeArgumentList, object)"); }

        public object visit(Wildcard n) { return unimplementedVisitor("visit(Wildcard)"); }
        public object visit(Wildcard n, object o) { return  unimplementedVisitor("visit(Wildcard, object)"); }

        public object visit(PackageName n) { return unimplementedVisitor("visit(PackageName)"); }
        public object visit(PackageName n, object o) { return  unimplementedVisitor("visit(PackageName, object)"); }

        public object visit(ExpressionName n) { return unimplementedVisitor("visit(ExpressionName)"); }
        public object visit(ExpressionName n, object o) { return  unimplementedVisitor("visit(ExpressionName, object)"); }

        public object visit(MethodName n) { return unimplementedVisitor("visit(MethodName)"); }
        public object visit(MethodName n, object o) { return  unimplementedVisitor("visit(MethodName, object)"); }

        public object visit(PackageOrTypeName n) { return unimplementedVisitor("visit(PackageOrTypeName)"); }
        public object visit(PackageOrTypeName n, object o) { return  unimplementedVisitor("visit(PackageOrTypeName, object)"); }

        public object visit(AmbiguousName n) { return unimplementedVisitor("visit(AmbiguousName)"); }
        public object visit(AmbiguousName n, object o) { return  unimplementedVisitor("visit(AmbiguousName, object)"); }

        public object visit(CompilationUnit n) { return unimplementedVisitor("visit(CompilationUnit)"); }
        public object visit(CompilationUnit n, object o) { return  unimplementedVisitor("visit(CompilationUnit, object)"); }

        public object visit(ImportDeclarations n) { return unimplementedVisitor("visit(ImportDeclarations)"); }
        public object visit(ImportDeclarations n, object o) { return  unimplementedVisitor("visit(ImportDeclarations, object)"); }

        public object visit(TypeDeclarations n) { return unimplementedVisitor("visit(TypeDeclarations)"); }
        public object visit(TypeDeclarations n, object o) { return  unimplementedVisitor("visit(TypeDeclarations, object)"); }

        public object visit(PackageDeclaration n) { return unimplementedVisitor("visit(PackageDeclaration)"); }
        public object visit(PackageDeclaration n, object o) { return  unimplementedVisitor("visit(PackageDeclaration, object)"); }

        public object visit(SingleTypeImportDeclaration n) { return unimplementedVisitor("visit(SingleTypeImportDeclaration)"); }
        public object visit(SingleTypeImportDeclaration n, object o) { return  unimplementedVisitor("visit(SingleTypeImportDeclaration, object)"); }

        public object visit(TypeImportOnDemandDeclaration n) { return unimplementedVisitor("visit(TypeImportOnDemandDeclaration)"); }
        public object visit(TypeImportOnDemandDeclaration n, object o) { return  unimplementedVisitor("visit(TypeImportOnDemandDeclaration, object)"); }

        public object visit(SingleStaticImportDeclaration n) { return unimplementedVisitor("visit(SingleStaticImportDeclaration)"); }
        public object visit(SingleStaticImportDeclaration n, object o) { return  unimplementedVisitor("visit(SingleStaticImportDeclaration, object)"); }

        public object visit(StaticImportOnDemandDeclaration n) { return unimplementedVisitor("visit(StaticImportOnDemandDeclaration)"); }
        public object visit(StaticImportOnDemandDeclaration n, object o) { return  unimplementedVisitor("visit(StaticImportOnDemandDeclaration, object)"); }

        public object visit(TypeDeclaration n) { return unimplementedVisitor("visit(TypeDeclaration)"); }
        public object visit(TypeDeclaration n, object o) { return  unimplementedVisitor("visit(TypeDeclaration, object)"); }

        public object visit(NormalClassDeclaration n) { return unimplementedVisitor("visit(NormalClassDeclaration)"); }
        public object visit(NormalClassDeclaration n, object o) { return  unimplementedVisitor("visit(NormalClassDeclaration, object)"); }

        public object visit(ClassModifiers n) { return unimplementedVisitor("visit(ClassModifiers)"); }
        public object visit(ClassModifiers n, object o) { return  unimplementedVisitor("visit(ClassModifiers, object)"); }

        public object visit(TypeParameters n) { return unimplementedVisitor("visit(TypeParameters)"); }
        public object visit(TypeParameters n, object o) { return  unimplementedVisitor("visit(TypeParameters, object)"); }

        public object visit(TypeParameterList n) { return unimplementedVisitor("visit(TypeParameterList)"); }
        public object visit(TypeParameterList n, object o) { return  unimplementedVisitor("visit(TypeParameterList, object)"); }

        public object visit(Super n) { return unimplementedVisitor("visit(Super)"); }
        public object visit(Super n, object o) { return  unimplementedVisitor("visit(Super, object)"); }

        public object visit(Interfaces n) { return unimplementedVisitor("visit(Interfaces)"); }
        public object visit(Interfaces n, object o) { return  unimplementedVisitor("visit(Interfaces, object)"); }

        public object visit(InterfaceTypeList n) { return unimplementedVisitor("visit(InterfaceTypeList)"); }
        public object visit(InterfaceTypeList n, object o) { return  unimplementedVisitor("visit(InterfaceTypeList, object)"); }

        public object visit(ClassBody n) { return unimplementedVisitor("visit(ClassBody)"); }
        public object visit(ClassBody n, object o) { return  unimplementedVisitor("visit(ClassBody, object)"); }

        public object visit(ClassBodyDeclarations n) { return unimplementedVisitor("visit(ClassBodyDeclarations)"); }
        public object visit(ClassBodyDeclarations n, object o) { return  unimplementedVisitor("visit(ClassBodyDeclarations, object)"); }

        public object visit(ClassMemberDeclaration n) { return unimplementedVisitor("visit(ClassMemberDeclaration)"); }
        public object visit(ClassMemberDeclaration n, object o) { return  unimplementedVisitor("visit(ClassMemberDeclaration, object)"); }

        public object visit(FieldDeclaration n) { return unimplementedVisitor("visit(FieldDeclaration)"); }
        public object visit(FieldDeclaration n, object o) { return  unimplementedVisitor("visit(FieldDeclaration, object)"); }

        public object visit(VariableDeclarators n) { return unimplementedVisitor("visit(VariableDeclarators)"); }
        public object visit(VariableDeclarators n, object o) { return  unimplementedVisitor("visit(VariableDeclarators, object)"); }

        public object visit(VariableDeclarator n) { return unimplementedVisitor("visit(VariableDeclarator)"); }
        public object visit(VariableDeclarator n, object o) { return  unimplementedVisitor("visit(VariableDeclarator, object)"); }

        public object visit(VariableDeclaratorId n) { return unimplementedVisitor("visit(VariableDeclaratorId)"); }
        public object visit(VariableDeclaratorId n, object o) { return  unimplementedVisitor("visit(VariableDeclaratorId, object)"); }

        public object visit(FieldModifiers n) { return unimplementedVisitor("visit(FieldModifiers)"); }
        public object visit(FieldModifiers n, object o) { return  unimplementedVisitor("visit(FieldModifiers, object)"); }

        public object visit(MethodDeclaration n) { return unimplementedVisitor("visit(MethodDeclaration)"); }
        public object visit(MethodDeclaration n, object o) { return  unimplementedVisitor("visit(MethodDeclaration, object)"); }

        public object visit(MethodHeader n) { return unimplementedVisitor("visit(MethodHeader)"); }
        public object visit(MethodHeader n, object o) { return  unimplementedVisitor("visit(MethodHeader, object)"); }

        public object visit(ResultType n) { return unimplementedVisitor("visit(ResultType)"); }
        public object visit(ResultType n, object o) { return  unimplementedVisitor("visit(ResultType, object)"); }

        public object visit(FormalParameterList n) { return unimplementedVisitor("visit(FormalParameterList)"); }
        public object visit(FormalParameterList n, object o) { return  unimplementedVisitor("visit(FormalParameterList, object)"); }

        public object visit(FormalParameters n) { return unimplementedVisitor("visit(FormalParameters)"); }
        public object visit(FormalParameters n, object o) { return  unimplementedVisitor("visit(FormalParameters, object)"); }

        public object visit(FormalParameter n) { return unimplementedVisitor("visit(FormalParameter)"); }
        public object visit(FormalParameter n, object o) { return  unimplementedVisitor("visit(FormalParameter, object)"); }

        public object visit(VariableModifiers n) { return unimplementedVisitor("visit(VariableModifiers)"); }
        public object visit(VariableModifiers n, object o) { return  unimplementedVisitor("visit(VariableModifiers, object)"); }

        public object visit(VariableModifier n) { return unimplementedVisitor("visit(VariableModifier)"); }
        public object visit(VariableModifier n, object o) { return  unimplementedVisitor("visit(VariableModifier, object)"); }

        public object visit(LastFormalParameter n) { return unimplementedVisitor("visit(LastFormalParameter)"); }
        public object visit(LastFormalParameter n, object o) { return  unimplementedVisitor("visit(LastFormalParameter, object)"); }

        public object visit(MethodModifiers n) { return unimplementedVisitor("visit(MethodModifiers)"); }
        public object visit(MethodModifiers n, object o) { return  unimplementedVisitor("visit(MethodModifiers, object)"); }

        public object visit(Throws n) { return unimplementedVisitor("visit(Throws)"); }
        public object visit(Throws n, object o) { return  unimplementedVisitor("visit(Throws, object)"); }

        public object visit(ExceptionTypeList n) { return unimplementedVisitor("visit(ExceptionTypeList)"); }
        public object visit(ExceptionTypeList n, object o) { return  unimplementedVisitor("visit(ExceptionTypeList, object)"); }

        public object visit(MethodBody n) { return unimplementedVisitor("visit(MethodBody)"); }
        public object visit(MethodBody n, object o) { return  unimplementedVisitor("visit(MethodBody, object)"); }

        public object visit(StaticInitializer n) { return unimplementedVisitor("visit(StaticInitializer)"); }
        public object visit(StaticInitializer n, object o) { return  unimplementedVisitor("visit(StaticInitializer, object)"); }

        public object visit(ConstructorDeclaration n) { return unimplementedVisitor("visit(ConstructorDeclaration)"); }
        public object visit(ConstructorDeclaration n, object o) { return  unimplementedVisitor("visit(ConstructorDeclaration, object)"); }

        public object visit(ConstructorDeclarator n) { return unimplementedVisitor("visit(ConstructorDeclarator)"); }
        public object visit(ConstructorDeclarator n, object o) { return  unimplementedVisitor("visit(ConstructorDeclarator, object)"); }

        public object visit(ConstructorModifiers n) { return unimplementedVisitor("visit(ConstructorModifiers)"); }
        public object visit(ConstructorModifiers n, object o) { return  unimplementedVisitor("visit(ConstructorModifiers, object)"); }

        public object visit(ConstructorBody n) { return unimplementedVisitor("visit(ConstructorBody)"); }
        public object visit(ConstructorBody n, object o) { return  unimplementedVisitor("visit(ConstructorBody, object)"); }

        public object visit(EnumDeclaration n) { return unimplementedVisitor("visit(EnumDeclaration)"); }
        public object visit(EnumDeclaration n, object o) { return  unimplementedVisitor("visit(EnumDeclaration, object)"); }

        public object visit(EnumBody n) { return unimplementedVisitor("visit(EnumBody)"); }
        public object visit(EnumBody n, object o) { return  unimplementedVisitor("visit(EnumBody, object)"); }

        public object visit(EnumConstants n) { return unimplementedVisitor("visit(EnumConstants)"); }
        public object visit(EnumConstants n, object o) { return  unimplementedVisitor("visit(EnumConstants, object)"); }

        public object visit(EnumConstant n) { return unimplementedVisitor("visit(EnumConstant)"); }
        public object visit(EnumConstant n, object o) { return  unimplementedVisitor("visit(EnumConstant, object)"); }

        public object visit(Arguments n) { return unimplementedVisitor("visit(Arguments)"); }
        public object visit(Arguments n, object o) { return  unimplementedVisitor("visit(Arguments, object)"); }

        public object visit(EnumBodyDeclarations n) { return unimplementedVisitor("visit(EnumBodyDeclarations)"); }
        public object visit(EnumBodyDeclarations n, object o) { return  unimplementedVisitor("visit(EnumBodyDeclarations, object)"); }

        public object visit(NormalInterfaceDeclaration n) { return unimplementedVisitor("visit(NormalInterfaceDeclaration)"); }
        public object visit(NormalInterfaceDeclaration n, object o) { return  unimplementedVisitor("visit(NormalInterfaceDeclaration, object)"); }

        public object visit(InterfaceModifiers n) { return unimplementedVisitor("visit(InterfaceModifiers)"); }
        public object visit(InterfaceModifiers n, object o) { return  unimplementedVisitor("visit(InterfaceModifiers, object)"); }

        public object visit(InterfaceBody n) { return unimplementedVisitor("visit(InterfaceBody)"); }
        public object visit(InterfaceBody n, object o) { return  unimplementedVisitor("visit(InterfaceBody, object)"); }

        public object visit(InterfaceMemberDeclarations n) { return unimplementedVisitor("visit(InterfaceMemberDeclarations)"); }
        public object visit(InterfaceMemberDeclarations n, object o) { return  unimplementedVisitor("visit(InterfaceMemberDeclarations, object)"); }

        public object visit(InterfaceMemberDeclaration n) { return unimplementedVisitor("visit(InterfaceMemberDeclaration)"); }
        public object visit(InterfaceMemberDeclaration n, object o) { return  unimplementedVisitor("visit(InterfaceMemberDeclaration, object)"); }

        public object visit(ConstantDeclaration n) { return unimplementedVisitor("visit(ConstantDeclaration)"); }
        public object visit(ConstantDeclaration n, object o) { return  unimplementedVisitor("visit(ConstantDeclaration, object)"); }

        public object visit(ConstantModifiers n) { return unimplementedVisitor("visit(ConstantModifiers)"); }
        public object visit(ConstantModifiers n, object o) { return  unimplementedVisitor("visit(ConstantModifiers, object)"); }

        public object visit(AbstractMethodDeclaration n) { return unimplementedVisitor("visit(AbstractMethodDeclaration)"); }
        public object visit(AbstractMethodDeclaration n, object o) { return  unimplementedVisitor("visit(AbstractMethodDeclaration, object)"); }

        public object visit(AbstractMethodModifiers n) { return unimplementedVisitor("visit(AbstractMethodModifiers)"); }
        public object visit(AbstractMethodModifiers n, object o) { return  unimplementedVisitor("visit(AbstractMethodModifiers, object)"); }

        public object visit(AnnotationTypeDeclaration n) { return unimplementedVisitor("visit(AnnotationTypeDeclaration)"); }
        public object visit(AnnotationTypeDeclaration n, object o) { return  unimplementedVisitor("visit(AnnotationTypeDeclaration, object)"); }

        public object visit(AnnotationTypeBody n) { return unimplementedVisitor("visit(AnnotationTypeBody)"); }
        public object visit(AnnotationTypeBody n, object o) { return  unimplementedVisitor("visit(AnnotationTypeBody, object)"); }

        public object visit(AnnotationTypeElementDeclarations n) { return unimplementedVisitor("visit(AnnotationTypeElementDeclarations)"); }
        public object visit(AnnotationTypeElementDeclarations n, object o) { return  unimplementedVisitor("visit(AnnotationTypeElementDeclarations, object)"); }

        public object visit(DefaultValue n) { return unimplementedVisitor("visit(DefaultValue)"); }
        public object visit(DefaultValue n, object o) { return  unimplementedVisitor("visit(DefaultValue, object)"); }

        public object visit(Annotations n) { return unimplementedVisitor("visit(Annotations)"); }
        public object visit(Annotations n, object o) { return  unimplementedVisitor("visit(Annotations, object)"); }

        public object visit(NormalAnnotation n) { return unimplementedVisitor("visit(NormalAnnotation)"); }
        public object visit(NormalAnnotation n, object o) { return  unimplementedVisitor("visit(NormalAnnotation, object)"); }

        public object visit(ElementValuePairs n) { return unimplementedVisitor("visit(ElementValuePairs)"); }
        public object visit(ElementValuePairs n, object o) { return  unimplementedVisitor("visit(ElementValuePairs, object)"); }

        public object visit(ElementValuePair n) { return unimplementedVisitor("visit(ElementValuePair)"); }
        public object visit(ElementValuePair n, object o) { return  unimplementedVisitor("visit(ElementValuePair, object)"); }

        public object visit(ElementValueArrayInitializer n) { return unimplementedVisitor("visit(ElementValueArrayInitializer)"); }
        public object visit(ElementValueArrayInitializer n, object o) { return  unimplementedVisitor("visit(ElementValueArrayInitializer, object)"); }

        public object visit(ElementValues n) { return unimplementedVisitor("visit(ElementValues)"); }
        public object visit(ElementValues n, object o) { return  unimplementedVisitor("visit(ElementValues, object)"); }

        public object visit(MarkerAnnotation n) { return unimplementedVisitor("visit(MarkerAnnotation)"); }
        public object visit(MarkerAnnotation n, object o) { return  unimplementedVisitor("visit(MarkerAnnotation, object)"); }

        public object visit(SingleElementAnnotation n) { return unimplementedVisitor("visit(SingleElementAnnotation)"); }
        public object visit(SingleElementAnnotation n, object o) { return  unimplementedVisitor("visit(SingleElementAnnotation, object)"); }

        public object visit(ArrayInitializer n) { return unimplementedVisitor("visit(ArrayInitializer)"); }
        public object visit(ArrayInitializer n, object o) { return  unimplementedVisitor("visit(ArrayInitializer, object)"); }

        public object visit(VariableInitializers n) { return unimplementedVisitor("visit(VariableInitializers)"); }
        public object visit(VariableInitializers n, object o) { return  unimplementedVisitor("visit(VariableInitializers, object)"); }

        public object visit(Block n) { return unimplementedVisitor("visit(Block)"); }
        public object visit(Block n, object o) { return  unimplementedVisitor("visit(Block, object)"); }

        public object visit(BlockStatements n) { return unimplementedVisitor("visit(BlockStatements)"); }
        public object visit(BlockStatements n, object o) { return  unimplementedVisitor("visit(BlockStatements, object)"); }

        public object visit(LocalVariableDeclarationStatement n) { return unimplementedVisitor("visit(LocalVariableDeclarationStatement)"); }
        public object visit(LocalVariableDeclarationStatement n, object o) { return  unimplementedVisitor("visit(LocalVariableDeclarationStatement, object)"); }

        public object visit(LocalVariableDeclaration n) { return unimplementedVisitor("visit(LocalVariableDeclaration)"); }
        public object visit(LocalVariableDeclaration n, object o) { return  unimplementedVisitor("visit(LocalVariableDeclaration, object)"); }

        public object visit(IfThenStatement n) { return unimplementedVisitor("visit(IfThenStatement)"); }
        public object visit(IfThenStatement n, object o) { return  unimplementedVisitor("visit(IfThenStatement, object)"); }

        public object visit(IfThenElseStatement n) { return unimplementedVisitor("visit(IfThenElseStatement)"); }
        public object visit(IfThenElseStatement n, object o) { return  unimplementedVisitor("visit(IfThenElseStatement, object)"); }

        public object visit(IfThenElseStatementNoShortIf n) { return unimplementedVisitor("visit(IfThenElseStatementNoShortIf)"); }
        public object visit(IfThenElseStatementNoShortIf n, object o) { return  unimplementedVisitor("visit(IfThenElseStatementNoShortIf, object)"); }

        public object visit(EmptyStatement n) { return unimplementedVisitor("visit(EmptyStatement)"); }
        public object visit(EmptyStatement n, object o) { return  unimplementedVisitor("visit(EmptyStatement, object)"); }

        public object visit(LabeledStatement n) { return unimplementedVisitor("visit(LabeledStatement)"); }
        public object visit(LabeledStatement n, object o) { return  unimplementedVisitor("visit(LabeledStatement, object)"); }

        public object visit(LabeledStatementNoShortIf n) { return unimplementedVisitor("visit(LabeledStatementNoShortIf)"); }
        public object visit(LabeledStatementNoShortIf n, object o) { return  unimplementedVisitor("visit(LabeledStatementNoShortIf, object)"); }

        public object visit(ExpressionStatement n) { return unimplementedVisitor("visit(ExpressionStatement)"); }
        public object visit(ExpressionStatement n, object o) { return  unimplementedVisitor("visit(ExpressionStatement, object)"); }

        public object visit(SwitchStatement n) { return unimplementedVisitor("visit(SwitchStatement)"); }
        public object visit(SwitchStatement n, object o) { return  unimplementedVisitor("visit(SwitchStatement, object)"); }

        public object visit(SwitchBlock n) { return unimplementedVisitor("visit(SwitchBlock)"); }
        public object visit(SwitchBlock n, object o) { return  unimplementedVisitor("visit(SwitchBlock, object)"); }

        public object visit(SwitchBlockStatementGroups n) { return unimplementedVisitor("visit(SwitchBlockStatementGroups)"); }
        public object visit(SwitchBlockStatementGroups n, object o) { return  unimplementedVisitor("visit(SwitchBlockStatementGroups, object)"); }

        public object visit(SwitchBlockStatementGroup n) { return unimplementedVisitor("visit(SwitchBlockStatementGroup)"); }
        public object visit(SwitchBlockStatementGroup n, object o) { return  unimplementedVisitor("visit(SwitchBlockStatementGroup, object)"); }

        public object visit(SwitchLabels n) { return unimplementedVisitor("visit(SwitchLabels)"); }
        public object visit(SwitchLabels n, object o) { return  unimplementedVisitor("visit(SwitchLabels, object)"); }

        public object visit(WhileStatement n) { return unimplementedVisitor("visit(WhileStatement)"); }
        public object visit(WhileStatement n, object o) { return  unimplementedVisitor("visit(WhileStatement, object)"); }

        public object visit(WhileStatementNoShortIf n) { return unimplementedVisitor("visit(WhileStatementNoShortIf)"); }
        public object visit(WhileStatementNoShortIf n, object o) { return  unimplementedVisitor("visit(WhileStatementNoShortIf, object)"); }

        public object visit(DoStatement n) { return unimplementedVisitor("visit(DoStatement)"); }
        public object visit(DoStatement n, object o) { return  unimplementedVisitor("visit(DoStatement, object)"); }

        public object visit(BasicForStatement n) { return unimplementedVisitor("visit(BasicForStatement)"); }
        public object visit(BasicForStatement n, object o) { return  unimplementedVisitor("visit(BasicForStatement, object)"); }

        public object visit(ForStatementNoShortIf n) { return unimplementedVisitor("visit(ForStatementNoShortIf)"); }
        public object visit(ForStatementNoShortIf n, object o) { return  unimplementedVisitor("visit(ForStatementNoShortIf, object)"); }

        public object visit(StatementExpressionList n) { return unimplementedVisitor("visit(StatementExpressionList)"); }
        public object visit(StatementExpressionList n, object o) { return  unimplementedVisitor("visit(StatementExpressionList, object)"); }

        public object visit(EnhancedForStatement n) { return unimplementedVisitor("visit(EnhancedForStatement)"); }
        public object visit(EnhancedForStatement n, object o) { return  unimplementedVisitor("visit(EnhancedForStatement, object)"); }

        public object visit(BreakStatement n) { return unimplementedVisitor("visit(BreakStatement)"); }
        public object visit(BreakStatement n, object o) { return  unimplementedVisitor("visit(BreakStatement, object)"); }

        public object visit(ContinueStatement n) { return unimplementedVisitor("visit(ContinueStatement)"); }
        public object visit(ContinueStatement n, object o) { return  unimplementedVisitor("visit(ContinueStatement, object)"); }

        public object visit(ReturnStatement n) { return unimplementedVisitor("visit(ReturnStatement)"); }
        public object visit(ReturnStatement n, object o) { return  unimplementedVisitor("visit(ReturnStatement, object)"); }

        public object visit(ThrowStatement n) { return unimplementedVisitor("visit(ThrowStatement)"); }
        public object visit(ThrowStatement n, object o) { return  unimplementedVisitor("visit(ThrowStatement, object)"); }

        public object visit(SynchronizedStatement n) { return unimplementedVisitor("visit(SynchronizedStatement)"); }
        public object visit(SynchronizedStatement n, object o) { return  unimplementedVisitor("visit(SynchronizedStatement, object)"); }

        public object visit(Catches n) { return unimplementedVisitor("visit(Catches)"); }
        public object visit(Catches n, object o) { return  unimplementedVisitor("visit(Catches, object)"); }

        public object visit(CatchClause n) { return unimplementedVisitor("visit(CatchClause)"); }
        public object visit(CatchClause n, object o) { return  unimplementedVisitor("visit(CatchClause, object)"); }

        public object visit(Finally n) { return unimplementedVisitor("visit(Finally)"); }
        public object visit(Finally n, object o) { return  unimplementedVisitor("visit(Finally, object)"); }

        public object visit(ArgumentList n) { return unimplementedVisitor("visit(ArgumentList)"); }
        public object visit(ArgumentList n, object o) { return  unimplementedVisitor("visit(ArgumentList, object)"); }

        public object visit(DimExprs n) { return unimplementedVisitor("visit(DimExprs)"); }
        public object visit(DimExprs n, object o) { return  unimplementedVisitor("visit(DimExprs, object)"); }

        public object visit(DimExpr n) { return unimplementedVisitor("visit(DimExpr)"); }
        public object visit(DimExpr n, object o) { return  unimplementedVisitor("visit(DimExpr, object)"); }

        public object visit(PostIncrementExpression n) { return unimplementedVisitor("visit(PostIncrementExpression)"); }
        public object visit(PostIncrementExpression n, object o) { return  unimplementedVisitor("visit(PostIncrementExpression, object)"); }

        public object visit(PostDecrementExpression n) { return unimplementedVisitor("visit(PostDecrementExpression)"); }
        public object visit(PostDecrementExpression n, object o) { return  unimplementedVisitor("visit(PostDecrementExpression, object)"); }

        public object visit(PreIncrementExpression n) { return unimplementedVisitor("visit(PreIncrementExpression)"); }
        public object visit(PreIncrementExpression n, object o) { return  unimplementedVisitor("visit(PreIncrementExpression, object)"); }

        public object visit(PreDecrementExpression n) { return unimplementedVisitor("visit(PreDecrementExpression)"); }
        public object visit(PreDecrementExpression n, object o) { return  unimplementedVisitor("visit(PreDecrementExpression, object)"); }

        public object visit(AndExpression n) { return unimplementedVisitor("visit(AndExpression)"); }
        public object visit(AndExpression n, object o) { return  unimplementedVisitor("visit(AndExpression, object)"); }

        public object visit(ExclusiveOrExpression n) { return unimplementedVisitor("visit(ExclusiveOrExpression)"); }
        public object visit(ExclusiveOrExpression n, object o) { return  unimplementedVisitor("visit(ExclusiveOrExpression, object)"); }

        public object visit(InclusiveOrExpression n) { return unimplementedVisitor("visit(InclusiveOrExpression)"); }
        public object visit(InclusiveOrExpression n, object o) { return  unimplementedVisitor("visit(InclusiveOrExpression, object)"); }

        public object visit(ConditionalAndExpression n) { return unimplementedVisitor("visit(ConditionalAndExpression)"); }
        public object visit(ConditionalAndExpression n, object o) { return  unimplementedVisitor("visit(ConditionalAndExpression, object)"); }

        public object visit(ConditionalOrExpression n) { return unimplementedVisitor("visit(ConditionalOrExpression)"); }
        public object visit(ConditionalOrExpression n, object o) { return  unimplementedVisitor("visit(ConditionalOrExpression, object)"); }

        public object visit(ConditionalExpression n) { return unimplementedVisitor("visit(ConditionalExpression)"); }
        public object visit(ConditionalExpression n, object o) { return  unimplementedVisitor("visit(ConditionalExpression, object)"); }

        public object visit(Assignment n) { return unimplementedVisitor("visit(Assignment)"); }
        public object visit(Assignment n, object o) { return  unimplementedVisitor("visit(Assignment, object)"); }

        public object visit(Commaopt n) { return unimplementedVisitor("visit(Commaopt)"); }
        public object visit(Commaopt n, object o) { return  unimplementedVisitor("visit(Commaopt, object)"); }

        public object visit(Ellipsisopt n) { return unimplementedVisitor("visit(Ellipsisopt)"); }
        public object visit(Ellipsisopt n, object o) { return  unimplementedVisitor("visit(Ellipsisopt, object)"); }

        public object visit(LPGUserAction0 n) { return unimplementedVisitor("visit(LPGUserAction0)"); }
        public object visit(LPGUserAction0 n, object o) { return  unimplementedVisitor("visit(LPGUserAction0, object)"); }

        public object visit(LPGUserAction1 n) { return unimplementedVisitor("visit(LPGUserAction1)"); }
        public object visit(LPGUserAction1 n, object o) { return  unimplementedVisitor("visit(LPGUserAction1, object)"); }

        public object visit(LPGUserAction2 n) { return unimplementedVisitor("visit(LPGUserAction2)"); }
        public object visit(LPGUserAction2 n, object o) { return  unimplementedVisitor("visit(LPGUserAction2, object)"); }

        public object visit(LPGUserAction3 n) { return unimplementedVisitor("visit(LPGUserAction3)"); }
        public object visit(LPGUserAction3 n, object o) { return  unimplementedVisitor("visit(LPGUserAction3, object)"); }

        public object visit(LPGUserAction4 n) { return unimplementedVisitor("visit(LPGUserAction4)"); }
        public object visit(LPGUserAction4 n, object o) { return  unimplementedVisitor("visit(LPGUserAction4, object)"); }

        public object visit(IntegralType0 n) { return unimplementedVisitor("visit(IntegralType0)"); }
        public object visit(IntegralType0 n, object o) { return  unimplementedVisitor("visit(IntegralType0, object)"); }

        public object visit(IntegralType1 n) { return unimplementedVisitor("visit(IntegralType1)"); }
        public object visit(IntegralType1 n, object o) { return  unimplementedVisitor("visit(IntegralType1, object)"); }

        public object visit(IntegralType2 n) { return unimplementedVisitor("visit(IntegralType2)"); }
        public object visit(IntegralType2 n, object o) { return  unimplementedVisitor("visit(IntegralType2, object)"); }

        public object visit(IntegralType3 n) { return unimplementedVisitor("visit(IntegralType3)"); }
        public object visit(IntegralType3 n, object o) { return  unimplementedVisitor("visit(IntegralType3, object)"); }

        public object visit(IntegralType4 n) { return unimplementedVisitor("visit(IntegralType4)"); }
        public object visit(IntegralType4 n, object o) { return  unimplementedVisitor("visit(IntegralType4, object)"); }

        public object visit(FloatingPointType0 n) { return unimplementedVisitor("visit(FloatingPointType0)"); }
        public object visit(FloatingPointType0 n, object o) { return  unimplementedVisitor("visit(FloatingPointType0, object)"); }

        public object visit(FloatingPointType1 n) { return unimplementedVisitor("visit(FloatingPointType1)"); }
        public object visit(FloatingPointType1 n, object o) { return  unimplementedVisitor("visit(FloatingPointType1, object)"); }

        public object visit(WildcardBounds0 n) { return unimplementedVisitor("visit(WildcardBounds0)"); }
        public object visit(WildcardBounds0 n, object o) { return  unimplementedVisitor("visit(WildcardBounds0, object)"); }

        public object visit(WildcardBounds1 n) { return unimplementedVisitor("visit(WildcardBounds1)"); }
        public object visit(WildcardBounds1 n, object o) { return  unimplementedVisitor("visit(WildcardBounds1, object)"); }

        public object visit(ClassModifier0 n) { return unimplementedVisitor("visit(ClassModifier0)"); }
        public object visit(ClassModifier0 n, object o) { return  unimplementedVisitor("visit(ClassModifier0, object)"); }

        public object visit(ClassModifier1 n) { return unimplementedVisitor("visit(ClassModifier1)"); }
        public object visit(ClassModifier1 n, object o) { return  unimplementedVisitor("visit(ClassModifier1, object)"); }

        public object visit(ClassModifier2 n) { return unimplementedVisitor("visit(ClassModifier2)"); }
        public object visit(ClassModifier2 n, object o) { return  unimplementedVisitor("visit(ClassModifier2, object)"); }

        public object visit(ClassModifier3 n) { return unimplementedVisitor("visit(ClassModifier3)"); }
        public object visit(ClassModifier3 n, object o) { return  unimplementedVisitor("visit(ClassModifier3, object)"); }

        public object visit(ClassModifier4 n) { return unimplementedVisitor("visit(ClassModifier4)"); }
        public object visit(ClassModifier4 n, object o) { return  unimplementedVisitor("visit(ClassModifier4, object)"); }

        public object visit(ClassModifier5 n) { return unimplementedVisitor("visit(ClassModifier5)"); }
        public object visit(ClassModifier5 n, object o) { return  unimplementedVisitor("visit(ClassModifier5, object)"); }

        public object visit(ClassModifier6 n) { return unimplementedVisitor("visit(ClassModifier6)"); }
        public object visit(ClassModifier6 n, object o) { return  unimplementedVisitor("visit(ClassModifier6, object)"); }

        public object visit(FieldModifier0 n) { return unimplementedVisitor("visit(FieldModifier0)"); }
        public object visit(FieldModifier0 n, object o) { return  unimplementedVisitor("visit(FieldModifier0, object)"); }

        public object visit(FieldModifier1 n) { return unimplementedVisitor("visit(FieldModifier1)"); }
        public object visit(FieldModifier1 n, object o) { return  unimplementedVisitor("visit(FieldModifier1, object)"); }

        public object visit(FieldModifier2 n) { return unimplementedVisitor("visit(FieldModifier2)"); }
        public object visit(FieldModifier2 n, object o) { return  unimplementedVisitor("visit(FieldModifier2, object)"); }

        public object visit(FieldModifier3 n) { return unimplementedVisitor("visit(FieldModifier3)"); }
        public object visit(FieldModifier3 n, object o) { return  unimplementedVisitor("visit(FieldModifier3, object)"); }

        public object visit(FieldModifier4 n) { return unimplementedVisitor("visit(FieldModifier4)"); }
        public object visit(FieldModifier4 n, object o) { return  unimplementedVisitor("visit(FieldModifier4, object)"); }

        public object visit(FieldModifier5 n) { return unimplementedVisitor("visit(FieldModifier5)"); }
        public object visit(FieldModifier5 n, object o) { return  unimplementedVisitor("visit(FieldModifier5, object)"); }

        public object visit(FieldModifier6 n) { return unimplementedVisitor("visit(FieldModifier6)"); }
        public object visit(FieldModifier6 n, object o) { return  unimplementedVisitor("visit(FieldModifier6, object)"); }

        public object visit(MethodDeclarator0 n) { return unimplementedVisitor("visit(MethodDeclarator0)"); }
        public object visit(MethodDeclarator0 n, object o) { return  unimplementedVisitor("visit(MethodDeclarator0, object)"); }

        public object visit(MethodDeclarator1 n) { return unimplementedVisitor("visit(MethodDeclarator1)"); }
        public object visit(MethodDeclarator1 n, object o) { return  unimplementedVisitor("visit(MethodDeclarator1, object)"); }

        public object visit(MethodModifier0 n) { return unimplementedVisitor("visit(MethodModifier0)"); }
        public object visit(MethodModifier0 n, object o) { return  unimplementedVisitor("visit(MethodModifier0, object)"); }

        public object visit(MethodModifier1 n) { return unimplementedVisitor("visit(MethodModifier1)"); }
        public object visit(MethodModifier1 n, object o) { return  unimplementedVisitor("visit(MethodModifier1, object)"); }

        public object visit(MethodModifier2 n) { return unimplementedVisitor("visit(MethodModifier2)"); }
        public object visit(MethodModifier2 n, object o) { return  unimplementedVisitor("visit(MethodModifier2, object)"); }

        public object visit(MethodModifier3 n) { return unimplementedVisitor("visit(MethodModifier3)"); }
        public object visit(MethodModifier3 n, object o) { return  unimplementedVisitor("visit(MethodModifier3, object)"); }

        public object visit(MethodModifier4 n) { return unimplementedVisitor("visit(MethodModifier4)"); }
        public object visit(MethodModifier4 n, object o) { return  unimplementedVisitor("visit(MethodModifier4, object)"); }

        public object visit(MethodModifier5 n) { return unimplementedVisitor("visit(MethodModifier5)"); }
        public object visit(MethodModifier5 n, object o) { return  unimplementedVisitor("visit(MethodModifier5, object)"); }

        public object visit(MethodModifier6 n) { return unimplementedVisitor("visit(MethodModifier6)"); }
        public object visit(MethodModifier6 n, object o) { return  unimplementedVisitor("visit(MethodModifier6, object)"); }

        public object visit(MethodModifier7 n) { return unimplementedVisitor("visit(MethodModifier7)"); }
        public object visit(MethodModifier7 n, object o) { return  unimplementedVisitor("visit(MethodModifier7, object)"); }

        public object visit(MethodModifier8 n) { return unimplementedVisitor("visit(MethodModifier8)"); }
        public object visit(MethodModifier8 n, object o) { return  unimplementedVisitor("visit(MethodModifier8, object)"); }

        public object visit(ConstructorModifier0 n) { return unimplementedVisitor("visit(ConstructorModifier0)"); }
        public object visit(ConstructorModifier0 n, object o) { return  unimplementedVisitor("visit(ConstructorModifier0, object)"); }

        public object visit(ConstructorModifier1 n) { return unimplementedVisitor("visit(ConstructorModifier1)"); }
        public object visit(ConstructorModifier1 n, object o) { return  unimplementedVisitor("visit(ConstructorModifier1, object)"); }

        public object visit(ConstructorModifier2 n) { return unimplementedVisitor("visit(ConstructorModifier2)"); }
        public object visit(ConstructorModifier2 n, object o) { return  unimplementedVisitor("visit(ConstructorModifier2, object)"); }

        public object visit(ExplicitConstructorInvocation0 n) { return unimplementedVisitor("visit(ExplicitConstructorInvocation0)"); }
        public object visit(ExplicitConstructorInvocation0 n, object o) { return  unimplementedVisitor("visit(ExplicitConstructorInvocation0, object)"); }

        public object visit(ExplicitConstructorInvocation1 n) { return unimplementedVisitor("visit(ExplicitConstructorInvocation1)"); }
        public object visit(ExplicitConstructorInvocation1 n, object o) { return  unimplementedVisitor("visit(ExplicitConstructorInvocation1, object)"); }

        public object visit(ExplicitConstructorInvocation2 n) { return unimplementedVisitor("visit(ExplicitConstructorInvocation2)"); }
        public object visit(ExplicitConstructorInvocation2 n, object o) { return  unimplementedVisitor("visit(ExplicitConstructorInvocation2, object)"); }

        public object visit(InterfaceModifier0 n) { return unimplementedVisitor("visit(InterfaceModifier0)"); }
        public object visit(InterfaceModifier0 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier0, object)"); }

        public object visit(InterfaceModifier1 n) { return unimplementedVisitor("visit(InterfaceModifier1)"); }
        public object visit(InterfaceModifier1 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier1, object)"); }

        public object visit(InterfaceModifier2 n) { return unimplementedVisitor("visit(InterfaceModifier2)"); }
        public object visit(InterfaceModifier2 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier2, object)"); }

        public object visit(InterfaceModifier3 n) { return unimplementedVisitor("visit(InterfaceModifier3)"); }
        public object visit(InterfaceModifier3 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier3, object)"); }

        public object visit(InterfaceModifier4 n) { return unimplementedVisitor("visit(InterfaceModifier4)"); }
        public object visit(InterfaceModifier4 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier4, object)"); }

        public object visit(InterfaceModifier5 n) { return unimplementedVisitor("visit(InterfaceModifier5)"); }
        public object visit(InterfaceModifier5 n, object o) { return  unimplementedVisitor("visit(InterfaceModifier5, object)"); }

        public object visit(ExtendsInterfaces0 n) { return unimplementedVisitor("visit(ExtendsInterfaces0)"); }
        public object visit(ExtendsInterfaces0 n, object o) { return  unimplementedVisitor("visit(ExtendsInterfaces0, object)"); }

        public object visit(ExtendsInterfaces1 n) { return unimplementedVisitor("visit(ExtendsInterfaces1)"); }
        public object visit(ExtendsInterfaces1 n, object o) { return  unimplementedVisitor("visit(ExtendsInterfaces1, object)"); }

        public object visit(ConstantModifier0 n) { return unimplementedVisitor("visit(ConstantModifier0)"); }
        public object visit(ConstantModifier0 n, object o) { return  unimplementedVisitor("visit(ConstantModifier0, object)"); }

        public object visit(ConstantModifier1 n) { return unimplementedVisitor("visit(ConstantModifier1)"); }
        public object visit(ConstantModifier1 n, object o) { return  unimplementedVisitor("visit(ConstantModifier1, object)"); }

        public object visit(ConstantModifier2 n) { return unimplementedVisitor("visit(ConstantModifier2)"); }
        public object visit(ConstantModifier2 n, object o) { return  unimplementedVisitor("visit(ConstantModifier2, object)"); }

        public object visit(AbstractMethodModifier0 n) { return unimplementedVisitor("visit(AbstractMethodModifier0)"); }
        public object visit(AbstractMethodModifier0 n, object o) { return  unimplementedVisitor("visit(AbstractMethodModifier0, object)"); }

        public object visit(AbstractMethodModifier1 n) { return unimplementedVisitor("visit(AbstractMethodModifier1)"); }
        public object visit(AbstractMethodModifier1 n, object o) { return  unimplementedVisitor("visit(AbstractMethodModifier1, object)"); }

        public object visit(AnnotationTypeElementDeclaration0 n) { return unimplementedVisitor("visit(AnnotationTypeElementDeclaration0)"); }
        public object visit(AnnotationTypeElementDeclaration0 n, object o) { return  unimplementedVisitor("visit(AnnotationTypeElementDeclaration0, object)"); }

        public object visit(AnnotationTypeElementDeclaration1 n) { return unimplementedVisitor("visit(AnnotationTypeElementDeclaration1)"); }
        public object visit(AnnotationTypeElementDeclaration1 n, object o) { return  unimplementedVisitor("visit(AnnotationTypeElementDeclaration1, object)"); }

        public object visit(AssertStatement0 n) { return unimplementedVisitor("visit(AssertStatement0)"); }
        public object visit(AssertStatement0 n, object o) { return  unimplementedVisitor("visit(AssertStatement0, object)"); }

        public object visit(AssertStatement1 n) { return unimplementedVisitor("visit(AssertStatement1)"); }
        public object visit(AssertStatement1 n, object o) { return  unimplementedVisitor("visit(AssertStatement1, object)"); }

        public object visit(SwitchLabel0 n) { return unimplementedVisitor("visit(SwitchLabel0)"); }
        public object visit(SwitchLabel0 n, object o) { return  unimplementedVisitor("visit(SwitchLabel0, object)"); }

        public object visit(SwitchLabel1 n) { return unimplementedVisitor("visit(SwitchLabel1)"); }
        public object visit(SwitchLabel1 n, object o) { return  unimplementedVisitor("visit(SwitchLabel1, object)"); }

        public object visit(SwitchLabel2 n) { return unimplementedVisitor("visit(SwitchLabel2)"); }
        public object visit(SwitchLabel2 n, object o) { return  unimplementedVisitor("visit(SwitchLabel2, object)"); }

        public object visit(TryStatement0 n) { return unimplementedVisitor("visit(TryStatement0)"); }
        public object visit(TryStatement0 n, object o) { return  unimplementedVisitor("visit(TryStatement0, object)"); }

        public object visit(TryStatement1 n) { return unimplementedVisitor("visit(TryStatement1)"); }
        public object visit(TryStatement1 n, object o) { return  unimplementedVisitor("visit(TryStatement1, object)"); }

        public object visit(PrimaryNoNewArray0 n) { return unimplementedVisitor("visit(PrimaryNoNewArray0)"); }
        public object visit(PrimaryNoNewArray0 n, object o) { return  unimplementedVisitor("visit(PrimaryNoNewArray0, object)"); }

        public object visit(PrimaryNoNewArray1 n) { return unimplementedVisitor("visit(PrimaryNoNewArray1)"); }
        public object visit(PrimaryNoNewArray1 n, object o) { return  unimplementedVisitor("visit(PrimaryNoNewArray1, object)"); }

        public object visit(PrimaryNoNewArray2 n) { return unimplementedVisitor("visit(PrimaryNoNewArray2)"); }
        public object visit(PrimaryNoNewArray2 n, object o) { return  unimplementedVisitor("visit(PrimaryNoNewArray2, object)"); }

        public object visit(PrimaryNoNewArray3 n) { return unimplementedVisitor("visit(PrimaryNoNewArray3)"); }
        public object visit(PrimaryNoNewArray3 n, object o) { return  unimplementedVisitor("visit(PrimaryNoNewArray3, object)"); }

        public object visit(PrimaryNoNewArray4 n) { return unimplementedVisitor("visit(PrimaryNoNewArray4)"); }
        public object visit(PrimaryNoNewArray4 n, object o) { return  unimplementedVisitor("visit(PrimaryNoNewArray4, object)"); }

        public object visit(Literal0 n) { return unimplementedVisitor("visit(Literal0)"); }
        public object visit(Literal0 n, object o) { return  unimplementedVisitor("visit(Literal0, object)"); }

        public object visit(Literal1 n) { return unimplementedVisitor("visit(Literal1)"); }
        public object visit(Literal1 n, object o) { return  unimplementedVisitor("visit(Literal1, object)"); }

        public object visit(Literal2 n) { return unimplementedVisitor("visit(Literal2)"); }
        public object visit(Literal2 n, object o) { return  unimplementedVisitor("visit(Literal2, object)"); }

        public object visit(Literal3 n) { return unimplementedVisitor("visit(Literal3)"); }
        public object visit(Literal3 n, object o) { return  unimplementedVisitor("visit(Literal3, object)"); }

        public object visit(Literal4 n) { return unimplementedVisitor("visit(Literal4)"); }
        public object visit(Literal4 n, object o) { return  unimplementedVisitor("visit(Literal4, object)"); }

        public object visit(Literal5 n) { return unimplementedVisitor("visit(Literal5)"); }
        public object visit(Literal5 n, object o) { return  unimplementedVisitor("visit(Literal5, object)"); }

        public object visit(Literal6 n) { return unimplementedVisitor("visit(Literal6)"); }
        public object visit(Literal6 n, object o) { return  unimplementedVisitor("visit(Literal6, object)"); }

        public object visit(BooleanLiteral0 n) { return unimplementedVisitor("visit(BooleanLiteral0)"); }
        public object visit(BooleanLiteral0 n, object o) { return  unimplementedVisitor("visit(BooleanLiteral0, object)"); }

        public object visit(BooleanLiteral1 n) { return unimplementedVisitor("visit(BooleanLiteral1)"); }
        public object visit(BooleanLiteral1 n, object o) { return  unimplementedVisitor("visit(BooleanLiteral1, object)"); }

        public object visit(ClassInstanceCreationExpression0 n) { return unimplementedVisitor("visit(ClassInstanceCreationExpression0)"); }
        public object visit(ClassInstanceCreationExpression0 n, object o) { return  unimplementedVisitor("visit(ClassInstanceCreationExpression0, object)"); }

        public object visit(ClassInstanceCreationExpression1 n) { return unimplementedVisitor("visit(ClassInstanceCreationExpression1)"); }
        public object visit(ClassInstanceCreationExpression1 n, object o) { return  unimplementedVisitor("visit(ClassInstanceCreationExpression1, object)"); }

        public object visit(ArrayCreationExpression0 n) { return unimplementedVisitor("visit(ArrayCreationExpression0)"); }
        public object visit(ArrayCreationExpression0 n, object o) { return  unimplementedVisitor("visit(ArrayCreationExpression0, object)"); }

        public object visit(ArrayCreationExpression1 n) { return unimplementedVisitor("visit(ArrayCreationExpression1)"); }
        public object visit(ArrayCreationExpression1 n, object o) { return  unimplementedVisitor("visit(ArrayCreationExpression1, object)"); }

        public object visit(ArrayCreationExpression2 n) { return unimplementedVisitor("visit(ArrayCreationExpression2)"); }
        public object visit(ArrayCreationExpression2 n, object o) { return  unimplementedVisitor("visit(ArrayCreationExpression2, object)"); }

        public object visit(ArrayCreationExpression3 n) { return unimplementedVisitor("visit(ArrayCreationExpression3)"); }
        public object visit(ArrayCreationExpression3 n, object o) { return  unimplementedVisitor("visit(ArrayCreationExpression3, object)"); }

        public object visit(Dims0 n) { return unimplementedVisitor("visit(Dims0)"); }
        public object visit(Dims0 n, object o) { return  unimplementedVisitor("visit(Dims0, object)"); }

        public object visit(Dims1 n) { return unimplementedVisitor("visit(Dims1)"); }
        public object visit(Dims1 n, object o) { return  unimplementedVisitor("visit(Dims1, object)"); }

        public object visit(FieldAccess0 n) { return unimplementedVisitor("visit(FieldAccess0)"); }
        public object visit(FieldAccess0 n, object o) { return  unimplementedVisitor("visit(FieldAccess0, object)"); }

        public object visit(FieldAccess1 n) { return unimplementedVisitor("visit(FieldAccess1)"); }
        public object visit(FieldAccess1 n, object o) { return  unimplementedVisitor("visit(FieldAccess1, object)"); }

        public object visit(FieldAccess2 n) { return unimplementedVisitor("visit(FieldAccess2)"); }
        public object visit(FieldAccess2 n, object o) { return  unimplementedVisitor("visit(FieldAccess2, object)"); }

        public object visit(MethodInvocation0 n) { return unimplementedVisitor("visit(MethodInvocation0)"); }
        public object visit(MethodInvocation0 n, object o) { return  unimplementedVisitor("visit(MethodInvocation0, object)"); }

        public object visit(MethodInvocation1 n) { return unimplementedVisitor("visit(MethodInvocation1)"); }
        public object visit(MethodInvocation1 n, object o) { return  unimplementedVisitor("visit(MethodInvocation1, object)"); }

        public object visit(MethodInvocation2 n) { return unimplementedVisitor("visit(MethodInvocation2)"); }
        public object visit(MethodInvocation2 n, object o) { return  unimplementedVisitor("visit(MethodInvocation2, object)"); }

        public object visit(MethodInvocation3 n) { return unimplementedVisitor("visit(MethodInvocation3)"); }
        public object visit(MethodInvocation3 n, object o) { return  unimplementedVisitor("visit(MethodInvocation3, object)"); }

        public object visit(MethodInvocation4 n) { return unimplementedVisitor("visit(MethodInvocation4)"); }
        public object visit(MethodInvocation4 n, object o) { return  unimplementedVisitor("visit(MethodInvocation4, object)"); }

        public object visit(ArrayAccess0 n) { return unimplementedVisitor("visit(ArrayAccess0)"); }
        public object visit(ArrayAccess0 n, object o) { return  unimplementedVisitor("visit(ArrayAccess0, object)"); }

        public object visit(ArrayAccess1 n) { return unimplementedVisitor("visit(ArrayAccess1)"); }
        public object visit(ArrayAccess1 n, object o) { return  unimplementedVisitor("visit(ArrayAccess1, object)"); }

        public object visit(UnaryExpression0 n) { return unimplementedVisitor("visit(UnaryExpression0)"); }
        public object visit(UnaryExpression0 n, object o) { return  unimplementedVisitor("visit(UnaryExpression0, object)"); }

        public object visit(UnaryExpression1 n) { return unimplementedVisitor("visit(UnaryExpression1)"); }
        public object visit(UnaryExpression1 n, object o) { return  unimplementedVisitor("visit(UnaryExpression1, object)"); }

        public object visit(UnaryExpressionNotPlusMinus0 n) { return unimplementedVisitor("visit(UnaryExpressionNotPlusMinus0)"); }
        public object visit(UnaryExpressionNotPlusMinus0 n, object o) { return  unimplementedVisitor("visit(UnaryExpressionNotPlusMinus0, object)"); }

        public object visit(UnaryExpressionNotPlusMinus1 n) { return unimplementedVisitor("visit(UnaryExpressionNotPlusMinus1)"); }
        public object visit(UnaryExpressionNotPlusMinus1 n, object o) { return  unimplementedVisitor("visit(UnaryExpressionNotPlusMinus1, object)"); }

        public object visit(CastExpression0 n) { return unimplementedVisitor("visit(CastExpression0)"); }
        public object visit(CastExpression0 n, object o) { return  unimplementedVisitor("visit(CastExpression0, object)"); }

        public object visit(CastExpression1 n) { return unimplementedVisitor("visit(CastExpression1)"); }
        public object visit(CastExpression1 n, object o) { return  unimplementedVisitor("visit(CastExpression1, object)"); }

        public object visit(MultiplicativeExpression0 n) { return unimplementedVisitor("visit(MultiplicativeExpression0)"); }
        public object visit(MultiplicativeExpression0 n, object o) { return  unimplementedVisitor("visit(MultiplicativeExpression0, object)"); }

        public object visit(MultiplicativeExpression1 n) { return unimplementedVisitor("visit(MultiplicativeExpression1)"); }
        public object visit(MultiplicativeExpression1 n, object o) { return  unimplementedVisitor("visit(MultiplicativeExpression1, object)"); }

        public object visit(MultiplicativeExpression2 n) { return unimplementedVisitor("visit(MultiplicativeExpression2)"); }
        public object visit(MultiplicativeExpression2 n, object o) { return  unimplementedVisitor("visit(MultiplicativeExpression2, object)"); }

        public object visit(AdditiveExpression0 n) { return unimplementedVisitor("visit(AdditiveExpression0)"); }
        public object visit(AdditiveExpression0 n, object o) { return  unimplementedVisitor("visit(AdditiveExpression0, object)"); }

        public object visit(AdditiveExpression1 n) { return unimplementedVisitor("visit(AdditiveExpression1)"); }
        public object visit(AdditiveExpression1 n, object o) { return  unimplementedVisitor("visit(AdditiveExpression1, object)"); }

        public object visit(ShiftExpression0 n) { return unimplementedVisitor("visit(ShiftExpression0)"); }
        public object visit(ShiftExpression0 n, object o) { return  unimplementedVisitor("visit(ShiftExpression0, object)"); }

        public object visit(ShiftExpression1 n) { return unimplementedVisitor("visit(ShiftExpression1)"); }
        public object visit(ShiftExpression1 n, object o) { return  unimplementedVisitor("visit(ShiftExpression1, object)"); }

        public object visit(ShiftExpression2 n) { return unimplementedVisitor("visit(ShiftExpression2)"); }
        public object visit(ShiftExpression2 n, object o) { return  unimplementedVisitor("visit(ShiftExpression2, object)"); }

        public object visit(RelationalExpression0 n) { return unimplementedVisitor("visit(RelationalExpression0)"); }
        public object visit(RelationalExpression0 n, object o) { return  unimplementedVisitor("visit(RelationalExpression0, object)"); }

        public object visit(RelationalExpression1 n) { return unimplementedVisitor("visit(RelationalExpression1)"); }
        public object visit(RelationalExpression1 n, object o) { return  unimplementedVisitor("visit(RelationalExpression1, object)"); }

        public object visit(RelationalExpression2 n) { return unimplementedVisitor("visit(RelationalExpression2)"); }
        public object visit(RelationalExpression2 n, object o) { return  unimplementedVisitor("visit(RelationalExpression2, object)"); }

        public object visit(RelationalExpression3 n) { return unimplementedVisitor("visit(RelationalExpression3)"); }
        public object visit(RelationalExpression3 n, object o) { return  unimplementedVisitor("visit(RelationalExpression3, object)"); }

        public object visit(RelationalExpression4 n) { return unimplementedVisitor("visit(RelationalExpression4)"); }
        public object visit(RelationalExpression4 n, object o) { return  unimplementedVisitor("visit(RelationalExpression4, object)"); }

        public object visit(EqualityExpression0 n) { return unimplementedVisitor("visit(EqualityExpression0)"); }
        public object visit(EqualityExpression0 n, object o) { return  unimplementedVisitor("visit(EqualityExpression0, object)"); }

        public object visit(EqualityExpression1 n) { return unimplementedVisitor("visit(EqualityExpression1)"); }
        public object visit(EqualityExpression1 n, object o) { return  unimplementedVisitor("visit(EqualityExpression1, object)"); }

        public object visit(AssignmentOperator0 n) { return unimplementedVisitor("visit(AssignmentOperator0)"); }
        public object visit(AssignmentOperator0 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator0, object)"); }

        public object visit(AssignmentOperator1 n) { return unimplementedVisitor("visit(AssignmentOperator1)"); }
        public object visit(AssignmentOperator1 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator1, object)"); }

        public object visit(AssignmentOperator2 n) { return unimplementedVisitor("visit(AssignmentOperator2)"); }
        public object visit(AssignmentOperator2 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator2, object)"); }

        public object visit(AssignmentOperator3 n) { return unimplementedVisitor("visit(AssignmentOperator3)"); }
        public object visit(AssignmentOperator3 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator3, object)"); }

        public object visit(AssignmentOperator4 n) { return unimplementedVisitor("visit(AssignmentOperator4)"); }
        public object visit(AssignmentOperator4 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator4, object)"); }

        public object visit(AssignmentOperator5 n) { return unimplementedVisitor("visit(AssignmentOperator5)"); }
        public object visit(AssignmentOperator5 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator5, object)"); }

        public object visit(AssignmentOperator6 n) { return unimplementedVisitor("visit(AssignmentOperator6)"); }
        public object visit(AssignmentOperator6 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator6, object)"); }

        public object visit(AssignmentOperator7 n) { return unimplementedVisitor("visit(AssignmentOperator7)"); }
        public object visit(AssignmentOperator7 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator7, object)"); }

        public object visit(AssignmentOperator8 n) { return unimplementedVisitor("visit(AssignmentOperator8)"); }
        public object visit(AssignmentOperator8 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator8, object)"); }

        public object visit(AssignmentOperator9 n) { return unimplementedVisitor("visit(AssignmentOperator9)"); }
        public object visit(AssignmentOperator9 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator9, object)"); }

        public object visit(AssignmentOperator10 n) { return unimplementedVisitor("visit(AssignmentOperator10)"); }
        public object visit(AssignmentOperator10 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator10, object)"); }

        public object visit(AssignmentOperator11 n) { return unimplementedVisitor("visit(AssignmentOperator11)"); }
        public object visit(AssignmentOperator11 n, object o) { return  unimplementedVisitor("visit(AssignmentOperator11, object)"); }


        public object visit(Ast n)
        {
            if (n is AstToken) return visit((AstToken) n);
            else if (n is identifier) return visit((identifier) n);
            else if (n is PrimitiveType) return visit((PrimitiveType) n);
            else if (n is ClassType) return visit((ClassType) n);
            else if (n is InterfaceType) return visit((InterfaceType) n);
            else if (n is TypeName) return visit((TypeName) n);
            else if (n is ArrayType) return visit((ArrayType) n);
            else if (n is TypeParameter) return visit((TypeParameter) n);
            else if (n is TypeBound) return visit((TypeBound) n);
            else if (n is AdditionalBoundList) return visit((AdditionalBoundList) n);
            else if (n is AdditionalBound) return visit((AdditionalBound) n);
            else if (n is TypeArguments) return visit((TypeArguments) n);
            else if (n is ActualTypeArgumentList) return visit((ActualTypeArgumentList) n);
            else if (n is Wildcard) return visit((Wildcard) n);
            else if (n is PackageName) return visit((PackageName) n);
            else if (n is ExpressionName) return visit((ExpressionName) n);
            else if (n is MethodName) return visit((MethodName) n);
            else if (n is PackageOrTypeName) return visit((PackageOrTypeName) n);
            else if (n is AmbiguousName) return visit((AmbiguousName) n);
            else if (n is CompilationUnit) return visit((CompilationUnit) n);
            else if (n is ImportDeclarations) return visit((ImportDeclarations) n);
            else if (n is TypeDeclarations) return visit((TypeDeclarations) n);
            else if (n is PackageDeclaration) return visit((PackageDeclaration) n);
            else if (n is SingleTypeImportDeclaration) return visit((SingleTypeImportDeclaration) n);
            else if (n is TypeImportOnDemandDeclaration) return visit((TypeImportOnDemandDeclaration) n);
            else if (n is SingleStaticImportDeclaration) return visit((SingleStaticImportDeclaration) n);
            else if (n is StaticImportOnDemandDeclaration) return visit((StaticImportOnDemandDeclaration) n);
            else if (n is TypeDeclaration) return visit((TypeDeclaration) n);
            else if (n is NormalClassDeclaration) return visit((NormalClassDeclaration) n);
            else if (n is ClassModifiers) return visit((ClassModifiers) n);
            else if (n is TypeParameters) return visit((TypeParameters) n);
            else if (n is TypeParameterList) return visit((TypeParameterList) n);
            else if (n is Super) return visit((Super) n);
            else if (n is Interfaces) return visit((Interfaces) n);
            else if (n is InterfaceTypeList) return visit((InterfaceTypeList) n);
            else if (n is ClassBody) return visit((ClassBody) n);
            else if (n is ClassBodyDeclarations) return visit((ClassBodyDeclarations) n);
            else if (n is ClassMemberDeclaration) return visit((ClassMemberDeclaration) n);
            else if (n is FieldDeclaration) return visit((FieldDeclaration) n);
            else if (n is VariableDeclarators) return visit((VariableDeclarators) n);
            else if (n is VariableDeclarator) return visit((VariableDeclarator) n);
            else if (n is VariableDeclaratorId) return visit((VariableDeclaratorId) n);
            else if (n is FieldModifiers) return visit((FieldModifiers) n);
            else if (n is MethodDeclaration) return visit((MethodDeclaration) n);
            else if (n is MethodHeader) return visit((MethodHeader) n);
            else if (n is ResultType) return visit((ResultType) n);
            else if (n is FormalParameterList) return visit((FormalParameterList) n);
            else if (n is FormalParameters) return visit((FormalParameters) n);
            else if (n is FormalParameter) return visit((FormalParameter) n);
            else if (n is VariableModifiers) return visit((VariableModifiers) n);
            else if (n is VariableModifier) return visit((VariableModifier) n);
            else if (n is LastFormalParameter) return visit((LastFormalParameter) n);
            else if (n is MethodModifiers) return visit((MethodModifiers) n);
            else if (n is Throws) return visit((Throws) n);
            else if (n is ExceptionTypeList) return visit((ExceptionTypeList) n);
            else if (n is MethodBody) return visit((MethodBody) n);
            else if (n is StaticInitializer) return visit((StaticInitializer) n);
            else if (n is ConstructorDeclaration) return visit((ConstructorDeclaration) n);
            else if (n is ConstructorDeclarator) return visit((ConstructorDeclarator) n);
            else if (n is ConstructorModifiers) return visit((ConstructorModifiers) n);
            else if (n is ConstructorBody) return visit((ConstructorBody) n);
            else if (n is EnumDeclaration) return visit((EnumDeclaration) n);
            else if (n is EnumBody) return visit((EnumBody) n);
            else if (n is EnumConstants) return visit((EnumConstants) n);
            else if (n is EnumConstant) return visit((EnumConstant) n);
            else if (n is Arguments) return visit((Arguments) n);
            else if (n is EnumBodyDeclarations) return visit((EnumBodyDeclarations) n);
            else if (n is NormalInterfaceDeclaration) return visit((NormalInterfaceDeclaration) n);
            else if (n is InterfaceModifiers) return visit((InterfaceModifiers) n);
            else if (n is InterfaceBody) return visit((InterfaceBody) n);
            else if (n is InterfaceMemberDeclarations) return visit((InterfaceMemberDeclarations) n);
            else if (n is InterfaceMemberDeclaration) return visit((InterfaceMemberDeclaration) n);
            else if (n is ConstantDeclaration) return visit((ConstantDeclaration) n);
            else if (n is ConstantModifiers) return visit((ConstantModifiers) n);
            else if (n is AbstractMethodDeclaration) return visit((AbstractMethodDeclaration) n);
            else if (n is AbstractMethodModifiers) return visit((AbstractMethodModifiers) n);
            else if (n is AnnotationTypeDeclaration) return visit((AnnotationTypeDeclaration) n);
            else if (n is AnnotationTypeBody) return visit((AnnotationTypeBody) n);
            else if (n is AnnotationTypeElementDeclarations) return visit((AnnotationTypeElementDeclarations) n);
            else if (n is DefaultValue) return visit((DefaultValue) n);
            else if (n is Annotations) return visit((Annotations) n);
            else if (n is NormalAnnotation) return visit((NormalAnnotation) n);
            else if (n is ElementValuePairs) return visit((ElementValuePairs) n);
            else if (n is ElementValuePair) return visit((ElementValuePair) n);
            else if (n is ElementValueArrayInitializer) return visit((ElementValueArrayInitializer) n);
            else if (n is ElementValues) return visit((ElementValues) n);
            else if (n is MarkerAnnotation) return visit((MarkerAnnotation) n);
            else if (n is SingleElementAnnotation) return visit((SingleElementAnnotation) n);
            else if (n is ArrayInitializer) return visit((ArrayInitializer) n);
            else if (n is VariableInitializers) return visit((VariableInitializers) n);
            else if (n is Block) return visit((Block) n);
            else if (n is BlockStatements) return visit((BlockStatements) n);
            else if (n is LocalVariableDeclarationStatement) return visit((LocalVariableDeclarationStatement) n);
            else if (n is LocalVariableDeclaration) return visit((LocalVariableDeclaration) n);
            else if (n is IfThenStatement) return visit((IfThenStatement) n);
            else if (n is IfThenElseStatement) return visit((IfThenElseStatement) n);
            else if (n is IfThenElseStatementNoShortIf) return visit((IfThenElseStatementNoShortIf) n);
            else if (n is EmptyStatement) return visit((EmptyStatement) n);
            else if (n is LabeledStatement) return visit((LabeledStatement) n);
            else if (n is LabeledStatementNoShortIf) return visit((LabeledStatementNoShortIf) n);
            else if (n is ExpressionStatement) return visit((ExpressionStatement) n);
            else if (n is SwitchStatement) return visit((SwitchStatement) n);
            else if (n is SwitchBlock) return visit((SwitchBlock) n);
            else if (n is SwitchBlockStatementGroups) return visit((SwitchBlockStatementGroups) n);
            else if (n is SwitchBlockStatementGroup) return visit((SwitchBlockStatementGroup) n);
            else if (n is SwitchLabels) return visit((SwitchLabels) n);
            else if (n is WhileStatement) return visit((WhileStatement) n);
            else if (n is WhileStatementNoShortIf) return visit((WhileStatementNoShortIf) n);
            else if (n is DoStatement) return visit((DoStatement) n);
            else if (n is BasicForStatement) return visit((BasicForStatement) n);
            else if (n is ForStatementNoShortIf) return visit((ForStatementNoShortIf) n);
            else if (n is StatementExpressionList) return visit((StatementExpressionList) n);
            else if (n is EnhancedForStatement) return visit((EnhancedForStatement) n);
            else if (n is BreakStatement) return visit((BreakStatement) n);
            else if (n is ContinueStatement) return visit((ContinueStatement) n);
            else if (n is ReturnStatement) return visit((ReturnStatement) n);
            else if (n is ThrowStatement) return visit((ThrowStatement) n);
            else if (n is SynchronizedStatement) return visit((SynchronizedStatement) n);
            else if (n is Catches) return visit((Catches) n);
            else if (n is CatchClause) return visit((CatchClause) n);
            else if (n is Finally) return visit((Finally) n);
            else if (n is ArgumentList) return visit((ArgumentList) n);
            else if (n is DimExprs) return visit((DimExprs) n);
            else if (n is DimExpr) return visit((DimExpr) n);
            else if (n is PostIncrementExpression) return visit((PostIncrementExpression) n);
            else if (n is PostDecrementExpression) return visit((PostDecrementExpression) n);
            else if (n is PreIncrementExpression) return visit((PreIncrementExpression) n);
            else if (n is PreDecrementExpression) return visit((PreDecrementExpression) n);
            else if (n is AndExpression) return visit((AndExpression) n);
            else if (n is ExclusiveOrExpression) return visit((ExclusiveOrExpression) n);
            else if (n is InclusiveOrExpression) return visit((InclusiveOrExpression) n);
            else if (n is ConditionalAndExpression) return visit((ConditionalAndExpression) n);
            else if (n is ConditionalOrExpression) return visit((ConditionalOrExpression) n);
            else if (n is ConditionalExpression) return visit((ConditionalExpression) n);
            else if (n is Assignment) return visit((Assignment) n);
            else if (n is Commaopt) return visit((Commaopt) n);
            else if (n is Ellipsisopt) return visit((Ellipsisopt) n);
            else if (n is LPGUserAction0) return visit((LPGUserAction0) n);
            else if (n is LPGUserAction1) return visit((LPGUserAction1) n);
            else if (n is LPGUserAction2) return visit((LPGUserAction2) n);
            else if (n is LPGUserAction3) return visit((LPGUserAction3) n);
            else if (n is LPGUserAction4) return visit((LPGUserAction4) n);
            else if (n is IntegralType0) return visit((IntegralType0) n);
            else if (n is IntegralType1) return visit((IntegralType1) n);
            else if (n is IntegralType2) return visit((IntegralType2) n);
            else if (n is IntegralType3) return visit((IntegralType3) n);
            else if (n is IntegralType4) return visit((IntegralType4) n);
            else if (n is FloatingPointType0) return visit((FloatingPointType0) n);
            else if (n is FloatingPointType1) return visit((FloatingPointType1) n);
            else if (n is WildcardBounds0) return visit((WildcardBounds0) n);
            else if (n is WildcardBounds1) return visit((WildcardBounds1) n);
            else if (n is ClassModifier0) return visit((ClassModifier0) n);
            else if (n is ClassModifier1) return visit((ClassModifier1) n);
            else if (n is ClassModifier2) return visit((ClassModifier2) n);
            else if (n is ClassModifier3) return visit((ClassModifier3) n);
            else if (n is ClassModifier4) return visit((ClassModifier4) n);
            else if (n is ClassModifier5) return visit((ClassModifier5) n);
            else if (n is ClassModifier6) return visit((ClassModifier6) n);
            else if (n is FieldModifier0) return visit((FieldModifier0) n);
            else if (n is FieldModifier1) return visit((FieldModifier1) n);
            else if (n is FieldModifier2) return visit((FieldModifier2) n);
            else if (n is FieldModifier3) return visit((FieldModifier3) n);
            else if (n is FieldModifier4) return visit((FieldModifier4) n);
            else if (n is FieldModifier5) return visit((FieldModifier5) n);
            else if (n is FieldModifier6) return visit((FieldModifier6) n);
            else if (n is MethodDeclarator0) return visit((MethodDeclarator0) n);
            else if (n is MethodDeclarator1) return visit((MethodDeclarator1) n);
            else if (n is MethodModifier0) return visit((MethodModifier0) n);
            else if (n is MethodModifier1) return visit((MethodModifier1) n);
            else if (n is MethodModifier2) return visit((MethodModifier2) n);
            else if (n is MethodModifier3) return visit((MethodModifier3) n);
            else if (n is MethodModifier4) return visit((MethodModifier4) n);
            else if (n is MethodModifier5) return visit((MethodModifier5) n);
            else if (n is MethodModifier6) return visit((MethodModifier6) n);
            else if (n is MethodModifier7) return visit((MethodModifier7) n);
            else if (n is MethodModifier8) return visit((MethodModifier8) n);
            else if (n is ConstructorModifier0) return visit((ConstructorModifier0) n);
            else if (n is ConstructorModifier1) return visit((ConstructorModifier1) n);
            else if (n is ConstructorModifier2) return visit((ConstructorModifier2) n);
            else if (n is ExplicitConstructorInvocation0) return visit((ExplicitConstructorInvocation0) n);
            else if (n is ExplicitConstructorInvocation1) return visit((ExplicitConstructorInvocation1) n);
            else if (n is ExplicitConstructorInvocation2) return visit((ExplicitConstructorInvocation2) n);
            else if (n is InterfaceModifier0) return visit((InterfaceModifier0) n);
            else if (n is InterfaceModifier1) return visit((InterfaceModifier1) n);
            else if (n is InterfaceModifier2) return visit((InterfaceModifier2) n);
            else if (n is InterfaceModifier3) return visit((InterfaceModifier3) n);
            else if (n is InterfaceModifier4) return visit((InterfaceModifier4) n);
            else if (n is InterfaceModifier5) return visit((InterfaceModifier5) n);
            else if (n is ExtendsInterfaces0) return visit((ExtendsInterfaces0) n);
            else if (n is ExtendsInterfaces1) return visit((ExtendsInterfaces1) n);
            else if (n is ConstantModifier0) return visit((ConstantModifier0) n);
            else if (n is ConstantModifier1) return visit((ConstantModifier1) n);
            else if (n is ConstantModifier2) return visit((ConstantModifier2) n);
            else if (n is AbstractMethodModifier0) return visit((AbstractMethodModifier0) n);
            else if (n is AbstractMethodModifier1) return visit((AbstractMethodModifier1) n);
            else if (n is AnnotationTypeElementDeclaration0) return visit((AnnotationTypeElementDeclaration0) n);
            else if (n is AnnotationTypeElementDeclaration1) return visit((AnnotationTypeElementDeclaration1) n);
            else if (n is AssertStatement0) return visit((AssertStatement0) n);
            else if (n is AssertStatement1) return visit((AssertStatement1) n);
            else if (n is SwitchLabel0) return visit((SwitchLabel0) n);
            else if (n is SwitchLabel1) return visit((SwitchLabel1) n);
            else if (n is SwitchLabel2) return visit((SwitchLabel2) n);
            else if (n is TryStatement0) return visit((TryStatement0) n);
            else if (n is TryStatement1) return visit((TryStatement1) n);
            else if (n is PrimaryNoNewArray0) return visit((PrimaryNoNewArray0) n);
            else if (n is PrimaryNoNewArray1) return visit((PrimaryNoNewArray1) n);
            else if (n is PrimaryNoNewArray2) return visit((PrimaryNoNewArray2) n);
            else if (n is PrimaryNoNewArray3) return visit((PrimaryNoNewArray3) n);
            else if (n is PrimaryNoNewArray4) return visit((PrimaryNoNewArray4) n);
            else if (n is Literal0) return visit((Literal0) n);
            else if (n is Literal1) return visit((Literal1) n);
            else if (n is Literal2) return visit((Literal2) n);
            else if (n is Literal3) return visit((Literal3) n);
            else if (n is Literal4) return visit((Literal4) n);
            else if (n is Literal5) return visit((Literal5) n);
            else if (n is Literal6) return visit((Literal6) n);
            else if (n is BooleanLiteral0) return visit((BooleanLiteral0) n);
            else if (n is BooleanLiteral1) return visit((BooleanLiteral1) n);
            else if (n is ClassInstanceCreationExpression0) return visit((ClassInstanceCreationExpression0) n);
            else if (n is ClassInstanceCreationExpression1) return visit((ClassInstanceCreationExpression1) n);
            else if (n is ArrayCreationExpression0) return visit((ArrayCreationExpression0) n);
            else if (n is ArrayCreationExpression1) return visit((ArrayCreationExpression1) n);
            else if (n is ArrayCreationExpression2) return visit((ArrayCreationExpression2) n);
            else if (n is ArrayCreationExpression3) return visit((ArrayCreationExpression3) n);
            else if (n is Dims0) return visit((Dims0) n);
            else if (n is Dims1) return visit((Dims1) n);
            else if (n is FieldAccess0) return visit((FieldAccess0) n);
            else if (n is FieldAccess1) return visit((FieldAccess1) n);
            else if (n is FieldAccess2) return visit((FieldAccess2) n);
            else if (n is MethodInvocation0) return visit((MethodInvocation0) n);
            else if (n is MethodInvocation1) return visit((MethodInvocation1) n);
            else if (n is MethodInvocation2) return visit((MethodInvocation2) n);
            else if (n is MethodInvocation3) return visit((MethodInvocation3) n);
            else if (n is MethodInvocation4) return visit((MethodInvocation4) n);
            else if (n is ArrayAccess0) return visit((ArrayAccess0) n);
            else if (n is ArrayAccess1) return visit((ArrayAccess1) n);
            else if (n is UnaryExpression0) return visit((UnaryExpression0) n);
            else if (n is UnaryExpression1) return visit((UnaryExpression1) n);
            else if (n is UnaryExpressionNotPlusMinus0) return visit((UnaryExpressionNotPlusMinus0) n);
            else if (n is UnaryExpressionNotPlusMinus1) return visit((UnaryExpressionNotPlusMinus1) n);
            else if (n is CastExpression0) return visit((CastExpression0) n);
            else if (n is CastExpression1) return visit((CastExpression1) n);
            else if (n is MultiplicativeExpression0) return visit((MultiplicativeExpression0) n);
            else if (n is MultiplicativeExpression1) return visit((MultiplicativeExpression1) n);
            else if (n is MultiplicativeExpression2) return visit((MultiplicativeExpression2) n);
            else if (n is AdditiveExpression0) return visit((AdditiveExpression0) n);
            else if (n is AdditiveExpression1) return visit((AdditiveExpression1) n);
            else if (n is ShiftExpression0) return visit((ShiftExpression0) n);
            else if (n is ShiftExpression1) return visit((ShiftExpression1) n);
            else if (n is ShiftExpression2) return visit((ShiftExpression2) n);
            else if (n is RelationalExpression0) return visit((RelationalExpression0) n);
            else if (n is RelationalExpression1) return visit((RelationalExpression1) n);
            else if (n is RelationalExpression2) return visit((RelationalExpression2) n);
            else if (n is RelationalExpression3) return visit((RelationalExpression3) n);
            else if (n is RelationalExpression4) return visit((RelationalExpression4) n);
            else if (n is EqualityExpression0) return visit((EqualityExpression0) n);
            else if (n is EqualityExpression1) return visit((EqualityExpression1) n);
            else if (n is AssignmentOperator0) return visit((AssignmentOperator0) n);
            else if (n is AssignmentOperator1) return visit((AssignmentOperator1) n);
            else if (n is AssignmentOperator2) return visit((AssignmentOperator2) n);
            else if (n is AssignmentOperator3) return visit((AssignmentOperator3) n);
            else if (n is AssignmentOperator4) return visit((AssignmentOperator4) n);
            else if (n is AssignmentOperator5) return visit((AssignmentOperator5) n);
            else if (n is AssignmentOperator6) return visit((AssignmentOperator6) n);
            else if (n is AssignmentOperator7) return visit((AssignmentOperator7) n);
            else if (n is AssignmentOperator8) return visit((AssignmentOperator8) n);
            else if (n is AssignmentOperator9) return visit((AssignmentOperator9) n);
            else if (n is AssignmentOperator10) return visit((AssignmentOperator10) n);
            else if (n is AssignmentOperator11) return visit((AssignmentOperator11) n);
            throw new System.NotSupportedException("visit(" + n.GetType().ToString() + ")");
        }
        public object visit(Ast n, object o)
        {
            if (n is AstToken) return visit((AstToken) n, o);
            else if (n is identifier) return visit((identifier) n, o);
            else if (n is PrimitiveType) return visit((PrimitiveType) n, o);
            else if (n is ClassType) return visit((ClassType) n, o);
            else if (n is InterfaceType) return visit((InterfaceType) n, o);
            else if (n is TypeName) return visit((TypeName) n, o);
            else if (n is ArrayType) return visit((ArrayType) n, o);
            else if (n is TypeParameter) return visit((TypeParameter) n, o);
            else if (n is TypeBound) return visit((TypeBound) n, o);
            else if (n is AdditionalBoundList) return visit((AdditionalBoundList) n, o);
            else if (n is AdditionalBound) return visit((AdditionalBound) n, o);
            else if (n is TypeArguments) return visit((TypeArguments) n, o);
            else if (n is ActualTypeArgumentList) return visit((ActualTypeArgumentList) n, o);
            else if (n is Wildcard) return visit((Wildcard) n, o);
            else if (n is PackageName) return visit((PackageName) n, o);
            else if (n is ExpressionName) return visit((ExpressionName) n, o);
            else if (n is MethodName) return visit((MethodName) n, o);
            else if (n is PackageOrTypeName) return visit((PackageOrTypeName) n, o);
            else if (n is AmbiguousName) return visit((AmbiguousName) n, o);
            else if (n is CompilationUnit) return visit((CompilationUnit) n, o);
            else if (n is ImportDeclarations) return visit((ImportDeclarations) n, o);
            else if (n is TypeDeclarations) return visit((TypeDeclarations) n, o);
            else if (n is PackageDeclaration) return visit((PackageDeclaration) n, o);
            else if (n is SingleTypeImportDeclaration) return visit((SingleTypeImportDeclaration) n, o);
            else if (n is TypeImportOnDemandDeclaration) return visit((TypeImportOnDemandDeclaration) n, o);
            else if (n is SingleStaticImportDeclaration) return visit((SingleStaticImportDeclaration) n, o);
            else if (n is StaticImportOnDemandDeclaration) return visit((StaticImportOnDemandDeclaration) n, o);
            else if (n is TypeDeclaration) return visit((TypeDeclaration) n, o);
            else if (n is NormalClassDeclaration) return visit((NormalClassDeclaration) n, o);
            else if (n is ClassModifiers) return visit((ClassModifiers) n, o);
            else if (n is TypeParameters) return visit((TypeParameters) n, o);
            else if (n is TypeParameterList) return visit((TypeParameterList) n, o);
            else if (n is Super) return visit((Super) n, o);
            else if (n is Interfaces) return visit((Interfaces) n, o);
            else if (n is InterfaceTypeList) return visit((InterfaceTypeList) n, o);
            else if (n is ClassBody) return visit((ClassBody) n, o);
            else if (n is ClassBodyDeclarations) return visit((ClassBodyDeclarations) n, o);
            else if (n is ClassMemberDeclaration) return visit((ClassMemberDeclaration) n, o);
            else if (n is FieldDeclaration) return visit((FieldDeclaration) n, o);
            else if (n is VariableDeclarators) return visit((VariableDeclarators) n, o);
            else if (n is VariableDeclarator) return visit((VariableDeclarator) n, o);
            else if (n is VariableDeclaratorId) return visit((VariableDeclaratorId) n, o);
            else if (n is FieldModifiers) return visit((FieldModifiers) n, o);
            else if (n is MethodDeclaration) return visit((MethodDeclaration) n, o);
            else if (n is MethodHeader) return visit((MethodHeader) n, o);
            else if (n is ResultType) return visit((ResultType) n, o);
            else if (n is FormalParameterList) return visit((FormalParameterList) n, o);
            else if (n is FormalParameters) return visit((FormalParameters) n, o);
            else if (n is FormalParameter) return visit((FormalParameter) n, o);
            else if (n is VariableModifiers) return visit((VariableModifiers) n, o);
            else if (n is VariableModifier) return visit((VariableModifier) n, o);
            else if (n is LastFormalParameter) return visit((LastFormalParameter) n, o);
            else if (n is MethodModifiers) return visit((MethodModifiers) n, o);
            else if (n is Throws) return visit((Throws) n, o);
            else if (n is ExceptionTypeList) return visit((ExceptionTypeList) n, o);
            else if (n is MethodBody) return visit((MethodBody) n, o);
            else if (n is StaticInitializer) return visit((StaticInitializer) n, o);
            else if (n is ConstructorDeclaration) return visit((ConstructorDeclaration) n, o);
            else if (n is ConstructorDeclarator) return visit((ConstructorDeclarator) n, o);
            else if (n is ConstructorModifiers) return visit((ConstructorModifiers) n, o);
            else if (n is ConstructorBody) return visit((ConstructorBody) n, o);
            else if (n is EnumDeclaration) return visit((EnumDeclaration) n, o);
            else if (n is EnumBody) return visit((EnumBody) n, o);
            else if (n is EnumConstants) return visit((EnumConstants) n, o);
            else if (n is EnumConstant) return visit((EnumConstant) n, o);
            else if (n is Arguments) return visit((Arguments) n, o);
            else if (n is EnumBodyDeclarations) return visit((EnumBodyDeclarations) n, o);
            else if (n is NormalInterfaceDeclaration) return visit((NormalInterfaceDeclaration) n, o);
            else if (n is InterfaceModifiers) return visit((InterfaceModifiers) n, o);
            else if (n is InterfaceBody) return visit((InterfaceBody) n, o);
            else if (n is InterfaceMemberDeclarations) return visit((InterfaceMemberDeclarations) n, o);
            else if (n is InterfaceMemberDeclaration) return visit((InterfaceMemberDeclaration) n, o);
            else if (n is ConstantDeclaration) return visit((ConstantDeclaration) n, o);
            else if (n is ConstantModifiers) return visit((ConstantModifiers) n, o);
            else if (n is AbstractMethodDeclaration) return visit((AbstractMethodDeclaration) n, o);
            else if (n is AbstractMethodModifiers) return visit((AbstractMethodModifiers) n, o);
            else if (n is AnnotationTypeDeclaration) return visit((AnnotationTypeDeclaration) n, o);
            else if (n is AnnotationTypeBody) return visit((AnnotationTypeBody) n, o);
            else if (n is AnnotationTypeElementDeclarations) return visit((AnnotationTypeElementDeclarations) n, o);
            else if (n is DefaultValue) return visit((DefaultValue) n, o);
            else if (n is Annotations) return visit((Annotations) n, o);
            else if (n is NormalAnnotation) return visit((NormalAnnotation) n, o);
            else if (n is ElementValuePairs) return visit((ElementValuePairs) n, o);
            else if (n is ElementValuePair) return visit((ElementValuePair) n, o);
            else if (n is ElementValueArrayInitializer) return visit((ElementValueArrayInitializer) n, o);
            else if (n is ElementValues) return visit((ElementValues) n, o);
            else if (n is MarkerAnnotation) return visit((MarkerAnnotation) n, o);
            else if (n is SingleElementAnnotation) return visit((SingleElementAnnotation) n, o);
            else if (n is ArrayInitializer) return visit((ArrayInitializer) n, o);
            else if (n is VariableInitializers) return visit((VariableInitializers) n, o);
            else if (n is Block) return visit((Block) n, o);
            else if (n is BlockStatements) return visit((BlockStatements) n, o);
            else if (n is LocalVariableDeclarationStatement) return visit((LocalVariableDeclarationStatement) n, o);
            else if (n is LocalVariableDeclaration) return visit((LocalVariableDeclaration) n, o);
            else if (n is IfThenStatement) return visit((IfThenStatement) n, o);
            else if (n is IfThenElseStatement) return visit((IfThenElseStatement) n, o);
            else if (n is IfThenElseStatementNoShortIf) return visit((IfThenElseStatementNoShortIf) n, o);
            else if (n is EmptyStatement) return visit((EmptyStatement) n, o);
            else if (n is LabeledStatement) return visit((LabeledStatement) n, o);
            else if (n is LabeledStatementNoShortIf) return visit((LabeledStatementNoShortIf) n, o);
            else if (n is ExpressionStatement) return visit((ExpressionStatement) n, o);
            else if (n is SwitchStatement) return visit((SwitchStatement) n, o);
            else if (n is SwitchBlock) return visit((SwitchBlock) n, o);
            else if (n is SwitchBlockStatementGroups) return visit((SwitchBlockStatementGroups) n, o);
            else if (n is SwitchBlockStatementGroup) return visit((SwitchBlockStatementGroup) n, o);
            else if (n is SwitchLabels) return visit((SwitchLabels) n, o);
            else if (n is WhileStatement) return visit((WhileStatement) n, o);
            else if (n is WhileStatementNoShortIf) return visit((WhileStatementNoShortIf) n, o);
            else if (n is DoStatement) return visit((DoStatement) n, o);
            else if (n is BasicForStatement) return visit((BasicForStatement) n, o);
            else if (n is ForStatementNoShortIf) return visit((ForStatementNoShortIf) n, o);
            else if (n is StatementExpressionList) return visit((StatementExpressionList) n, o);
            else if (n is EnhancedForStatement) return visit((EnhancedForStatement) n, o);
            else if (n is BreakStatement) return visit((BreakStatement) n, o);
            else if (n is ContinueStatement) return visit((ContinueStatement) n, o);
            else if (n is ReturnStatement) return visit((ReturnStatement) n, o);
            else if (n is ThrowStatement) return visit((ThrowStatement) n, o);
            else if (n is SynchronizedStatement) return visit((SynchronizedStatement) n, o);
            else if (n is Catches) return visit((Catches) n, o);
            else if (n is CatchClause) return visit((CatchClause) n, o);
            else if (n is Finally) return visit((Finally) n, o);
            else if (n is ArgumentList) return visit((ArgumentList) n, o);
            else if (n is DimExprs) return visit((DimExprs) n, o);
            else if (n is DimExpr) return visit((DimExpr) n, o);
            else if (n is PostIncrementExpression) return visit((PostIncrementExpression) n, o);
            else if (n is PostDecrementExpression) return visit((PostDecrementExpression) n, o);
            else if (n is PreIncrementExpression) return visit((PreIncrementExpression) n, o);
            else if (n is PreDecrementExpression) return visit((PreDecrementExpression) n, o);
            else if (n is AndExpression) return visit((AndExpression) n, o);
            else if (n is ExclusiveOrExpression) return visit((ExclusiveOrExpression) n, o);
            else if (n is InclusiveOrExpression) return visit((InclusiveOrExpression) n, o);
            else if (n is ConditionalAndExpression) return visit((ConditionalAndExpression) n, o);
            else if (n is ConditionalOrExpression) return visit((ConditionalOrExpression) n, o);
            else if (n is ConditionalExpression) return visit((ConditionalExpression) n, o);
            else if (n is Assignment) return visit((Assignment) n, o);
            else if (n is Commaopt) return visit((Commaopt) n, o);
            else if (n is Ellipsisopt) return visit((Ellipsisopt) n, o);
            else if (n is LPGUserAction0) return visit((LPGUserAction0) n, o);
            else if (n is LPGUserAction1) return visit((LPGUserAction1) n, o);
            else if (n is LPGUserAction2) return visit((LPGUserAction2) n, o);
            else if (n is LPGUserAction3) return visit((LPGUserAction3) n, o);
            else if (n is LPGUserAction4) return visit((LPGUserAction4) n, o);
            else if (n is IntegralType0) return visit((IntegralType0) n, o);
            else if (n is IntegralType1) return visit((IntegralType1) n, o);
            else if (n is IntegralType2) return visit((IntegralType2) n, o);
            else if (n is IntegralType3) return visit((IntegralType3) n, o);
            else if (n is IntegralType4) return visit((IntegralType4) n, o);
            else if (n is FloatingPointType0) return visit((FloatingPointType0) n, o);
            else if (n is FloatingPointType1) return visit((FloatingPointType1) n, o);
            else if (n is WildcardBounds0) return visit((WildcardBounds0) n, o);
            else if (n is WildcardBounds1) return visit((WildcardBounds1) n, o);
            else if (n is ClassModifier0) return visit((ClassModifier0) n, o);
            else if (n is ClassModifier1) return visit((ClassModifier1) n, o);
            else if (n is ClassModifier2) return visit((ClassModifier2) n, o);
            else if (n is ClassModifier3) return visit((ClassModifier3) n, o);
            else if (n is ClassModifier4) return visit((ClassModifier4) n, o);
            else if (n is ClassModifier5) return visit((ClassModifier5) n, o);
            else if (n is ClassModifier6) return visit((ClassModifier6) n, o);
            else if (n is FieldModifier0) return visit((FieldModifier0) n, o);
            else if (n is FieldModifier1) return visit((FieldModifier1) n, o);
            else if (n is FieldModifier2) return visit((FieldModifier2) n, o);
            else if (n is FieldModifier3) return visit((FieldModifier3) n, o);
            else if (n is FieldModifier4) return visit((FieldModifier4) n, o);
            else if (n is FieldModifier5) return visit((FieldModifier5) n, o);
            else if (n is FieldModifier6) return visit((FieldModifier6) n, o);
            else if (n is MethodDeclarator0) return visit((MethodDeclarator0) n, o);
            else if (n is MethodDeclarator1) return visit((MethodDeclarator1) n, o);
            else if (n is MethodModifier0) return visit((MethodModifier0) n, o);
            else if (n is MethodModifier1) return visit((MethodModifier1) n, o);
            else if (n is MethodModifier2) return visit((MethodModifier2) n, o);
            else if (n is MethodModifier3) return visit((MethodModifier3) n, o);
            else if (n is MethodModifier4) return visit((MethodModifier4) n, o);
            else if (n is MethodModifier5) return visit((MethodModifier5) n, o);
            else if (n is MethodModifier6) return visit((MethodModifier6) n, o);
            else if (n is MethodModifier7) return visit((MethodModifier7) n, o);
            else if (n is MethodModifier8) return visit((MethodModifier8) n, o);
            else if (n is ConstructorModifier0) return visit((ConstructorModifier0) n, o);
            else if (n is ConstructorModifier1) return visit((ConstructorModifier1) n, o);
            else if (n is ConstructorModifier2) return visit((ConstructorModifier2) n, o);
            else if (n is ExplicitConstructorInvocation0) return visit((ExplicitConstructorInvocation0) n, o);
            else if (n is ExplicitConstructorInvocation1) return visit((ExplicitConstructorInvocation1) n, o);
            else if (n is ExplicitConstructorInvocation2) return visit((ExplicitConstructorInvocation2) n, o);
            else if (n is InterfaceModifier0) return visit((InterfaceModifier0) n, o);
            else if (n is InterfaceModifier1) return visit((InterfaceModifier1) n, o);
            else if (n is InterfaceModifier2) return visit((InterfaceModifier2) n, o);
            else if (n is InterfaceModifier3) return visit((InterfaceModifier3) n, o);
            else if (n is InterfaceModifier4) return visit((InterfaceModifier4) n, o);
            else if (n is InterfaceModifier5) return visit((InterfaceModifier5) n, o);
            else if (n is ExtendsInterfaces0) return visit((ExtendsInterfaces0) n, o);
            else if (n is ExtendsInterfaces1) return visit((ExtendsInterfaces1) n, o);
            else if (n is ConstantModifier0) return visit((ConstantModifier0) n, o);
            else if (n is ConstantModifier1) return visit((ConstantModifier1) n, o);
            else if (n is ConstantModifier2) return visit((ConstantModifier2) n, o);
            else if (n is AbstractMethodModifier0) return visit((AbstractMethodModifier0) n, o);
            else if (n is AbstractMethodModifier1) return visit((AbstractMethodModifier1) n, o);
            else if (n is AnnotationTypeElementDeclaration0) return visit((AnnotationTypeElementDeclaration0) n, o);
            else if (n is AnnotationTypeElementDeclaration1) return visit((AnnotationTypeElementDeclaration1) n, o);
            else if (n is AssertStatement0) return visit((AssertStatement0) n, o);
            else if (n is AssertStatement1) return visit((AssertStatement1) n, o);
            else if (n is SwitchLabel0) return visit((SwitchLabel0) n, o);
            else if (n is SwitchLabel1) return visit((SwitchLabel1) n, o);
            else if (n is SwitchLabel2) return visit((SwitchLabel2) n, o);
            else if (n is TryStatement0) return visit((TryStatement0) n, o);
            else if (n is TryStatement1) return visit((TryStatement1) n, o);
            else if (n is PrimaryNoNewArray0) return visit((PrimaryNoNewArray0) n, o);
            else if (n is PrimaryNoNewArray1) return visit((PrimaryNoNewArray1) n, o);
            else if (n is PrimaryNoNewArray2) return visit((PrimaryNoNewArray2) n, o);
            else if (n is PrimaryNoNewArray3) return visit((PrimaryNoNewArray3) n, o);
            else if (n is PrimaryNoNewArray4) return visit((PrimaryNoNewArray4) n, o);
            else if (n is Literal0) return visit((Literal0) n, o);
            else if (n is Literal1) return visit((Literal1) n, o);
            else if (n is Literal2) return visit((Literal2) n, o);
            else if (n is Literal3) return visit((Literal3) n, o);
            else if (n is Literal4) return visit((Literal4) n, o);
            else if (n is Literal5) return visit((Literal5) n, o);
            else if (n is Literal6) return visit((Literal6) n, o);
            else if (n is BooleanLiteral0) return visit((BooleanLiteral0) n, o);
            else if (n is BooleanLiteral1) return visit((BooleanLiteral1) n, o);
            else if (n is ClassInstanceCreationExpression0) return visit((ClassInstanceCreationExpression0) n, o);
            else if (n is ClassInstanceCreationExpression1) return visit((ClassInstanceCreationExpression1) n, o);
            else if (n is ArrayCreationExpression0) return visit((ArrayCreationExpression0) n, o);
            else if (n is ArrayCreationExpression1) return visit((ArrayCreationExpression1) n, o);
            else if (n is ArrayCreationExpression2) return visit((ArrayCreationExpression2) n, o);
            else if (n is ArrayCreationExpression3) return visit((ArrayCreationExpression3) n, o);
            else if (n is Dims0) return visit((Dims0) n, o);
            else if (n is Dims1) return visit((Dims1) n, o);
            else if (n is FieldAccess0) return visit((FieldAccess0) n, o);
            else if (n is FieldAccess1) return visit((FieldAccess1) n, o);
            else if (n is FieldAccess2) return visit((FieldAccess2) n, o);
            else if (n is MethodInvocation0) return visit((MethodInvocation0) n, o);
            else if (n is MethodInvocation1) return visit((MethodInvocation1) n, o);
            else if (n is MethodInvocation2) return visit((MethodInvocation2) n, o);
            else if (n is MethodInvocation3) return visit((MethodInvocation3) n, o);
            else if (n is MethodInvocation4) return visit((MethodInvocation4) n, o);
            else if (n is ArrayAccess0) return visit((ArrayAccess0) n, o);
            else if (n is ArrayAccess1) return visit((ArrayAccess1) n, o);
            else if (n is UnaryExpression0) return visit((UnaryExpression0) n, o);
            else if (n is UnaryExpression1) return visit((UnaryExpression1) n, o);
            else if (n is UnaryExpressionNotPlusMinus0) return visit((UnaryExpressionNotPlusMinus0) n, o);
            else if (n is UnaryExpressionNotPlusMinus1) return visit((UnaryExpressionNotPlusMinus1) n, o);
            else if (n is CastExpression0) return visit((CastExpression0) n, o);
            else if (n is CastExpression1) return visit((CastExpression1) n, o);
            else if (n is MultiplicativeExpression0) return visit((MultiplicativeExpression0) n, o);
            else if (n is MultiplicativeExpression1) return visit((MultiplicativeExpression1) n, o);
            else if (n is MultiplicativeExpression2) return visit((MultiplicativeExpression2) n, o);
            else if (n is AdditiveExpression0) return visit((AdditiveExpression0) n, o);
            else if (n is AdditiveExpression1) return visit((AdditiveExpression1) n, o);
            else if (n is ShiftExpression0) return visit((ShiftExpression0) n, o);
            else if (n is ShiftExpression1) return visit((ShiftExpression1) n, o);
            else if (n is ShiftExpression2) return visit((ShiftExpression2) n, o);
            else if (n is RelationalExpression0) return visit((RelationalExpression0) n, o);
            else if (n is RelationalExpression1) return visit((RelationalExpression1) n, o);
            else if (n is RelationalExpression2) return visit((RelationalExpression2) n, o);
            else if (n is RelationalExpression3) return visit((RelationalExpression3) n, o);
            else if (n is RelationalExpression4) return visit((RelationalExpression4) n, o);
            else if (n is EqualityExpression0) return visit((EqualityExpression0) n, o);
            else if (n is EqualityExpression1) return visit((EqualityExpression1) n, o);
            else if (n is AssignmentOperator0) return visit((AssignmentOperator0) n, o);
            else if (n is AssignmentOperator1) return visit((AssignmentOperator1) n, o);
            else if (n is AssignmentOperator2) return visit((AssignmentOperator2) n, o);
            else if (n is AssignmentOperator3) return visit((AssignmentOperator3) n, o);
            else if (n is AssignmentOperator4) return visit((AssignmentOperator4) n, o);
            else if (n is AssignmentOperator5) return visit((AssignmentOperator5) n, o);
            else if (n is AssignmentOperator6) return visit((AssignmentOperator6) n, o);
            else if (n is AssignmentOperator7) return visit((AssignmentOperator7) n, o);
            else if (n is AssignmentOperator8) return visit((AssignmentOperator8) n, o);
            else if (n is AssignmentOperator9) return visit((AssignmentOperator9) n, o);
            else if (n is AssignmentOperator10) return visit((AssignmentOperator10) n, o);
            else if (n is AssignmentOperator11) return visit((AssignmentOperator11) n, o);
            throw new System.NotSupportedException("visit(" + n.GetType().ToString() + ")");
        }
    }

    //#line 326 "dtParserTemplateF.gi

    public void ruleAction(int ruleNumber)
    {
        switch (ruleNumber)
        {
            //#line 327 "dtParserTemplateF.gi"

            //
            // Rule 3:  identifier ::= IDENTIFIER
            //
            case 3: {
                //#line 185 "GJavaParser.g"
                setResult(
                    //#line 185 GJavaParser.g
                    new identifier(this, getRhsIToken(1))
                //#line 185 GJavaParser.g
                );
            break;
            }
            //
            // Rule 4:  LPGUserAction ::= BlockStatementsopt
            //
            case 4:
                break;
            //
            // Rule 5:  LPGUserAction ::= $BeginAction BlockStatementsopt $EndAction
            //
            case 5: {
                //#line 191 "GJavaParser.g"
                setResult(
                    //#line 191 GJavaParser.g
                    new LPGUserAction0(getLeftIToken(), getRightIToken(),
                                       //#line 191 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 191 GJavaParser.g
                                       (IBlockStatementsopt)getRhsSym(2),
                                       //#line 191 GJavaParser.g
                                       new AstToken(getRhsIToken(3)))
                //#line 191 GJavaParser.g
                );
            break;
            }
            //
            // Rule 6:  LPGUserAction ::= $BeginJava BlockStatementsopt $EndJava
            //
            case 6: {
                //#line 192 "GJavaParser.g"
                setResult(
                    //#line 192 GJavaParser.g
                    new LPGUserAction1(getLeftIToken(), getRightIToken(),
                                       //#line 192 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 192 GJavaParser.g
                                       (IBlockStatementsopt)getRhsSym(2),
                                       //#line 192 GJavaParser.g
                                       new AstToken(getRhsIToken(3)))
                //#line 192 GJavaParser.g
                );
            break;
            }
            //
            // Rule 7:  LPGUserAction ::= $NoAction
            //
            case 7: {
                //#line 193 "GJavaParser.g"
                setResult(
                    //#line 193 GJavaParser.g
                    new LPGUserAction2(getRhsIToken(1))
                //#line 193 GJavaParser.g
                );
            break;
            }
            //
            // Rule 8:  LPGUserAction ::= $NullAction
            //
            case 8: {
                //#line 194 "GJavaParser.g"
                setResult(
                    //#line 194 GJavaParser.g
                    new LPGUserAction3(getRhsIToken(1))
                //#line 194 GJavaParser.g
                );
            break;
            }
            //
            // Rule 9:  LPGUserAction ::= $BadAction
            //
            case 9: {
                //#line 195 "GJavaParser.g"
                setResult(
                    //#line 195 GJavaParser.g
                    new LPGUserAction4(getRhsIToken(1))
                //#line 195 GJavaParser.g
                );
            break;
            }
            //
            // Rule 10:  Type ::= PrimitiveType
            //
            case 10:
                break;
            //
            // Rule 11:  Type ::= ReferenceType
            //
            case 11:
                break;
            //
            // Rule 12:  PrimitiveType ::= NumericType
            //
            case 12:
                break;
            //
            // Rule 13:  PrimitiveType ::= boolean
            //
            case 13: {
                //#line 204 "GJavaParser.g"
                setResult(
                    //#line 204 GJavaParser.g
                    new PrimitiveType(getRhsIToken(1))
                //#line 204 GJavaParser.g
                );
            break;
            }
            //
            // Rule 14:  NumericType ::= IntegralType
            //
            case 14:
                break;
            //
            // Rule 15:  NumericType ::= FloatingPointType
            //
            case 15:
                break;
            //
            // Rule 16:  IntegralType ::= byte
            //
            case 16: {
                //#line 209 "GJavaParser.g"
                setResult(
                    //#line 209 GJavaParser.g
                    new IntegralType0(getRhsIToken(1))
                //#line 209 GJavaParser.g
                );
            break;
            }
            //
            // Rule 17:  IntegralType ::= short
            //
            case 17: {
                //#line 210 "GJavaParser.g"
                setResult(
                    //#line 210 GJavaParser.g
                    new IntegralType1(getRhsIToken(1))
                //#line 210 GJavaParser.g
                );
            break;
            }
            //
            // Rule 18:  IntegralType ::= int
            //
            case 18: {
                //#line 211 "GJavaParser.g"
                setResult(
                    //#line 211 GJavaParser.g
                    new IntegralType2(getRhsIToken(1))
                //#line 211 GJavaParser.g
                );
            break;
            }
            //
            // Rule 19:  IntegralType ::= long
            //
            case 19: {
                //#line 212 "GJavaParser.g"
                setResult(
                    //#line 212 GJavaParser.g
                    new IntegralType3(getRhsIToken(1))
                //#line 212 GJavaParser.g
                );
            break;
            }
            //
            // Rule 20:  IntegralType ::= char
            //
            case 20: {
                //#line 213 "GJavaParser.g"
                setResult(
                    //#line 213 GJavaParser.g
                    new IntegralType4(getRhsIToken(1))
                //#line 213 GJavaParser.g
                );
            break;
            }
            //
            // Rule 21:  FloatingPointType ::= float
            //
            case 21: {
                //#line 215 "GJavaParser.g"
                setResult(
                    //#line 215 GJavaParser.g
                    new FloatingPointType0(getRhsIToken(1))
                //#line 215 GJavaParser.g
                );
            break;
            }
            //
            // Rule 22:  FloatingPointType ::= double
            //
            case 22: {
                //#line 216 "GJavaParser.g"
                setResult(
                    //#line 216 GJavaParser.g
                    new FloatingPointType1(getRhsIToken(1))
                //#line 216 GJavaParser.g
                );
            break;
            }
            //
            // Rule 23:  ReferenceType ::= ClassOrInterfaceType
            //
            case 23:
                break;
            //
            // Rule 24:  ReferenceType ::= TypeVariable
            //
            case 24:
                break;
            //
            // Rule 25:  ReferenceType ::= ArrayType
            //
            case 25:
                break;
            //
            // Rule 26:  ClassOrInterfaceType ::= ClassType
            //
            case 26:
                break;
            //
            // Rule 27:  ClassType ::= TypeName TypeArgumentsopt
            //
            case 27: {
                //#line 228 "GJavaParser.g"
                setResult(
                    //#line 228 GJavaParser.g
                    new ClassType(getLeftIToken(), getRightIToken(),
                                  //#line 228 GJavaParser.g
                                  (ITypeName)getRhsSym(1),
                                  //#line 228 GJavaParser.g
                                  (TypeArguments)getRhsSym(2))
                //#line 228 GJavaParser.g
                );
            break;
            }
            //
            // Rule 28:  InterfaceType ::= TypeName TypeArgumentsopt
            //
            case 28: {
                //#line 230 "GJavaParser.g"
                setResult(
                    //#line 230 GJavaParser.g
                    new InterfaceType(getLeftIToken(), getRightIToken(),
                                      //#line 230 GJavaParser.g
                                      (ITypeName)getRhsSym(1),
                                      //#line 230 GJavaParser.g
                                      (TypeArguments)getRhsSym(2))
                //#line 230 GJavaParser.g
                );
            break;
            }
            //
            // Rule 29:  TypeName ::= identifier
            //
            case 29:
                break;
            //
            // Rule 30:  TypeName ::= TypeName . identifier
            //
            case 30: {
                //#line 233 "GJavaParser.g"
                setResult(
                    //#line 233 GJavaParser.g
                    new TypeName(getLeftIToken(), getRightIToken(),
                                 //#line 233 GJavaParser.g
                                 (ITypeName)getRhsSym(1),
                                 //#line 233 GJavaParser.g
                                 new AstToken(getRhsIToken(2)),
                                 //#line 233 GJavaParser.g
                                 (identifier)getRhsSym(3))
                //#line 233 GJavaParser.g
                );
            break;
            }
            //
            // Rule 31:  ClassName ::= TypeName
            //
            case 31:
                break;
            //
            // Rule 32:  TypeVariable ::= identifier
            //
            case 32:
                break;
            //
            // Rule 33:  ArrayType ::= Type [ ]
            //
            case 33: {
                //#line 239 "GJavaParser.g"
                setResult(
                    //#line 239 GJavaParser.g
                    new ArrayType(getLeftIToken(), getRightIToken(),
                                  //#line 239 GJavaParser.g
                                  (IType)getRhsSym(1),
                                  //#line 239 GJavaParser.g
                                  new AstToken(getRhsIToken(2)),
                                  //#line 239 GJavaParser.g
                                  new AstToken(getRhsIToken(3)))
                //#line 239 GJavaParser.g
                );
            break;
            }
            //
            // Rule 34:  TypeParameter ::= TypeVariable TypeBoundopt
            //
            case 34: {
                //#line 241 "GJavaParser.g"
                setResult(
                    //#line 241 GJavaParser.g
                    new TypeParameter(getLeftIToken(), getRightIToken(),
                                      //#line 241 GJavaParser.g
                                      (identifier)getRhsSym(1),
                                      //#line 241 GJavaParser.g
                                      (TypeBound)getRhsSym(2))
                //#line 241 GJavaParser.g
                );
            break;
            }
            //
            // Rule 35:  TypeBound ::= extends ClassOrInterfaceType AdditionalBoundListopt
            //
            case 35: {
                //#line 243 "GJavaParser.g"
                setResult(
                    //#line 243 GJavaParser.g
                    new TypeBound(getLeftIToken(), getRightIToken(),
                                  //#line 243 GJavaParser.g
                                  new AstToken(getRhsIToken(1)),
                                  //#line 243 GJavaParser.g
                                  (ClassType)getRhsSym(2),
                                  //#line 243 GJavaParser.g
                                  (IAdditionalBoundListopt)getRhsSym(3))
                //#line 243 GJavaParser.g
                );
            break;
            }
            //
            // Rule 36:  AdditionalBoundList ::= AdditionalBound
            //
            case 36:
                break;
            //
            // Rule 37:  AdditionalBoundList ::= AdditionalBoundList AdditionalBound
            //
            case 37: {
                //#line 246 "GJavaParser.g"
                setResult(
                    //#line 246 GJavaParser.g
                    new AdditionalBoundList(getLeftIToken(), getRightIToken(),
                                            //#line 246 GJavaParser.g
                                            (IAdditionalBoundList)getRhsSym(1),
                                            //#line 246 GJavaParser.g
                                            (AdditionalBound)getRhsSym(2))
                //#line 246 GJavaParser.g
                );
            break;
            }
            //
            // Rule 38:  AdditionalBound ::= & InterfaceType
            //
            case 38: {
                //#line 248 "GJavaParser.g"
                setResult(
                    //#line 248 GJavaParser.g
                    new AdditionalBound(getLeftIToken(), getRightIToken(),
                                        //#line 248 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 248 GJavaParser.g
                                        (InterfaceType)getRhsSym(2))
                //#line 248 GJavaParser.g
                );
            break;
            }
            //
            // Rule 39:  TypeArguments ::= < ActualTypeArgumentList >
            //
            case 39: {
                //#line 250 "GJavaParser.g"
                setResult(
                    //#line 250 GJavaParser.g
                    new TypeArguments(getLeftIToken(), getRightIToken(),
                                      //#line 250 GJavaParser.g
                                      new AstToken(getRhsIToken(1)),
                                      //#line 250 GJavaParser.g
                                      (IActualTypeArgumentList)getRhsSym(2),
                                      //#line 250 GJavaParser.g
                                      new AstToken(getRhsIToken(3)))
                //#line 250 GJavaParser.g
                );
            break;
            }
            //
            // Rule 40:  ActualTypeArgumentList ::= ActualTypeArgument
            //
            case 40:
                break;
            //
            // Rule 41:  ActualTypeArgumentList ::= ActualTypeArgumentList , ActualTypeArgument
            //
            case 41: {
                //#line 253 "GJavaParser.g"
                setResult(
                    //#line 253 GJavaParser.g
                    new ActualTypeArgumentList(getLeftIToken(), getRightIToken(),
                                               //#line 253 GJavaParser.g
                                               (IActualTypeArgumentList)getRhsSym(1),
                                               //#line 253 GJavaParser.g
                                               new AstToken(getRhsIToken(2)),
                                               //#line 253 GJavaParser.g
                                               (IActualTypeArgument)getRhsSym(3))
                //#line 253 GJavaParser.g
                );
            break;
            }
            //
            // Rule 42:  ActualTypeArgument ::= ReferenceType
            //
            case 42:
                break;
            //
            // Rule 43:  ActualTypeArgument ::= Wildcard
            //
            case 43:
                break;
            //
            // Rule 44:  Wildcard ::= ? WildcardBoundsOpt
            //
            case 44: {
                //#line 258 "GJavaParser.g"
                setResult(
                    //#line 258 GJavaParser.g
                    new Wildcard(getLeftIToken(), getRightIToken(),
                                 //#line 258 GJavaParser.g
                                 new AstToken(getRhsIToken(1)),
                                 //#line 258 GJavaParser.g
                                 (IWildcardBoundsOpt)getRhsSym(2))
                //#line 258 GJavaParser.g
                );
            break;
            }
            //
            // Rule 45:  WildcardBounds ::= extends ReferenceType
            //
            case 45: {
                //#line 260 "GJavaParser.g"
                setResult(
                    //#line 260 GJavaParser.g
                    new WildcardBounds0(getLeftIToken(), getRightIToken(),
                                        //#line 260 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 260 GJavaParser.g
                                        (IReferenceType)getRhsSym(2))
                //#line 260 GJavaParser.g
                );
            break;
            }
            //
            // Rule 46:  WildcardBounds ::= super ReferenceType
            //
            case 46: {
                //#line 261 "GJavaParser.g"
                setResult(
                    //#line 261 GJavaParser.g
                    new WildcardBounds1(getLeftIToken(), getRightIToken(),
                                        //#line 261 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 261 GJavaParser.g
                                        (IReferenceType)getRhsSym(2))
                //#line 261 GJavaParser.g
                );
            break;
            }
            //
            // Rule 47:  PackageName ::= identifier
            //
            case 47:
                break;
            //
            // Rule 48:  PackageName ::= PackageName . identifier
            //
            case 48: {
                //#line 268 "GJavaParser.g"
                setResult(
                    //#line 268 GJavaParser.g
                    new PackageName(getLeftIToken(), getRightIToken(),
                                    //#line 268 GJavaParser.g
                                    (IPackageName)getRhsSym(1),
                                    //#line 268 GJavaParser.g
                                    new AstToken(getRhsIToken(2)),
                                    //#line 268 GJavaParser.g
                                    (identifier)getRhsSym(3))
                //#line 268 GJavaParser.g
                );
            break;
            }
            //
            // Rule 49:  ExpressionName ::= identifier
            //
            case 49:
                break;
            //
            // Rule 50:  ExpressionName ::= AmbiguousName . identifier
            //
            case 50: {
                //#line 277 "GJavaParser.g"
                setResult(
                    //#line 277 GJavaParser.g
                    new ExpressionName(getLeftIToken(), getRightIToken(),
                                       //#line 277 GJavaParser.g
                                       (IAmbiguousName)getRhsSym(1),
                                       //#line 277 GJavaParser.g
                                       new AstToken(getRhsIToken(2)),
                                       //#line 277 GJavaParser.g
                                       (identifier)getRhsSym(3))
                //#line 277 GJavaParser.g
                );
            break;
            }
            //
            // Rule 51:  MethodName ::= identifier
            //
            case 51:
                break;
            //
            // Rule 52:  MethodName ::= AmbiguousName . identifier
            //
            case 52: {
                //#line 280 "GJavaParser.g"
                setResult(
                    //#line 280 GJavaParser.g
                    new MethodName(getLeftIToken(), getRightIToken(),
                                   //#line 280 GJavaParser.g
                                   (IAmbiguousName)getRhsSym(1),
                                   //#line 280 GJavaParser.g
                                   new AstToken(getRhsIToken(2)),
                                   //#line 280 GJavaParser.g
                                   (identifier)getRhsSym(3))
                //#line 280 GJavaParser.g
                );
            break;
            }
            //
            // Rule 53:  PackageOrTypeName ::= identifier
            //
            case 53:
                break;
            //
            // Rule 54:  PackageOrTypeName ::= PackageOrTypeName . identifier
            //
            case 54: {
                //#line 283 "GJavaParser.g"
                setResult(
                    //#line 283 GJavaParser.g
                    new PackageOrTypeName(getLeftIToken(), getRightIToken(),
                                          //#line 283 GJavaParser.g
                                          (IPackageOrTypeName)getRhsSym(1),
                                          //#line 283 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 283 GJavaParser.g
                                          (identifier)getRhsSym(3))
                //#line 283 GJavaParser.g
                );
            break;
            }
            //
            // Rule 55:  AmbiguousName ::= identifier
            //
            case 55:
                break;
            //
            // Rule 56:  AmbiguousName ::= AmbiguousName . identifier
            //
            case 56: {
                //#line 286 "GJavaParser.g"
                setResult(
                    //#line 286 GJavaParser.g
                    new AmbiguousName(getLeftIToken(), getRightIToken(),
                                      //#line 286 GJavaParser.g
                                      (IAmbiguousName)getRhsSym(1),
                                      //#line 286 GJavaParser.g
                                      new AstToken(getRhsIToken(2)),
                                      //#line 286 GJavaParser.g
                                      (identifier)getRhsSym(3))
                //#line 286 GJavaParser.g
                );
            break;
            }
            //
            // Rule 57:  CompilationUnit ::= PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt
            //
            case 57: {
                //#line 290 "GJavaParser.g"
                setResult(
                    //#line 290 GJavaParser.g
                    new CompilationUnit(getLeftIToken(), getRightIToken(),
                                        //#line 290 GJavaParser.g
                                        (PackageDeclaration)getRhsSym(1),
                                        //#line 290 GJavaParser.g
                                        (IImportDeclarationsopt)getRhsSym(2),
                                        //#line 290 GJavaParser.g
                                        (ITypeDeclarationsopt)getRhsSym(3))
                //#line 290 GJavaParser.g
                );
            break;
            }
            //
            // Rule 58:  ImportDeclarations ::= ImportDeclaration
            //
            case 58:
                break;
            //
            // Rule 59:  ImportDeclarations ::= ImportDeclarations ImportDeclaration
            //
            case 59: {
                //#line 293 "GJavaParser.g"
                setResult(
                    //#line 293 GJavaParser.g
                    new ImportDeclarations(getLeftIToken(), getRightIToken(),
                                           //#line 293 GJavaParser.g
                                           (IImportDeclarations)getRhsSym(1),
                                           //#line 293 GJavaParser.g
                                           (IImportDeclaration)getRhsSym(2))
                //#line 293 GJavaParser.g
                );
            break;
            }
            //
            // Rule 60:  TypeDeclarations ::= TypeDeclaration
            //
            case 60:
                break;
            //
            // Rule 61:  TypeDeclarations ::= TypeDeclarations TypeDeclaration
            //
            case 61: {
                //#line 296 "GJavaParser.g"
                setResult(
                    //#line 296 GJavaParser.g
                    new TypeDeclarations(getLeftIToken(), getRightIToken(),
                                         //#line 296 GJavaParser.g
                                         (ITypeDeclarations)getRhsSym(1),
                                         //#line 296 GJavaParser.g
                                         (ITypeDeclaration)getRhsSym(2))
                //#line 296 GJavaParser.g
                );
            break;
            }
            //
            // Rule 62:  PackageDeclaration ::= Annotationsopt package PackageName ;
            //
            case 62: {
                //#line 298 "GJavaParser.g"
                setResult(
                    //#line 298 GJavaParser.g
                    new PackageDeclaration(getLeftIToken(), getRightIToken(),
                                           //#line 298 GJavaParser.g
                                           (IAnnotationsopt)getRhsSym(1),
                                           //#line 298 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 298 GJavaParser.g
                                           (IPackageName)getRhsSym(3),
                                           //#line 298 GJavaParser.g
                                           new AstToken(getRhsIToken(4)))
                //#line 298 GJavaParser.g
                );
            break;
            }
            //
            // Rule 63:  ImportDeclaration ::= SingleTypeImportDeclaration
            //
            case 63:
                break;
            //
            // Rule 64:  ImportDeclaration ::= TypeImportOnDemandDeclaration
            //
            case 64:
                break;
            //
            // Rule 65:  ImportDeclaration ::= SingleStaticImportDeclaration
            //
            case 65:
                break;
            //
            // Rule 66:  ImportDeclaration ::= StaticImportOnDemandDeclaration
            //
            case 66:
                break;
            //
            // Rule 67:  SingleTypeImportDeclaration ::= import TypeName ;
            //
            case 67: {
                //#line 305 "GJavaParser.g"
                setResult(
                    //#line 305 GJavaParser.g
                    new SingleTypeImportDeclaration(getLeftIToken(), getRightIToken(),
                                                    //#line 305 GJavaParser.g
                                                    new AstToken(getRhsIToken(1)),
                                                    //#line 305 GJavaParser.g
                                                    (ITypeName)getRhsSym(2),
                                                    //#line 305 GJavaParser.g
                                                    new AstToken(getRhsIToken(3)))
                //#line 305 GJavaParser.g
                );
            break;
            }
            //
            // Rule 68:  TypeImportOnDemandDeclaration ::= import PackageOrTypeName . * ;
            //
            case 68: {
                //#line 307 "GJavaParser.g"
                setResult(
                    //#line 307 GJavaParser.g
                    new TypeImportOnDemandDeclaration(getLeftIToken(), getRightIToken(),
                                                      //#line 307 GJavaParser.g
                                                      new AstToken(getRhsIToken(1)),
                                                      //#line 307 GJavaParser.g
                                                      (IPackageOrTypeName)getRhsSym(2),
                                                      //#line 307 GJavaParser.g
                                                      new AstToken(getRhsIToken(3)),
                                                      //#line 307 GJavaParser.g
                                                      new AstToken(getRhsIToken(4)),
                                                      //#line 307 GJavaParser.g
                                                      new AstToken(getRhsIToken(5)))
                //#line 307 GJavaParser.g
                );
            break;
            }
            //
            // Rule 69:  SingleStaticImportDeclaration ::= import static TypeName . identifier ;
            //
            case 69: {
                //#line 309 "GJavaParser.g"
                setResult(
                    //#line 309 GJavaParser.g
                    new SingleStaticImportDeclaration(getLeftIToken(), getRightIToken(),
                                                      //#line 309 GJavaParser.g
                                                      new AstToken(getRhsIToken(1)),
                                                      //#line 309 GJavaParser.g
                                                      new AstToken(getRhsIToken(2)),
                                                      //#line 309 GJavaParser.g
                                                      (ITypeName)getRhsSym(3),
                                                      //#line 309 GJavaParser.g
                                                      new AstToken(getRhsIToken(4)),
                                                      //#line 309 GJavaParser.g
                                                      (identifier)getRhsSym(5),
                                                      //#line 309 GJavaParser.g
                                                      new AstToken(getRhsIToken(6)))
                //#line 309 GJavaParser.g
                );
            break;
            }
            //
            // Rule 70:  StaticImportOnDemandDeclaration ::= import static TypeName . * ;
            //
            case 70: {
                //#line 311 "GJavaParser.g"
                setResult(
                    //#line 311 GJavaParser.g
                    new StaticImportOnDemandDeclaration(getLeftIToken(), getRightIToken(),
                                                        //#line 311 GJavaParser.g
                                                        new AstToken(getRhsIToken(1)),
                                                        //#line 311 GJavaParser.g
                                                        new AstToken(getRhsIToken(2)),
                                                        //#line 311 GJavaParser.g
                                                        (ITypeName)getRhsSym(3),
                                                        //#line 311 GJavaParser.g
                                                        new AstToken(getRhsIToken(4)),
                                                        //#line 311 GJavaParser.g
                                                        new AstToken(getRhsIToken(5)),
                                                        //#line 311 GJavaParser.g
                                                        new AstToken(getRhsIToken(6)))
                //#line 311 GJavaParser.g
                );
            break;
            }
            //
            // Rule 71:  TypeDeclaration ::= ClassDeclaration
            //
            case 71:
                break;
            //
            // Rule 72:  TypeDeclaration ::= InterfaceDeclaration
            //
            case 72:
                break;
            //
            // Rule 73:  TypeDeclaration ::= ;
            //
            case 73: {
                //#line 315 "GJavaParser.g"
                setResult(
                    //#line 315 GJavaParser.g
                    new TypeDeclaration(getRhsIToken(1))
                //#line 315 GJavaParser.g
                );
            break;
            }
            //
            // Rule 74:  ClassDeclaration ::= NormalClassDeclaration
            //
            case 74:
                break;
            //
            // Rule 75:  ClassDeclaration ::= EnumDeclaration
            //
            case 75:
                break;
            //
            // Rule 76:  NormalClassDeclaration ::= ClassModifiersopt class identifier TypeParametersopt Superopt Interfacesopt ClassBody
            //
            case 76: {
                //#line 322 "GJavaParser.g"
                setResult(
                    //#line 322 GJavaParser.g
                    new NormalClassDeclaration(getLeftIToken(), getRightIToken(),
                                               //#line 322 GJavaParser.g
                                               (IClassModifiersopt)getRhsSym(1),
                                               //#line 322 GJavaParser.g
                                               new AstToken(getRhsIToken(2)),
                                               //#line 322 GJavaParser.g
                                               (identifier)getRhsSym(3),
                                               //#line 322 GJavaParser.g
                                               (TypeParameters)getRhsSym(4),
                                               //#line 322 GJavaParser.g
                                               (Super)getRhsSym(5),
                                               //#line 322 GJavaParser.g
                                               (Interfaces)getRhsSym(6),
                                               //#line 322 GJavaParser.g
                                               (ClassBody)getRhsSym(7))
                //#line 322 GJavaParser.g
                );
            break;
            }
            //
            // Rule 77:  ClassModifiers ::= ClassModifier
            //
            case 77:
                break;
            //
            // Rule 78:  ClassModifiers ::= ClassModifiers ClassModifier
            //
            case 78: {
                //#line 325 "GJavaParser.g"
                setResult(
                    //#line 325 GJavaParser.g
                    new ClassModifiers(getLeftIToken(), getRightIToken(),
                                       //#line 325 GJavaParser.g
                                       (IClassModifiers)getRhsSym(1),
                                       //#line 325 GJavaParser.g
                                       (IClassModifier)getRhsSym(2))
                //#line 325 GJavaParser.g
                );
            break;
            }
            //
            // Rule 79:  ClassModifier ::= Annotation
            //
            case 79:
                break;
            //
            // Rule 80:  ClassModifier ::= public
            //
            case 80: {
                //#line 328 "GJavaParser.g"
                setResult(
                    //#line 328 GJavaParser.g
                    new ClassModifier0(getRhsIToken(1))
                //#line 328 GJavaParser.g
                );
            break;
            }
            //
            // Rule 81:  ClassModifier ::= protected
            //
            case 81: {
                //#line 329 "GJavaParser.g"
                setResult(
                    //#line 329 GJavaParser.g
                    new ClassModifier1(getRhsIToken(1))
                //#line 329 GJavaParser.g
                );
            break;
            }
            //
            // Rule 82:  ClassModifier ::= private
            //
            case 82: {
                //#line 330 "GJavaParser.g"
                setResult(
                    //#line 330 GJavaParser.g
                    new ClassModifier2(getRhsIToken(1))
                //#line 330 GJavaParser.g
                );
            break;
            }
            //
            // Rule 83:  ClassModifier ::= abstract
            //
            case 83: {
                //#line 331 "GJavaParser.g"
                setResult(
                    //#line 331 GJavaParser.g
                    new ClassModifier3(getRhsIToken(1))
                //#line 331 GJavaParser.g
                );
            break;
            }
            //
            // Rule 84:  ClassModifier ::= static
            //
            case 84: {
                //#line 332 "GJavaParser.g"
                setResult(
                    //#line 332 GJavaParser.g
                    new ClassModifier4(getRhsIToken(1))
                //#line 332 GJavaParser.g
                );
            break;
            }
            //
            // Rule 85:  ClassModifier ::= final
            //
            case 85: {
                //#line 333 "GJavaParser.g"
                setResult(
                    //#line 333 GJavaParser.g
                    new ClassModifier5(getRhsIToken(1))
                //#line 333 GJavaParser.g
                );
            break;
            }
            //
            // Rule 86:  ClassModifier ::= strictfp
            //
            case 86: {
                //#line 334 "GJavaParser.g"
                setResult(
                    //#line 334 GJavaParser.g
                    new ClassModifier6(getRhsIToken(1))
                //#line 334 GJavaParser.g
                );
            break;
            }
            //
            // Rule 87:  TypeParameters ::= < TypeParameterList >
            //
            case 87: {
                //#line 336 "GJavaParser.g"
                setResult(
                    //#line 336 GJavaParser.g
                    new TypeParameters(getLeftIToken(), getRightIToken(),
                                       //#line 336 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 336 GJavaParser.g
                                       (ITypeParameterList)getRhsSym(2),
                                       //#line 336 GJavaParser.g
                                       new AstToken(getRhsIToken(3)))
                //#line 336 GJavaParser.g
                );
            break;
            }
            //
            // Rule 88:  TypeParameterList ::= TypeParameter
            //
            case 88:
                break;
            //
            // Rule 89:  TypeParameterList ::= TypeParameterList , TypeParameter
            //
            case 89: {
                //#line 339 "GJavaParser.g"
                setResult(
                    //#line 339 GJavaParser.g
                    new TypeParameterList(getLeftIToken(), getRightIToken(),
                                          //#line 339 GJavaParser.g
                                          (ITypeParameterList)getRhsSym(1),
                                          //#line 339 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 339 GJavaParser.g
                                          (TypeParameter)getRhsSym(3))
                //#line 339 GJavaParser.g
                );
            break;
            }
            //
            // Rule 90:  Super ::= extends ClassType
            //
            case 90: {
                //#line 341 "GJavaParser.g"
                setResult(
                    //#line 341 GJavaParser.g
                    new Super(getLeftIToken(), getRightIToken(),
                              //#line 341 GJavaParser.g
                              new AstToken(getRhsIToken(1)),
                              //#line 341 GJavaParser.g
                              (ClassType)getRhsSym(2))
                //#line 341 GJavaParser.g
                );
            break;
            }
            //
            // Rule 91:  Interfaces ::= implements InterfaceTypeList
            //
            case 91: {
                //#line 348 "GJavaParser.g"
                setResult(
                    //#line 348 GJavaParser.g
                    new Interfaces(getLeftIToken(), getRightIToken(),
                                   //#line 348 GJavaParser.g
                                   new AstToken(getRhsIToken(1)),
                                   //#line 348 GJavaParser.g
                                   (IInterfaceTypeList)getRhsSym(2))
                //#line 348 GJavaParser.g
                );
            break;
            }
            //
            // Rule 92:  InterfaceTypeList ::= InterfaceType
            //
            case 92:
                break;
            //
            // Rule 93:  InterfaceTypeList ::= InterfaceTypeList , InterfaceType
            //
            case 93: {
                //#line 351 "GJavaParser.g"
                setResult(
                    //#line 351 GJavaParser.g
                    new InterfaceTypeList(getLeftIToken(), getRightIToken(),
                                          //#line 351 GJavaParser.g
                                          (IInterfaceTypeList)getRhsSym(1),
                                          //#line 351 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 351 GJavaParser.g
                                          (InterfaceType)getRhsSym(3))
                //#line 351 GJavaParser.g
                );
            break;
            }
            //
            // Rule 94:  ClassBody ::= { ClassBodyDeclarationsopt }
            //
            case 94: {
                //#line 358 "GJavaParser.g"
                setResult(
                    //#line 358 GJavaParser.g
                    new ClassBody(getLeftIToken(), getRightIToken(),
                                  //#line 358 GJavaParser.g
                                  new AstToken(getRhsIToken(1)),
                                  //#line 358 GJavaParser.g
                                  (IClassBodyDeclarationsopt)getRhsSym(2),
                                  //#line 358 GJavaParser.g
                                  new AstToken(getRhsIToken(3)))
                //#line 358 GJavaParser.g
                );
            break;
            }
            //
            // Rule 95:  ClassBodyDeclarations ::= ClassBodyDeclaration
            //
            case 95:
                break;
            //
            // Rule 96:  ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration
            //
            case 96: {
                //#line 361 "GJavaParser.g"
                setResult(
                    //#line 361 GJavaParser.g
                    new ClassBodyDeclarations(getLeftIToken(), getRightIToken(),
                                              //#line 361 GJavaParser.g
                                              (IClassBodyDeclarations)getRhsSym(1),
                                              //#line 361 GJavaParser.g
                                              (IClassBodyDeclaration)getRhsSym(2))
                //#line 361 GJavaParser.g
                );
            break;
            }
            //
            // Rule 97:  ClassBodyDeclaration ::= ClassMemberDeclaration
            //
            case 97:
                break;
            //
            // Rule 98:  ClassBodyDeclaration ::= InstanceInitializer
            //
            case 98:
                break;
            //
            // Rule 99:  ClassBodyDeclaration ::= StaticInitializer
            //
            case 99:
                break;
            //
            // Rule 100:  ClassBodyDeclaration ::= ConstructorDeclaration
            //
            case 100:
                break;
            //
            // Rule 101:  ClassMemberDeclaration ::= FieldDeclaration
            //
            case 101:
                break;
            //
            // Rule 102:  ClassMemberDeclaration ::= MethodDeclaration
            //
            case 102:
                break;
            //
            // Rule 103:  ClassMemberDeclaration ::= ClassDeclaration
            //
            case 103:
                break;
            //
            // Rule 104:  ClassMemberDeclaration ::= InterfaceDeclaration
            //
            case 104:
                break;
            //
            // Rule 105:  ClassMemberDeclaration ::= ;
            //
            case 105: {
                //#line 372 "GJavaParser.g"
                setResult(
                    //#line 372 GJavaParser.g
                    new ClassMemberDeclaration(getRhsIToken(1))
                //#line 372 GJavaParser.g
                );
            break;
            }
            //
            // Rule 106:  FieldDeclaration ::= FieldModifiersopt Type VariableDeclarators ;
            //
            case 106: {
                //#line 374 "GJavaParser.g"
                setResult(
                    //#line 374 GJavaParser.g
                    new FieldDeclaration(getLeftIToken(), getRightIToken(),
                                         //#line 374 GJavaParser.g
                                         (IFieldModifiersopt)getRhsSym(1),
                                         //#line 374 GJavaParser.g
                                         (IType)getRhsSym(2),
                                         //#line 374 GJavaParser.g
                                         (IVariableDeclarators)getRhsSym(3),
                                         //#line 374 GJavaParser.g
                                         new AstToken(getRhsIToken(4)))
                //#line 374 GJavaParser.g
                );
            break;
            }
            //
            // Rule 107:  VariableDeclarators ::= VariableDeclarator
            //
            case 107:
                break;
            //
            // Rule 108:  VariableDeclarators ::= VariableDeclarators , VariableDeclarator
            //
            case 108: {
                //#line 377 "GJavaParser.g"
                setResult(
                    //#line 377 GJavaParser.g
                    new VariableDeclarators(getLeftIToken(), getRightIToken(),
                                            //#line 377 GJavaParser.g
                                            (IVariableDeclarators)getRhsSym(1),
                                            //#line 377 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 377 GJavaParser.g
                                            (IVariableDeclarator)getRhsSym(3))
                //#line 377 GJavaParser.g
                );
            break;
            }
            //
            // Rule 109:  VariableDeclarator ::= VariableDeclaratorId
            //
            case 109:
                break;
            //
            // Rule 110:  VariableDeclarator ::= VariableDeclaratorId = VariableInitializer
            //
            case 110: {
                //#line 380 "GJavaParser.g"
                setResult(
                    //#line 380 GJavaParser.g
                    new VariableDeclarator(getLeftIToken(), getRightIToken(),
                                           //#line 380 GJavaParser.g
                                           (IVariableDeclaratorId)getRhsSym(1),
                                           //#line 380 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 380 GJavaParser.g
                                           (IVariableInitializer)getRhsSym(3))
                //#line 380 GJavaParser.g
                );
            break;
            }
            //
            // Rule 111:  VariableDeclaratorId ::= identifier
            //
            case 111:
                break;
            //
            // Rule 112:  VariableDeclaratorId ::= VariableDeclaratorId [ ]
            //
            case 112: {
                //#line 383 "GJavaParser.g"
                setResult(
                    //#line 383 GJavaParser.g
                    new VariableDeclaratorId(getLeftIToken(), getRightIToken(),
                                             //#line 383 GJavaParser.g
                                             (IVariableDeclaratorId)getRhsSym(1),
                                             //#line 383 GJavaParser.g
                                             new AstToken(getRhsIToken(2)),
                                             //#line 383 GJavaParser.g
                                             new AstToken(getRhsIToken(3)))
                //#line 383 GJavaParser.g
                );
            break;
            }
            //
            // Rule 113:  VariableInitializer ::= Expression
            //
            case 113:
                break;
            //
            // Rule 114:  VariableInitializer ::= ArrayInitializer
            //
            case 114:
                break;
            //
            // Rule 115:  FieldModifiers ::= FieldModifier
            //
            case 115:
                break;
            //
            // Rule 116:  FieldModifiers ::= FieldModifiers FieldModifier
            //
            case 116: {
                //#line 389 "GJavaParser.g"
                setResult(
                    //#line 389 GJavaParser.g
                    new FieldModifiers(getLeftIToken(), getRightIToken(),
                                       //#line 389 GJavaParser.g
                                       (IFieldModifiers)getRhsSym(1),
                                       //#line 389 GJavaParser.g
                                       (IFieldModifier)getRhsSym(2))
                //#line 389 GJavaParser.g
                );
            break;
            }
            //
            // Rule 117:  FieldModifier ::= Annotation
            //
            case 117:
                break;
            //
            // Rule 118:  FieldModifier ::= public
            //
            case 118: {
                //#line 392 "GJavaParser.g"
                setResult(
                    //#line 392 GJavaParser.g
                    new FieldModifier0(getRhsIToken(1))
                //#line 392 GJavaParser.g
                );
            break;
            }
            //
            // Rule 119:  FieldModifier ::= protected
            //
            case 119: {
                //#line 393 "GJavaParser.g"
                setResult(
                    //#line 393 GJavaParser.g
                    new FieldModifier1(getRhsIToken(1))
                //#line 393 GJavaParser.g
                );
            break;
            }
            //
            // Rule 120:  FieldModifier ::= private
            //
            case 120: {
                //#line 394 "GJavaParser.g"
                setResult(
                    //#line 394 GJavaParser.g
                    new FieldModifier2(getRhsIToken(1))
                //#line 394 GJavaParser.g
                );
            break;
            }
            //
            // Rule 121:  FieldModifier ::= static
            //
            case 121: {
                //#line 395 "GJavaParser.g"
                setResult(
                    //#line 395 GJavaParser.g
                    new FieldModifier3(getRhsIToken(1))
                //#line 395 GJavaParser.g
                );
            break;
            }
            //
            // Rule 122:  FieldModifier ::= final
            //
            case 122: {
                //#line 396 "GJavaParser.g"
                setResult(
                    //#line 396 GJavaParser.g
                    new FieldModifier4(getRhsIToken(1))
                //#line 396 GJavaParser.g
                );
            break;
            }
            //
            // Rule 123:  FieldModifier ::= transient
            //
            case 123: {
                //#line 397 "GJavaParser.g"
                setResult(
                    //#line 397 GJavaParser.g
                    new FieldModifier5(getRhsIToken(1))
                //#line 397 GJavaParser.g
                );
            break;
            }
            //
            // Rule 124:  FieldModifier ::= volatile
            //
            case 124: {
                //#line 398 "GJavaParser.g"
                setResult(
                    //#line 398 GJavaParser.g
                    new FieldModifier6(getRhsIToken(1))
                //#line 398 GJavaParser.g
                );
            break;
            }
            //
            // Rule 125:  MethodDeclaration ::= MethodHeader MethodBody
            //
            case 125: {
                //#line 400 "GJavaParser.g"
                setResult(
                    //#line 400 GJavaParser.g
                    new MethodDeclaration(getLeftIToken(), getRightIToken(),
                                          //#line 400 GJavaParser.g
                                          (MethodHeader)getRhsSym(1),
                                          //#line 400 GJavaParser.g
                                          (IMethodBody)getRhsSym(2))
                //#line 400 GJavaParser.g
                );
            break;
            }
            //
            // Rule 126:  MethodHeader ::= MethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt
            //
            case 126: {
                //#line 402 "GJavaParser.g"
                setResult(
                    //#line 402 GJavaParser.g
                    new MethodHeader(getLeftIToken(), getRightIToken(),
                                     //#line 402 GJavaParser.g
                                     (IMethodModifiersopt)getRhsSym(1),
                                     //#line 402 GJavaParser.g
                                     (TypeParameters)getRhsSym(2),
                                     //#line 402 GJavaParser.g
                                     (IResultType)getRhsSym(3),
                                     //#line 402 GJavaParser.g
                                     (IMethodDeclarator)getRhsSym(4),
                                     //#line 402 GJavaParser.g
                                     (Throws)getRhsSym(5))
                //#line 402 GJavaParser.g
                );
            break;
            }
            //
            // Rule 127:  ResultType ::= Type
            //
            case 127:
                break;
            //
            // Rule 128:  ResultType ::= void
            //
            case 128: {
                //#line 405 "GJavaParser.g"
                setResult(
                    //#line 405 GJavaParser.g
                    new ResultType(getRhsIToken(1))
                //#line 405 GJavaParser.g
                );
            break;
            }
            //
            // Rule 129:  MethodDeclarator ::= identifier ( FormalParameterListopt )
            //
            case 129: {
                //#line 407 "GJavaParser.g"
                setResult(
                    //#line 407 GJavaParser.g
                    new MethodDeclarator0(getLeftIToken(), getRightIToken(),
                                          //#line 407 GJavaParser.g
                                          (identifier)getRhsSym(1),
                                          //#line 407 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 407 GJavaParser.g
                                          (IFormalParameterListopt)getRhsSym(3),
                                          //#line 407 GJavaParser.g
                                          new AstToken(getRhsIToken(4)))
                //#line 407 GJavaParser.g
                );
            break;
            }
            //
            // Rule 130:  MethodDeclarator ::= MethodDeclarator [ ]
            //
            case 130: {
                //#line 409 "GJavaParser.g"
                setResult(
                    //#line 409 GJavaParser.g
                    new MethodDeclarator1(getLeftIToken(), getRightIToken(),
                                          //#line 409 GJavaParser.g
                                          (IMethodDeclarator)getRhsSym(1),
                                          //#line 409 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 409 GJavaParser.g
                                          new AstToken(getRhsIToken(3)))
                //#line 409 GJavaParser.g
                );
            break;
            }
            //
            // Rule 131:  FormalParameterList ::= LastFormalParameter
            //
            case 131:
                break;
            //
            // Rule 132:  FormalParameterList ::= FormalParameters , LastFormalParameter
            //
            case 132: {
                //#line 412 "GJavaParser.g"
                setResult(
                    //#line 412 GJavaParser.g
                    new FormalParameterList(getLeftIToken(), getRightIToken(),
                                            //#line 412 GJavaParser.g
                                            (IFormalParameters)getRhsSym(1),
                                            //#line 412 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 412 GJavaParser.g
                                            (LastFormalParameter)getRhsSym(3))
                //#line 412 GJavaParser.g
                );
            break;
            }
            //
            // Rule 133:  FormalParameters ::= FormalParameter
            //
            case 133:
                break;
            //
            // Rule 134:  FormalParameters ::= FormalParameters , FormalParameter
            //
            case 134: {
                //#line 415 "GJavaParser.g"
                setResult(
                    //#line 415 GJavaParser.g
                    new FormalParameters(getLeftIToken(), getRightIToken(),
                                         //#line 415 GJavaParser.g
                                         (IFormalParameters)getRhsSym(1),
                                         //#line 415 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 415 GJavaParser.g
                                         (FormalParameter)getRhsSym(3))
                //#line 415 GJavaParser.g
                );
            break;
            }
            //
            // Rule 135:  FormalParameter ::= VariableModifiersopt Type VariableDeclaratorId
            //
            case 135: {
                //#line 417 "GJavaParser.g"
                setResult(
                    //#line 417 GJavaParser.g
                    new FormalParameter(getLeftIToken(), getRightIToken(),
                                        //#line 417 GJavaParser.g
                                        (IVariableModifiersopt)getRhsSym(1),
                                        //#line 417 GJavaParser.g
                                        (IType)getRhsSym(2),
                                        //#line 417 GJavaParser.g
                                        (IVariableDeclaratorId)getRhsSym(3))
                //#line 417 GJavaParser.g
                );
            break;
            }
            //
            // Rule 136:  VariableModifiers ::= VariableModifier
            //
            case 136:
                break;
            //
            // Rule 137:  VariableModifiers ::= VariableModifiers VariableModifier
            //
            case 137: {
                //#line 420 "GJavaParser.g"
                setResult(
                    //#line 420 GJavaParser.g
                    new VariableModifiers(getLeftIToken(), getRightIToken(),
                                          //#line 420 GJavaParser.g
                                          (IVariableModifiers)getRhsSym(1),
                                          //#line 420 GJavaParser.g
                                          (IVariableModifier)getRhsSym(2))
                //#line 420 GJavaParser.g
                );
            break;
            }
            //
            // Rule 138:  VariableModifier ::= final
            //
            case 138: {
                //#line 422 "GJavaParser.g"
                setResult(
                    //#line 422 GJavaParser.g
                    new VariableModifier(getRhsIToken(1))
                //#line 422 GJavaParser.g
                );
            break;
            }
            //
            // Rule 139:  VariableModifier ::= Annotations
            //
            case 139:
                break;
            //
            // Rule 140:  LastFormalParameter ::= VariableModifiersopt Type ...opt VariableDeclaratorId
            //
            case 140: {
                //#line 425 "GJavaParser.g"
                setResult(
                    //#line 425 GJavaParser.g
                    new LastFormalParameter(getLeftIToken(), getRightIToken(),
                                            //#line 425 GJavaParser.g
                                            (IVariableModifiersopt)getRhsSym(1),
                                            //#line 425 GJavaParser.g
                                            (IType)getRhsSym(2),
                                            //#line 425 GJavaParser.g
                                            (Ellipsisopt)getRhsSym(3),
                                            //#line 425 GJavaParser.g
                                            (IVariableDeclaratorId)getRhsSym(4))
                //#line 425 GJavaParser.g
                );
            break;
            }
            //
            // Rule 141:  MethodModifiers ::= MethodModifier
            //
            case 141:
                break;
            //
            // Rule 142:  MethodModifiers ::= MethodModifiers MethodModifier
            //
            case 142: {
                //#line 434 "GJavaParser.g"
                setResult(
                    //#line 434 GJavaParser.g
                    new MethodModifiers(getLeftIToken(), getRightIToken(),
                                        //#line 434 GJavaParser.g
                                        (IMethodModifiers)getRhsSym(1),
                                        //#line 434 GJavaParser.g
                                        (IMethodModifier)getRhsSym(2))
                //#line 434 GJavaParser.g
                );
            break;
            }
            //
            // Rule 143:  MethodModifier ::= Annotations
            //
            case 143:
                break;
            //
            // Rule 144:  MethodModifier ::= public
            //
            case 144: {
                //#line 437 "GJavaParser.g"
                setResult(
                    //#line 437 GJavaParser.g
                    new MethodModifier0(getRhsIToken(1))
                //#line 437 GJavaParser.g
                );
            break;
            }
            //
            // Rule 145:  MethodModifier ::= protected
            //
            case 145: {
                //#line 438 "GJavaParser.g"
                setResult(
                    //#line 438 GJavaParser.g
                    new MethodModifier1(getRhsIToken(1))
                //#line 438 GJavaParser.g
                );
            break;
            }
            //
            // Rule 146:  MethodModifier ::= private
            //
            case 146: {
                //#line 439 "GJavaParser.g"
                setResult(
                    //#line 439 GJavaParser.g
                    new MethodModifier2(getRhsIToken(1))
                //#line 439 GJavaParser.g
                );
            break;
            }
            //
            // Rule 147:  MethodModifier ::= abstract
            //
            case 147: {
                //#line 440 "GJavaParser.g"
                setResult(
                    //#line 440 GJavaParser.g
                    new MethodModifier3(getRhsIToken(1))
                //#line 440 GJavaParser.g
                );
            break;
            }
            //
            // Rule 148:  MethodModifier ::= static
            //
            case 148: {
                //#line 441 "GJavaParser.g"
                setResult(
                    //#line 441 GJavaParser.g
                    new MethodModifier4(getRhsIToken(1))
                //#line 441 GJavaParser.g
                );
            break;
            }
            //
            // Rule 149:  MethodModifier ::= final
            //
            case 149: {
                //#line 442 "GJavaParser.g"
                setResult(
                    //#line 442 GJavaParser.g
                    new MethodModifier5(getRhsIToken(1))
                //#line 442 GJavaParser.g
                );
            break;
            }
            //
            // Rule 150:  MethodModifier ::= synchronized
            //
            case 150: {
                //#line 443 "GJavaParser.g"
                setResult(
                    //#line 443 GJavaParser.g
                    new MethodModifier6(getRhsIToken(1))
                //#line 443 GJavaParser.g
                );
            break;
            }
            //
            // Rule 151:  MethodModifier ::= native
            //
            case 151: {
                //#line 444 "GJavaParser.g"
                setResult(
                    //#line 444 GJavaParser.g
                    new MethodModifier7(getRhsIToken(1))
                //#line 444 GJavaParser.g
                );
            break;
            }
            //
            // Rule 152:  MethodModifier ::= strictfp
            //
            case 152: {
                //#line 445 "GJavaParser.g"
                setResult(
                    //#line 445 GJavaParser.g
                    new MethodModifier8(getRhsIToken(1))
                //#line 445 GJavaParser.g
                );
            break;
            }
            //
            // Rule 153:  Throws ::= throws ExceptionTypeList
            //
            case 153: {
                //#line 447 "GJavaParser.g"
                setResult(
                    //#line 447 GJavaParser.g
                    new Throws(getLeftIToken(), getRightIToken(),
                               //#line 447 GJavaParser.g
                               new AstToken(getRhsIToken(1)),
                               //#line 447 GJavaParser.g
                               (IExceptionTypeList)getRhsSym(2))
                //#line 447 GJavaParser.g
                );
            break;
            }
            //
            // Rule 154:  ExceptionTypeList ::= ExceptionType
            //
            case 154:
                break;
            //
            // Rule 155:  ExceptionTypeList ::= ExceptionTypeList , ExceptionType
            //
            case 155: {
                //#line 450 "GJavaParser.g"
                setResult(
                    //#line 450 GJavaParser.g
                    new ExceptionTypeList(getLeftIToken(), getRightIToken(),
                                          //#line 450 GJavaParser.g
                                          (IExceptionTypeList)getRhsSym(1),
                                          //#line 450 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 450 GJavaParser.g
                                          (IExceptionType)getRhsSym(3))
                //#line 450 GJavaParser.g
                );
            break;
            }
            //
            // Rule 156:  ExceptionType ::= ClassType
            //
            case 156:
                break;
            //
            // Rule 157:  ExceptionType ::= TypeVariable
            //
            case 157:
                break;
            //
            // Rule 158:  MethodBody ::= Block
            //
            case 158:
                break;
            //
            // Rule 159:  MethodBody ::= ;
            //
            case 159: {
                //#line 456 "GJavaParser.g"
                setResult(
                    //#line 456 GJavaParser.g
                    new MethodBody(getRhsIToken(1))
                //#line 456 GJavaParser.g
                );
            break;
            }
            //
            // Rule 160:  InstanceInitializer ::= Block
            //
            case 160:
                break;
            //
            // Rule 161:  StaticInitializer ::= static Block
            //
            case 161: {
                //#line 460 "GJavaParser.g"
                setResult(
                    //#line 460 GJavaParser.g
                    new StaticInitializer(getLeftIToken(), getRightIToken(),
                                          //#line 460 GJavaParser.g
                                          new AstToken(getRhsIToken(1)),
                                          //#line 460 GJavaParser.g
                                          (Block)getRhsSym(2))
                //#line 460 GJavaParser.g
                );
            break;
            }
            //
            // Rule 162:  ConstructorDeclaration ::= ConstructorModifiersopt ConstructorDeclarator Throwsopt ConstructorBody
            //
            case 162: {
                //#line 462 "GJavaParser.g"
                setResult(
                    //#line 462 GJavaParser.g
                    new ConstructorDeclaration(getLeftIToken(), getRightIToken(),
                                               //#line 462 GJavaParser.g
                                               (IConstructorModifiersopt)getRhsSym(1),
                                               //#line 462 GJavaParser.g
                                               (ConstructorDeclarator)getRhsSym(2),
                                               //#line 462 GJavaParser.g
                                               (Throws)getRhsSym(3),
                                               //#line 462 GJavaParser.g
                                               (ConstructorBody)getRhsSym(4))
                //#line 462 GJavaParser.g
                );
            break;
            }
            //
            // Rule 163:  ConstructorDeclarator ::= TypeParametersopt SimpleTypeName ( FormalParameterListopt )
            //
            case 163: {
                //#line 464 "GJavaParser.g"
                setResult(
                    //#line 464 GJavaParser.g
                    new ConstructorDeclarator(getLeftIToken(), getRightIToken(),
                                              //#line 464 GJavaParser.g
                                              (TypeParameters)getRhsSym(1),
                                              //#line 464 GJavaParser.g
                                              (identifier)getRhsSym(2),
                                              //#line 464 GJavaParser.g
                                              new AstToken(getRhsIToken(3)),
                                              //#line 464 GJavaParser.g
                                              (IFormalParameterListopt)getRhsSym(4),
                                              //#line 464 GJavaParser.g
                                              new AstToken(getRhsIToken(5)))
                //#line 464 GJavaParser.g
                );
            break;
            }
            //
            // Rule 164:  SimpleTypeName ::= identifier
            //
            case 164:
                break;
            //
            // Rule 165:  ConstructorModifiers ::= ConstructorModifier
            //
            case 165:
                break;
            //
            // Rule 166:  ConstructorModifiers ::= ConstructorModifiers ConstructorModifier
            //
            case 166: {
                //#line 469 "GJavaParser.g"
                setResult(
                    //#line 469 GJavaParser.g
                    new ConstructorModifiers(getLeftIToken(), getRightIToken(),
                                             //#line 469 GJavaParser.g
                                             (IConstructorModifiers)getRhsSym(1),
                                             //#line 469 GJavaParser.g
                                             (IConstructorModifier)getRhsSym(2))
                //#line 469 GJavaParser.g
                );
            break;
            }
            //
            // Rule 167:  ConstructorModifier ::= Annotations
            //
            case 167:
                break;
            //
            // Rule 168:  ConstructorModifier ::= public
            //
            case 168: {
                //#line 472 "GJavaParser.g"
                setResult(
                    //#line 472 GJavaParser.g
                    new ConstructorModifier0(getRhsIToken(1))
                //#line 472 GJavaParser.g
                );
            break;
            }
            //
            // Rule 169:  ConstructorModifier ::= protected
            //
            case 169: {
                //#line 473 "GJavaParser.g"
                setResult(
                    //#line 473 GJavaParser.g
                    new ConstructorModifier1(getRhsIToken(1))
                //#line 473 GJavaParser.g
                );
            break;
            }
            //
            // Rule 170:  ConstructorModifier ::= private
            //
            case 170: {
                //#line 474 "GJavaParser.g"
                setResult(
                    //#line 474 GJavaParser.g
                    new ConstructorModifier2(getRhsIToken(1))
                //#line 474 GJavaParser.g
                );
            break;
            }
            //
            // Rule 171:  ConstructorBody ::= { ExplicitConstructorInvocationopt BlockStatementsopt }
            //
            case 171: {
                //#line 476 "GJavaParser.g"
                setResult(
                    //#line 476 GJavaParser.g
                    new ConstructorBody(getLeftIToken(), getRightIToken(),
                                        //#line 476 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 476 GJavaParser.g
                                        (IExplicitConstructorInvocationopt)getRhsSym(2),
                                        //#line 476 GJavaParser.g
                                        (IBlockStatementsopt)getRhsSym(3),
                                        //#line 476 GJavaParser.g
                                        new AstToken(getRhsIToken(4)))
                //#line 476 GJavaParser.g
                );
            break;
            }
            //
            // Rule 172:  ExplicitConstructorInvocation ::= TypeArgumentsopt this ( ArgumentListopt ) ;
            //
            case 172: {
                //#line 478 "GJavaParser.g"
                setResult(
                    //#line 478 GJavaParser.g
                    new ExplicitConstructorInvocation0(getLeftIToken(), getRightIToken(),
                                                       //#line 478 GJavaParser.g
                                                       (TypeArguments)getRhsSym(1),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(getRhsIToken(2)),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(getRhsIToken(3)),
                                                       //#line 478 GJavaParser.g
                                                       (IArgumentListopt)getRhsSym(4),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(getRhsIToken(5)),
                                                       //#line 478 GJavaParser.g
                                                       new AstToken(getRhsIToken(6)))
                //#line 478 GJavaParser.g
                );
            break;
            }
            //
            // Rule 173:  ExplicitConstructorInvocation ::= TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 173: {
                //#line 479 "GJavaParser.g"
                setResult(
                    //#line 479 GJavaParser.g
                    new ExplicitConstructorInvocation1(getLeftIToken(), getRightIToken(),
                                                       //#line 479 GJavaParser.g
                                                       (TypeArguments)getRhsSym(1),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(getRhsIToken(2)),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(getRhsIToken(3)),
                                                       //#line 479 GJavaParser.g
                                                       (IArgumentListopt)getRhsSym(4),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(getRhsIToken(5)),
                                                       //#line 479 GJavaParser.g
                                                       new AstToken(getRhsIToken(6)))
                //#line 479 GJavaParser.g
                );
            break;
            }
            //
            // Rule 174:  ExplicitConstructorInvocation ::= Primary . TypeArgumentsopt super ( ArgumentListopt ) ;
            //
            case 174: {
                //#line 480 "GJavaParser.g"
                setResult(
                    //#line 480 GJavaParser.g
                    new ExplicitConstructorInvocation2(getLeftIToken(), getRightIToken(),
                                                       //#line 480 GJavaParser.g
                                                       (IPrimary)getRhsSym(1),
                                                       //#line 480 GJavaParser.g
                                                       new AstToken(getRhsIToken(2)),
                                                       //#line 480 GJavaParser.g
                                                       (TypeArguments)getRhsSym(3),
                                                       //#line 480 GJavaParser.g
                                                       new AstToken(getRhsIToken(4)),
                                                       //#line 480 GJavaParser.g
                                                       new AstToken(getRhsIToken(5)),
                                                       //#line 480 GJavaParser.g
                                                       (IArgumentListopt)getRhsSym(6),
                                                       //#line 480 GJavaParser.g
                                                       new AstToken(getRhsIToken(7)),
                                                       //#line 480 GJavaParser.g
                                                       new AstToken(getRhsIToken(8)))
                //#line 480 GJavaParser.g
                );
            break;
            }
            //
            // Rule 175:  EnumDeclaration ::= ClassModifiersopt enum identifier Interfacesopt EnumBody
            //
            case 175: {
                //#line 482 "GJavaParser.g"
                setResult(
                    //#line 482 GJavaParser.g
                    new EnumDeclaration(getLeftIToken(), getRightIToken(),
                                        //#line 482 GJavaParser.g
                                        (IClassModifiersopt)getRhsSym(1),
                                        //#line 482 GJavaParser.g
                                        new AstToken(getRhsIToken(2)),
                                        //#line 482 GJavaParser.g
                                        (identifier)getRhsSym(3),
                                        //#line 482 GJavaParser.g
                                        (Interfaces)getRhsSym(4),
                                        //#line 482 GJavaParser.g
                                        (EnumBody)getRhsSym(5))
                //#line 482 GJavaParser.g
                );
            break;
            }
            //
            // Rule 176:  EnumBody ::= { EnumConstantsopt ,opt EnumBodyDeclarationsopt }
            //
            case 176: {
                //#line 484 "GJavaParser.g"
                setResult(
                    //#line 484 GJavaParser.g
                    new EnumBody(getLeftIToken(), getRightIToken(),
                                 //#line 484 GJavaParser.g
                                 new AstToken(getRhsIToken(1)),
                                 //#line 484 GJavaParser.g
                                 (IEnumConstantsopt)getRhsSym(2),
                                 //#line 484 GJavaParser.g
                                 (Commaopt)getRhsSym(3),
                                 //#line 484 GJavaParser.g
                                 (EnumBodyDeclarations)getRhsSym(4),
                                 //#line 484 GJavaParser.g
                                 new AstToken(getRhsIToken(5)))
                //#line 484 GJavaParser.g
                );
            break;
            }
            //
            // Rule 177:  EnumConstants ::= EnumConstant
            //
            case 177:
                break;
            //
            // Rule 178:  EnumConstants ::= EnumConstants , EnumConstant
            //
            case 178: {
                //#line 487 "GJavaParser.g"
                setResult(
                    //#line 487 GJavaParser.g
                    new EnumConstants(getLeftIToken(), getRightIToken(),
                                      //#line 487 GJavaParser.g
                                      (IEnumConstants)getRhsSym(1),
                                      //#line 487 GJavaParser.g
                                      new AstToken(getRhsIToken(2)),
                                      //#line 487 GJavaParser.g
                                      (IEnumConstant)getRhsSym(3))
                //#line 487 GJavaParser.g
                );
            break;
            }
            //
            // Rule 179:  EnumConstant ::= Annotationsopt identifier Argumentsopt ClassBodyopt
            //
            case 179: {
                //#line 489 "GJavaParser.g"
                setResult(
                    //#line 489 GJavaParser.g
                    new EnumConstant(getLeftIToken(), getRightIToken(),
                                     //#line 489 GJavaParser.g
                                     (IAnnotationsopt)getRhsSym(1),
                                     //#line 489 GJavaParser.g
                                     (identifier)getRhsSym(2),
                                     //#line 489 GJavaParser.g
                                     (Arguments)getRhsSym(3),
                                     //#line 489 GJavaParser.g
                                     (ClassBody)getRhsSym(4))
                //#line 489 GJavaParser.g
                );
            break;
            }
            //
            // Rule 180:  Arguments ::= ( ArgumentListopt )
            //
            case 180: {
                //#line 491 "GJavaParser.g"
                setResult(
                    //#line 491 GJavaParser.g
                    new Arguments(getLeftIToken(), getRightIToken(),
                                  //#line 491 GJavaParser.g
                                  new AstToken(getRhsIToken(1)),
                                  //#line 491 GJavaParser.g
                                  (IArgumentListopt)getRhsSym(2),
                                  //#line 491 GJavaParser.g
                                  new AstToken(getRhsIToken(3)))
                //#line 491 GJavaParser.g
                );
            break;
            }
            //
            // Rule 181:  EnumBodyDeclarations ::= ; ClassBodyDeclarationsopt
            //
            case 181: {
                //#line 493 "GJavaParser.g"
                setResult(
                    //#line 493 GJavaParser.g
                    new EnumBodyDeclarations(getLeftIToken(), getRightIToken(),
                                             //#line 493 GJavaParser.g
                                             new AstToken(getRhsIToken(1)),
                                             //#line 493 GJavaParser.g
                                             (IClassBodyDeclarationsopt)getRhsSym(2))
                //#line 493 GJavaParser.g
                );
            break;
            }
            //
            // Rule 182:  InterfaceDeclaration ::= NormalInterfaceDeclaration
            //
            case 182:
                break;
            //
            // Rule 183:  InterfaceDeclaration ::= AnnotationTypeDeclaration
            //
            case 183:
                break;
            //
            // Rule 184:  NormalInterfaceDeclaration ::= InterfaceModifiersopt interface identifier TypeParametersopt ExtendsInterfacesopt InterfaceBody
            //
            case 184: {
                //#line 500 "GJavaParser.g"
                setResult(
                    //#line 500 GJavaParser.g
                    new NormalInterfaceDeclaration(getLeftIToken(), getRightIToken(),
                                                   //#line 500 GJavaParser.g
                                                   (IInterfaceModifiersopt)getRhsSym(1),
                                                   //#line 500 GJavaParser.g
                                                   new AstToken(getRhsIToken(2)),
                                                   //#line 500 GJavaParser.g
                                                   (identifier)getRhsSym(3),
                                                   //#line 500 GJavaParser.g
                                                   (TypeParameters)getRhsSym(4),
                                                   //#line 500 GJavaParser.g
                                                   (IExtendsInterfacesopt)getRhsSym(5),
                                                   //#line 500 GJavaParser.g
                                                   (InterfaceBody)getRhsSym(6))
                //#line 500 GJavaParser.g
                );
            break;
            }
            //
            // Rule 185:  InterfaceModifiers ::= InterfaceModifier
            //
            case 185:
                break;
            //
            // Rule 186:  InterfaceModifiers ::= InterfaceModifiers InterfaceModifier
            //
            case 186: {
                //#line 503 "GJavaParser.g"
                setResult(
                    //#line 503 GJavaParser.g
                    new InterfaceModifiers(getLeftIToken(), getRightIToken(),
                                           //#line 503 GJavaParser.g
                                           (IInterfaceModifiers)getRhsSym(1),
                                           //#line 503 GJavaParser.g
                                           (IInterfaceModifier)getRhsSym(2))
                //#line 503 GJavaParser.g
                );
            break;
            }
            //
            // Rule 187:  InterfaceModifier ::= Annotation
            //
            case 187:
                break;
            //
            // Rule 188:  InterfaceModifier ::= public
            //
            case 188: {
                //#line 506 "GJavaParser.g"
                setResult(
                    //#line 506 GJavaParser.g
                    new InterfaceModifier0(getRhsIToken(1))
                //#line 506 GJavaParser.g
                );
            break;
            }
            //
            // Rule 189:  InterfaceModifier ::= protected
            //
            case 189: {
                //#line 507 "GJavaParser.g"
                setResult(
                    //#line 507 GJavaParser.g
                    new InterfaceModifier1(getRhsIToken(1))
                //#line 507 GJavaParser.g
                );
            break;
            }
            //
            // Rule 190:  InterfaceModifier ::= private
            //
            case 190: {
                //#line 508 "GJavaParser.g"
                setResult(
                    //#line 508 GJavaParser.g
                    new InterfaceModifier2(getRhsIToken(1))
                //#line 508 GJavaParser.g
                );
            break;
            }
            //
            // Rule 191:  InterfaceModifier ::= abstract
            //
            case 191: {
                //#line 509 "GJavaParser.g"
                setResult(
                    //#line 509 GJavaParser.g
                    new InterfaceModifier3(getRhsIToken(1))
                //#line 509 GJavaParser.g
                );
            break;
            }
            //
            // Rule 192:  InterfaceModifier ::= static
            //
            case 192: {
                //#line 510 "GJavaParser.g"
                setResult(
                    //#line 510 GJavaParser.g
                    new InterfaceModifier4(getRhsIToken(1))
                //#line 510 GJavaParser.g
                );
            break;
            }
            //
            // Rule 193:  InterfaceModifier ::= strictfp
            //
            case 193: {
                //#line 511 "GJavaParser.g"
                setResult(
                    //#line 511 GJavaParser.g
                    new InterfaceModifier5(getRhsIToken(1))
                //#line 511 GJavaParser.g
                );
            break;
            }
            //
            // Rule 194:  ExtendsInterfaces ::= extends InterfaceType
            //
            case 194: {
                //#line 513 "GJavaParser.g"
                setResult(
                    //#line 513 GJavaParser.g
                    new ExtendsInterfaces0(getLeftIToken(), getRightIToken(),
                                           //#line 513 GJavaParser.g
                                           new AstToken(getRhsIToken(1)),
                                           //#line 513 GJavaParser.g
                                           (InterfaceType)getRhsSym(2))
                //#line 513 GJavaParser.g
                );
            break;
            }
            //
            // Rule 195:  ExtendsInterfaces ::= ExtendsInterfaces , InterfaceType
            //
            case 195: {
                //#line 514 "GJavaParser.g"
                setResult(
                    //#line 514 GJavaParser.g
                    new ExtendsInterfaces1(getLeftIToken(), getRightIToken(),
                                           //#line 514 GJavaParser.g
                                           (IExtendsInterfaces)getRhsSym(1),
                                           //#line 514 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 514 GJavaParser.g
                                           (InterfaceType)getRhsSym(3))
                //#line 514 GJavaParser.g
                );
            break;
            }
            //
            // Rule 196:  InterfaceBody ::= { InterfaceMemberDeclarationsopt }
            //
            case 196: {
                //#line 521 "GJavaParser.g"
                setResult(
                    //#line 521 GJavaParser.g
                    new InterfaceBody(getLeftIToken(), getRightIToken(),
                                      //#line 521 GJavaParser.g
                                      new AstToken(getRhsIToken(1)),
                                      //#line 521 GJavaParser.g
                                      (IInterfaceMemberDeclarationsopt)getRhsSym(2),
                                      //#line 521 GJavaParser.g
                                      new AstToken(getRhsIToken(3)))
                //#line 521 GJavaParser.g
                );
            break;
            }
            //
            // Rule 197:  InterfaceMemberDeclarations ::= InterfaceMemberDeclaration
            //
            case 197:
                break;
            //
            // Rule 198:  InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration
            //
            case 198: {
                //#line 524 "GJavaParser.g"
                setResult(
                    //#line 524 GJavaParser.g
                    new InterfaceMemberDeclarations(getLeftIToken(), getRightIToken(),
                                                    //#line 524 GJavaParser.g
                                                    (IInterfaceMemberDeclarations)getRhsSym(1),
                                                    //#line 524 GJavaParser.g
                                                    (IInterfaceMemberDeclaration)getRhsSym(2))
                //#line 524 GJavaParser.g
                );
            break;
            }
            //
            // Rule 199:  InterfaceMemberDeclaration ::= ConstantDeclaration
            //
            case 199:
                break;
            //
            // Rule 200:  InterfaceMemberDeclaration ::= AbstractMethodDeclaration
            //
            case 200:
                break;
            //
            // Rule 201:  InterfaceMemberDeclaration ::= ClassDeclaration
            //
            case 201:
                break;
            //
            // Rule 202:  InterfaceMemberDeclaration ::= InterfaceDeclaration
            //
            case 202:
                break;
            //
            // Rule 203:  InterfaceMemberDeclaration ::= ;
            //
            case 203: {
                //#line 530 "GJavaParser.g"
                setResult(
                    //#line 530 GJavaParser.g
                    new InterfaceMemberDeclaration(getRhsIToken(1))
                //#line 530 GJavaParser.g
                );
            break;
            }
            //
            // Rule 204:  ConstantDeclaration ::= ConstantModifiersopt Type VariableDeclarators
            //
            case 204: {
                //#line 532 "GJavaParser.g"
                setResult(
                    //#line 532 GJavaParser.g
                    new ConstantDeclaration(getLeftIToken(), getRightIToken(),
                                            //#line 532 GJavaParser.g
                                            (IConstantModifiersopt)getRhsSym(1),
                                            //#line 532 GJavaParser.g
                                            (IType)getRhsSym(2),
                                            //#line 532 GJavaParser.g
                                            (IVariableDeclarators)getRhsSym(3))
                //#line 532 GJavaParser.g
                );
            break;
            }
            //
            // Rule 205:  ConstantModifiers ::= ConstantModifier
            //
            case 205:
                break;
            //
            // Rule 206:  ConstantModifiers ::= ConstantModifiers ConstantModifier
            //
            case 206: {
                //#line 535 "GJavaParser.g"
                setResult(
                    //#line 535 GJavaParser.g
                    new ConstantModifiers(getLeftIToken(), getRightIToken(),
                                          //#line 535 GJavaParser.g
                                          (IConstantModifiers)getRhsSym(1),
                                          //#line 535 GJavaParser.g
                                          (IConstantModifier)getRhsSym(2))
                //#line 535 GJavaParser.g
                );
            break;
            }
            //
            // Rule 207:  ConstantModifier ::= Annotation
            //
            case 207:
                break;
            //
            // Rule 208:  ConstantModifier ::= public
            //
            case 208: {
                //#line 538 "GJavaParser.g"
                setResult(
                    //#line 538 GJavaParser.g
                    new ConstantModifier0(getRhsIToken(1))
                //#line 538 GJavaParser.g
                );
            break;
            }
            //
            // Rule 209:  ConstantModifier ::= static
            //
            case 209: {
                //#line 539 "GJavaParser.g"
                setResult(
                    //#line 539 GJavaParser.g
                    new ConstantModifier1(getRhsIToken(1))
                //#line 539 GJavaParser.g
                );
            break;
            }
            //
            // Rule 210:  ConstantModifier ::= final
            //
            case 210: {
                //#line 540 "GJavaParser.g"
                setResult(
                    //#line 540 GJavaParser.g
                    new ConstantModifier2(getRhsIToken(1))
                //#line 540 GJavaParser.g
                );
            break;
            }
            //
            // Rule 211:  AbstractMethodDeclaration ::= AbstractMethodModifiersopt TypeParametersopt ResultType MethodDeclarator Throwsopt ;
            //
            case 211: {
                //#line 542 "GJavaParser.g"
                setResult(
                    //#line 542 GJavaParser.g
                    new AbstractMethodDeclaration(getLeftIToken(), getRightIToken(),
                                                  //#line 542 GJavaParser.g
                                                  (IAbstractMethodModifiersopt)getRhsSym(1),
                                                  //#line 542 GJavaParser.g
                                                  (TypeParameters)getRhsSym(2),
                                                  //#line 542 GJavaParser.g
                                                  (IResultType)getRhsSym(3),
                                                  //#line 542 GJavaParser.g
                                                  (IMethodDeclarator)getRhsSym(4),
                                                  //#line 542 GJavaParser.g
                                                  (Throws)getRhsSym(5),
                                                  //#line 542 GJavaParser.g
                                                  new AstToken(getRhsIToken(6)))
                //#line 542 GJavaParser.g
                );
            break;
            }
            //
            // Rule 212:  AbstractMethodModifiers ::= AbstractMethodModifier
            //
            case 212:
                break;
            //
            // Rule 213:  AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier
            //
            case 213: {
                //#line 545 "GJavaParser.g"
                setResult(
                    //#line 545 GJavaParser.g
                    new AbstractMethodModifiers(getLeftIToken(), getRightIToken(),
                                                //#line 545 GJavaParser.g
                                                (IAbstractMethodModifiers)getRhsSym(1),
                                                //#line 545 GJavaParser.g
                                                (IAbstractMethodModifier)getRhsSym(2))
                //#line 545 GJavaParser.g
                );
            break;
            }
            //
            // Rule 214:  AbstractMethodModifier ::= Annotations
            //
            case 214:
                break;
            //
            // Rule 215:  AbstractMethodModifier ::= public
            //
            case 215: {
                //#line 548 "GJavaParser.g"
                setResult(
                    //#line 548 GJavaParser.g
                    new AbstractMethodModifier0(getRhsIToken(1))
                //#line 548 GJavaParser.g
                );
            break;
            }
            //
            // Rule 216:  AbstractMethodModifier ::= abstract
            //
            case 216: {
                //#line 549 "GJavaParser.g"
                setResult(
                    //#line 549 GJavaParser.g
                    new AbstractMethodModifier1(getRhsIToken(1))
                //#line 549 GJavaParser.g
                );
            break;
            }
            //
            // Rule 217:  AnnotationTypeDeclaration ::= InterfaceModifiersopt @ interface identifier AnnotationTypeBody
            //
            case 217: {
                //#line 551 "GJavaParser.g"
                setResult(
                    //#line 551 GJavaParser.g
                    new AnnotationTypeDeclaration(getLeftIToken(), getRightIToken(),
                                                  //#line 551 GJavaParser.g
                                                  (IInterfaceModifiersopt)getRhsSym(1),
                                                  //#line 551 GJavaParser.g
                                                  new AstToken(getRhsIToken(2)),
                                                  //#line 551 GJavaParser.g
                                                  new AstToken(getRhsIToken(3)),
                                                  //#line 551 GJavaParser.g
                                                  (identifier)getRhsSym(4),
                                                  //#line 551 GJavaParser.g
                                                  (AnnotationTypeBody)getRhsSym(5))
                //#line 551 GJavaParser.g
                );
            break;
            }
            //
            // Rule 218:  AnnotationTypeBody ::= { AnnotationTypeElementDeclarationsopt }
            //
            case 218: {
                //#line 553 "GJavaParser.g"
                setResult(
                    //#line 553 GJavaParser.g
                    new AnnotationTypeBody(getLeftIToken(), getRightIToken(),
                                           //#line 553 GJavaParser.g
                                           new AstToken(getRhsIToken(1)),
                                           //#line 553 GJavaParser.g
                                           (IAnnotationTypeElementDeclarationsopt)getRhsSym(2),
                                           //#line 553 GJavaParser.g
                                           new AstToken(getRhsIToken(3)))
                //#line 553 GJavaParser.g
                );
            break;
            }
            //
            // Rule 219:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration
            //
            case 219:
                break;
            //
            // Rule 220:  AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration
            //
            case 220: {
                //#line 556 "GJavaParser.g"
                setResult(
                    //#line 556 GJavaParser.g
                    new AnnotationTypeElementDeclarations(getLeftIToken(), getRightIToken(),
                                                          //#line 556 GJavaParser.g
                                                          (IAnnotationTypeElementDeclarations)getRhsSym(1),
                                                          //#line 556 GJavaParser.g
                                                          (IAnnotationTypeElementDeclaration)getRhsSym(2))
                //#line 556 GJavaParser.g
                );
            break;
            }
            //
            // Rule 221:  AnnotationTypeElementDeclaration ::= AbstractMethodModifiersopt Type identifier ( ) DefaultValueopt ;
            //
            case 221: {
                //#line 558 "GJavaParser.g"
                setResult(
                    //#line 558 GJavaParser.g
                    new AnnotationTypeElementDeclaration0(getLeftIToken(), getRightIToken(),
                                                          //#line 558 GJavaParser.g
                                                          (IAbstractMethodModifiersopt)getRhsSym(1),
                                                          //#line 558 GJavaParser.g
                                                          (IType)getRhsSym(2),
                                                          //#line 558 GJavaParser.g
                                                          (identifier)getRhsSym(3),
                                                          //#line 558 GJavaParser.g
                                                          new AstToken(getRhsIToken(4)),
                                                          //#line 558 GJavaParser.g
                                                          new AstToken(getRhsIToken(5)),
                                                          //#line 558 GJavaParser.g
                                                          (DefaultValue)getRhsSym(6),
                                                          //#line 558 GJavaParser.g
                                                          new AstToken(getRhsIToken(7)))
                //#line 558 GJavaParser.g
                );
            break;
            }
            //
            // Rule 222:  AnnotationTypeElementDeclaration ::= ConstantDeclaration
            //
            case 222:
                break;
            //
            // Rule 223:  AnnotationTypeElementDeclaration ::= ClassDeclaration
            //
            case 223:
                break;
            //
            // Rule 224:  AnnotationTypeElementDeclaration ::= InterfaceDeclaration
            //
            case 224:
                break;
            //
            // Rule 225:  AnnotationTypeElementDeclaration ::= EnumDeclaration
            //
            case 225:
                break;
            //
            // Rule 226:  AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration
            //
            case 226:
                break;
            //
            // Rule 227:  AnnotationTypeElementDeclaration ::= ;
            //
            case 227: {
                //#line 564 "GJavaParser.g"
                setResult(
                    //#line 564 GJavaParser.g
                    new AnnotationTypeElementDeclaration1(getRhsIToken(1))
                //#line 564 GJavaParser.g
                );
            break;
            }
            //
            // Rule 228:  DefaultValue ::= default ElementValue
            //
            case 228: {
                //#line 566 "GJavaParser.g"
                setResult(
                    //#line 566 GJavaParser.g
                    new DefaultValue(getLeftIToken(), getRightIToken(),
                                     //#line 566 GJavaParser.g
                                     new AstToken(getRhsIToken(1)),
                                     //#line 566 GJavaParser.g
                                     (IElementValue)getRhsSym(2))
                //#line 566 GJavaParser.g
                );
            break;
            }
            //
            // Rule 229:  Annotations ::= Annotation
            //
            case 229:
                break;
            //
            // Rule 230:  Annotations ::= Annotations Annotation
            //
            case 230: {
                //#line 569 "GJavaParser.g"
                setResult(
                    //#line 569 GJavaParser.g
                    new Annotations(getLeftIToken(), getRightIToken(),
                                    //#line 569 GJavaParser.g
                                    (IAnnotations)getRhsSym(1),
                                    //#line 569 GJavaParser.g
                                    (IAnnotation)getRhsSym(2))
                //#line 569 GJavaParser.g
                );
            break;
            }
            //
            // Rule 231:  Annotation ::= NormalAnnotation
            //
            case 231:
                break;
            //
            // Rule 232:  Annotation ::= MarkerAnnotation
            //
            case 232:
                break;
            //
            // Rule 233:  Annotation ::= SingleElementAnnotation
            //
            case 233:
                break;
            //
            // Rule 234:  NormalAnnotation ::= @ TypeName ( ElementValuePairsopt )
            //
            case 234: {
                //#line 575 "GJavaParser.g"
                setResult(
                    //#line 575 GJavaParser.g
                    new NormalAnnotation(getLeftIToken(), getRightIToken(),
                                         //#line 575 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 575 GJavaParser.g
                                         (ITypeName)getRhsSym(2),
                                         //#line 575 GJavaParser.g
                                         new AstToken(getRhsIToken(3)),
                                         //#line 575 GJavaParser.g
                                         (IElementValuePairsopt)getRhsSym(4),
                                         //#line 575 GJavaParser.g
                                         new AstToken(getRhsIToken(5)))
                //#line 575 GJavaParser.g
                );
            break;
            }
            //
            // Rule 235:  ElementValuePairs ::= ElementValuePair
            //
            case 235:
                break;
            //
            // Rule 236:  ElementValuePairs ::= ElementValuePairs , ElementValuePair
            //
            case 236: {
                //#line 578 "GJavaParser.g"
                setResult(
                    //#line 578 GJavaParser.g
                    new ElementValuePairs(getLeftIToken(), getRightIToken(),
                                          //#line 578 GJavaParser.g
                                          (IElementValuePairs)getRhsSym(1),
                                          //#line 578 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 578 GJavaParser.g
                                          (ElementValuePair)getRhsSym(3))
                //#line 578 GJavaParser.g
                );
            break;
            }
            //
            // Rule 237:  ElementValuePair ::= SimpleName = ElementValue
            //
            case 237: {
                //#line 580 "GJavaParser.g"
                setResult(
                    //#line 580 GJavaParser.g
                    new ElementValuePair(getLeftIToken(), getRightIToken(),
                                         //#line 580 GJavaParser.g
                                         (identifier)getRhsSym(1),
                                         //#line 580 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 580 GJavaParser.g
                                         (IElementValue)getRhsSym(3))
                //#line 580 GJavaParser.g
                );
            break;
            }
            //
            // Rule 238:  SimpleName ::= identifier
            //
            case 238:
                break;
            //
            // Rule 239:  ElementValue ::= ConditionalExpression
            //
            case 239:
                break;
            //
            // Rule 240:  ElementValue ::= Annotation
            //
            case 240:
                break;
            //
            // Rule 241:  ElementValue ::= ElementValueArrayInitializer
            //
            case 241:
                break;
            //
            // Rule 242:  ElementValueArrayInitializer ::= { ElementValuesopt ,opt }
            //
            case 242: {
                //#line 588 "GJavaParser.g"
                setResult(
                    //#line 588 GJavaParser.g
                    new ElementValueArrayInitializer(getLeftIToken(), getRightIToken(),
                                                     //#line 588 GJavaParser.g
                                                     new AstToken(getRhsIToken(1)),
                                                     //#line 588 GJavaParser.g
                                                     (IElementValuesopt)getRhsSym(2),
                                                     //#line 588 GJavaParser.g
                                                     (Commaopt)getRhsSym(3),
                                                     //#line 588 GJavaParser.g
                                                     new AstToken(getRhsIToken(4)))
                //#line 588 GJavaParser.g
                );
            break;
            }
            //
            // Rule 243:  ElementValues ::= ElementValue
            //
            case 243:
                break;
            //
            // Rule 244:  ElementValues ::= ElementValues , ElementValue
            //
            case 244: {
                //#line 591 "GJavaParser.g"
                setResult(
                    //#line 591 GJavaParser.g
                    new ElementValues(getLeftIToken(), getRightIToken(),
                                      //#line 591 GJavaParser.g
                                      (IElementValues)getRhsSym(1),
                                      //#line 591 GJavaParser.g
                                      new AstToken(getRhsIToken(2)),
                                      //#line 591 GJavaParser.g
                                      (IElementValue)getRhsSym(3))
                //#line 591 GJavaParser.g
                );
            break;
            }
            //
            // Rule 245:  MarkerAnnotation ::= @ TypeName
            //
            case 245: {
                //#line 593 "GJavaParser.g"
                setResult(
                    //#line 593 GJavaParser.g
                    new MarkerAnnotation(getLeftIToken(), getRightIToken(),
                                         //#line 593 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 593 GJavaParser.g
                                         (ITypeName)getRhsSym(2))
                //#line 593 GJavaParser.g
                );
            break;
            }
            //
            // Rule 246:  SingleElementAnnotation ::= @ TypeName ( ElementValue )
            //
            case 246: {
                //#line 595 "GJavaParser.g"
                setResult(
                    //#line 595 GJavaParser.g
                    new SingleElementAnnotation(getLeftIToken(), getRightIToken(),
                                                //#line 595 GJavaParser.g
                                                new AstToken(getRhsIToken(1)),
                                                //#line 595 GJavaParser.g
                                                (ITypeName)getRhsSym(2),
                                                //#line 595 GJavaParser.g
                                                new AstToken(getRhsIToken(3)),
                                                //#line 595 GJavaParser.g
                                                (IElementValue)getRhsSym(4),
                                                //#line 595 GJavaParser.g
                                                new AstToken(getRhsIToken(5)))
                //#line 595 GJavaParser.g
                );
            break;
            }
            //
            // Rule 247:  ArrayInitializer ::= { VariableInitializersopt ,opt }
            //
            case 247: {
                //#line 599 "GJavaParser.g"
                setResult(
                    //#line 599 GJavaParser.g
                    new ArrayInitializer(getLeftIToken(), getRightIToken(),
                                         //#line 599 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 599 GJavaParser.g
                                         (IVariableInitializersopt)getRhsSym(2),
                                         //#line 599 GJavaParser.g
                                         (Commaopt)getRhsSym(3),
                                         //#line 599 GJavaParser.g
                                         new AstToken(getRhsIToken(4)))
                //#line 599 GJavaParser.g
                );
            break;
            }
            //
            // Rule 248:  VariableInitializers ::= VariableInitializer
            //
            case 248:
                break;
            //
            // Rule 249:  VariableInitializers ::= VariableInitializers , VariableInitializer
            //
            case 249: {
                //#line 602 "GJavaParser.g"
                setResult(
                    //#line 602 GJavaParser.g
                    new VariableInitializers(getLeftIToken(), getRightIToken(),
                                             //#line 602 GJavaParser.g
                                             (IVariableInitializers)getRhsSym(1),
                                             //#line 602 GJavaParser.g
                                             new AstToken(getRhsIToken(2)),
                                             //#line 602 GJavaParser.g
                                             (IVariableInitializer)getRhsSym(3))
                //#line 602 GJavaParser.g
                );
            break;
            }
            //
            // Rule 250:  Block ::= { BlockStatementsopt }
            //
            case 250: {
                //#line 618 "GJavaParser.g"
                setResult(
                    //#line 618 GJavaParser.g
                    new Block(getLeftIToken(), getRightIToken(),
                              //#line 618 GJavaParser.g
                              new AstToken(getRhsIToken(1)),
                              //#line 618 GJavaParser.g
                              (IBlockStatementsopt)getRhsSym(2),
                              //#line 618 GJavaParser.g
                              new AstToken(getRhsIToken(3)))
                //#line 618 GJavaParser.g
                );
            break;
            }
            //
            // Rule 251:  BlockStatements ::= BlockStatement
            //
            case 251:
                break;
            //
            // Rule 252:  BlockStatements ::= BlockStatements BlockStatement
            //
            case 252: {
                //#line 621 "GJavaParser.g"
                setResult(
                    //#line 621 GJavaParser.g
                    new BlockStatements(getLeftIToken(), getRightIToken(),
                                        //#line 621 GJavaParser.g
                                        (IBlockStatements)getRhsSym(1),
                                        //#line 621 GJavaParser.g
                                        (IBlockStatement)getRhsSym(2))
                //#line 621 GJavaParser.g
                );
            break;
            }
            //
            // Rule 253:  BlockStatement ::= LocalVariableDeclarationStatement
            //
            case 253:
                break;
            //
            // Rule 254:  BlockStatement ::= ClassDeclaration
            //
            case 254:
                break;
            //
            // Rule 255:  BlockStatement ::= Statement
            //
            case 255:
                break;
            //
            // Rule 256:  LocalVariableDeclarationStatement ::= LocalVariableDeclaration ;
            //
            case 256: {
                //#line 627 "GJavaParser.g"
                setResult(
                    //#line 627 GJavaParser.g
                    new LocalVariableDeclarationStatement(getLeftIToken(), getRightIToken(),
                                                          //#line 627 GJavaParser.g
                                                          (LocalVariableDeclaration)getRhsSym(1),
                                                          //#line 627 GJavaParser.g
                                                          new AstToken(getRhsIToken(2)))
                //#line 627 GJavaParser.g
                );
            break;
            }
            //
            // Rule 257:  LocalVariableDeclaration ::= VariableModifiersopt Type VariableDeclarators
            //
            case 257: {
                //#line 629 "GJavaParser.g"
                setResult(
                    //#line 629 GJavaParser.g
                    new LocalVariableDeclaration(getLeftIToken(), getRightIToken(),
                                                 //#line 629 GJavaParser.g
                                                 (IVariableModifiersopt)getRhsSym(1),
                                                 //#line 629 GJavaParser.g
                                                 (IType)getRhsSym(2),
                                                 //#line 629 GJavaParser.g
                                                 (IVariableDeclarators)getRhsSym(3))
                //#line 629 GJavaParser.g
                );
            break;
            }
            //
            // Rule 258:  Statement ::= StatementWithoutTrailingSubstatement
            //
            case 258:
                break;
            //
            // Rule 259:  Statement ::= LabeledStatement
            //
            case 259:
                break;
            //
            // Rule 260:  Statement ::= IfThenStatement
            //
            case 260:
                break;
            //
            // Rule 261:  Statement ::= IfThenElseStatement
            //
            case 261:
                break;
            //
            // Rule 262:  Statement ::= WhileStatement
            //
            case 262:
                break;
            //
            // Rule 263:  Statement ::= ForStatement
            //
            case 263:
                break;
            //
            // Rule 264:  StatementWithoutTrailingSubstatement ::= Block
            //
            case 264:
                break;
            //
            // Rule 265:  StatementWithoutTrailingSubstatement ::= EmptyStatement
            //
            case 265:
                break;
            //
            // Rule 266:  StatementWithoutTrailingSubstatement ::= ExpressionStatement
            //
            case 266:
                break;
            //
            // Rule 267:  StatementWithoutTrailingSubstatement ::= AssertStatement
            //
            case 267:
                break;
            //
            // Rule 268:  StatementWithoutTrailingSubstatement ::= SwitchStatement
            //
            case 268:
                break;
            //
            // Rule 269:  StatementWithoutTrailingSubstatement ::= DoStatement
            //
            case 269:
                break;
            //
            // Rule 270:  StatementWithoutTrailingSubstatement ::= BreakStatement
            //
            case 270:
                break;
            //
            // Rule 271:  StatementWithoutTrailingSubstatement ::= ContinueStatement
            //
            case 271:
                break;
            //
            // Rule 272:  StatementWithoutTrailingSubstatement ::= ReturnStatement
            //
            case 272:
                break;
            //
            // Rule 273:  StatementWithoutTrailingSubstatement ::= SynchronizedStatement
            //
            case 273:
                break;
            //
            // Rule 274:  StatementWithoutTrailingSubstatement ::= ThrowStatement
            //
            case 274:
                break;
            //
            // Rule 275:  StatementWithoutTrailingSubstatement ::= TryStatement
            //
            case 275:
                break;
            //
            // Rule 276:  StatementNoShortIf ::= StatementWithoutTrailingSubstatement
            //
            case 276:
                break;
            //
            // Rule 277:  StatementNoShortIf ::= LabeledStatementNoShortIf
            //
            case 277:
                break;
            //
            // Rule 278:  StatementNoShortIf ::= IfThenElseStatementNoShortIf
            //
            case 278:
                break;
            //
            // Rule 279:  StatementNoShortIf ::= WhileStatementNoShortIf
            //
            case 279:
                break;
            //
            // Rule 280:  StatementNoShortIf ::= ForStatementNoShortIf
            //
            case 280:
                break;
            //
            // Rule 281:  IfThenStatement ::= if ( Expression ) Statement
            //
            case 281: {
                //#line 672 "GJavaParser.g"
                setResult(
                    //#line 672 GJavaParser.g
                    new IfThenStatement(getLeftIToken(), getRightIToken(),
                                        //#line 672 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 672 GJavaParser.g
                                        new AstToken(getRhsIToken(2)),
                                        //#line 672 GJavaParser.g
                                        (IExpression)getRhsSym(3),
                                        //#line 672 GJavaParser.g
                                        new AstToken(getRhsIToken(4)),
                                        //#line 672 GJavaParser.g
                                        (IStatement)getRhsSym(5))
                //#line 672 GJavaParser.g
                );
            break;
            }
            //
            // Rule 282:  IfThenElseStatement ::= if ( Expression ) StatementNoShortIf else Statement
            //
            case 282: {
                //#line 674 "GJavaParser.g"
                setResult(
                    //#line 674 GJavaParser.g
                    new IfThenElseStatement(getLeftIToken(), getRightIToken(),
                                            //#line 674 GJavaParser.g
                                            new AstToken(getRhsIToken(1)),
                                            //#line 674 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 674 GJavaParser.g
                                            (IExpression)getRhsSym(3),
                                            //#line 674 GJavaParser.g
                                            new AstToken(getRhsIToken(4)),
                                            //#line 674 GJavaParser.g
                                            (IStatementNoShortIf)getRhsSym(5),
                                            //#line 674 GJavaParser.g
                                            new AstToken(getRhsIToken(6)),
                                            //#line 674 GJavaParser.g
                                            (IStatement)getRhsSym(7))
                //#line 674 GJavaParser.g
                );
            break;
            }
            //
            // Rule 283:  IfThenElseStatementNoShortIf ::= if ( Expression ) StatementNoShortIf else StatementNoShortIf
            //
            case 283: {
                //#line 676 "GJavaParser.g"
                setResult(
                    //#line 676 GJavaParser.g
                    new IfThenElseStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                     //#line 676 GJavaParser.g
                                                     new AstToken(getRhsIToken(1)),
                                                     //#line 676 GJavaParser.g
                                                     new AstToken(getRhsIToken(2)),
                                                     //#line 676 GJavaParser.g
                                                     (IExpression)getRhsSym(3),
                                                     //#line 676 GJavaParser.g
                                                     new AstToken(getRhsIToken(4)),
                                                     //#line 676 GJavaParser.g
                                                     (IStatementNoShortIf)getRhsSym(5),
                                                     //#line 676 GJavaParser.g
                                                     new AstToken(getRhsIToken(6)),
                                                     //#line 676 GJavaParser.g
                                                     (IStatementNoShortIf)getRhsSym(7))
                //#line 676 GJavaParser.g
                );
            break;
            }
            //
            // Rule 284:  EmptyStatement ::= ;
            //
            case 284: {
                //#line 678 "GJavaParser.g"
                setResult(
                    //#line 678 GJavaParser.g
                    new EmptyStatement(getRhsIToken(1))
                //#line 678 GJavaParser.g
                );
            break;
            }
            //
            // Rule 285:  LabeledStatement ::= identifier : Statement
            //
            case 285: {
                //#line 680 "GJavaParser.g"
                setResult(
                    //#line 680 GJavaParser.g
                    new LabeledStatement(getLeftIToken(), getRightIToken(),
                                         //#line 680 GJavaParser.g
                                         (identifier)getRhsSym(1),
                                         //#line 680 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 680 GJavaParser.g
                                         (IStatement)getRhsSym(3))
                //#line 680 GJavaParser.g
                );
            break;
            }
            //
            // Rule 286:  LabeledStatementNoShortIf ::= identifier : StatementNoShortIf
            //
            case 286: {
                //#line 682 "GJavaParser.g"
                setResult(
                    //#line 682 GJavaParser.g
                    new LabeledStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                  //#line 682 GJavaParser.g
                                                  (identifier)getRhsSym(1),
                                                  //#line 682 GJavaParser.g
                                                  new AstToken(getRhsIToken(2)),
                                                  //#line 682 GJavaParser.g
                                                  (IStatementNoShortIf)getRhsSym(3))
                //#line 682 GJavaParser.g
                );
            break;
            }
            //
            // Rule 287:  ExpressionStatement ::= StatementExpression ;
            //
            case 287: {
                //#line 684 "GJavaParser.g"
                setResult(
                    //#line 684 GJavaParser.g
                    new ExpressionStatement(getLeftIToken(), getRightIToken(),
                                            //#line 684 GJavaParser.g
                                            (IStatementExpression)getRhsSym(1),
                                            //#line 684 GJavaParser.g
                                            new AstToken(getRhsIToken(2)))
                //#line 684 GJavaParser.g
                );
            break;
            }
            //
            // Rule 288:  StatementExpression ::= Assignment
            //
            case 288:
                break;
            //
            // Rule 289:  StatementExpression ::= PreIncrementExpression
            //
            case 289:
                break;
            //
            // Rule 290:  StatementExpression ::= PreDecrementExpression
            //
            case 290:
                break;
            //
            // Rule 291:  StatementExpression ::= PostIncrementExpression
            //
            case 291:
                break;
            //
            // Rule 292:  StatementExpression ::= PostDecrementExpression
            //
            case 292:
                break;
            //
            // Rule 293:  StatementExpression ::= MethodInvocation
            //
            case 293:
                break;
            //
            // Rule 294:  StatementExpression ::= ClassInstanceCreationExpression
            //
            case 294:
                break;
            //
            // Rule 295:  AssertStatement ::= assert Expression ;
            //
            case 295: {
                //#line 703 "GJavaParser.g"
                setResult(
                    //#line 703 GJavaParser.g
                    new AssertStatement0(getLeftIToken(), getRightIToken(),
                                         //#line 703 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 703 GJavaParser.g
                                         (IExpression)getRhsSym(2),
                                         //#line 703 GJavaParser.g
                                         new AstToken(getRhsIToken(3)))
                //#line 703 GJavaParser.g
                );
            break;
            }
            //
            // Rule 296:  AssertStatement ::= assert Expression : Expression ;
            //
            case 296: {
                //#line 704 "GJavaParser.g"
                setResult(
                    //#line 704 GJavaParser.g
                    new AssertStatement1(getLeftIToken(), getRightIToken(),
                                         //#line 704 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 704 GJavaParser.g
                                         (IExpression)getRhsSym(2),
                                         //#line 704 GJavaParser.g
                                         new AstToken(getRhsIToken(3)),
                                         //#line 704 GJavaParser.g
                                         (IExpression)getRhsSym(4),
                                         //#line 704 GJavaParser.g
                                         new AstToken(getRhsIToken(5)))
                //#line 704 GJavaParser.g
                );
            break;
            }
            //
            // Rule 297:  SwitchStatement ::= switch ( Expression ) SwitchBlock
            //
            case 297: {
                //#line 706 "GJavaParser.g"
                setResult(
                    //#line 706 GJavaParser.g
                    new SwitchStatement(getLeftIToken(), getRightIToken(),
                                        //#line 706 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 706 GJavaParser.g
                                        new AstToken(getRhsIToken(2)),
                                        //#line 706 GJavaParser.g
                                        (IExpression)getRhsSym(3),
                                        //#line 706 GJavaParser.g
                                        new AstToken(getRhsIToken(4)),
                                        //#line 706 GJavaParser.g
                                        (SwitchBlock)getRhsSym(5))
                //#line 706 GJavaParser.g
                );
            break;
            }
            //
            // Rule 298:  SwitchBlock ::= { SwitchBlockStatementGroupsopt SwitchLabelsopt }
            //
            case 298: {
                //#line 708 "GJavaParser.g"
                setResult(
                    //#line 708 GJavaParser.g
                    new SwitchBlock(getLeftIToken(), getRightIToken(),
                                    //#line 708 GJavaParser.g
                                    new AstToken(getRhsIToken(1)),
                                    //#line 708 GJavaParser.g
                                    (ISwitchBlockStatementGroupsopt)getRhsSym(2),
                                    //#line 708 GJavaParser.g
                                    (ISwitchLabelsopt)getRhsSym(3),
                                    //#line 708 GJavaParser.g
                                    new AstToken(getRhsIToken(4)))
                //#line 708 GJavaParser.g
                );
            break;
            }
            //
            // Rule 299:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroup
            //
            case 299:
                break;
            //
            // Rule 300:  SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup
            //
            case 300: {
                //#line 711 "GJavaParser.g"
                setResult(
                    //#line 711 GJavaParser.g
                    new SwitchBlockStatementGroups(getLeftIToken(), getRightIToken(),
                                                   //#line 711 GJavaParser.g
                                                   (ISwitchBlockStatementGroups)getRhsSym(1),
                                                   //#line 711 GJavaParser.g
                                                   (SwitchBlockStatementGroup)getRhsSym(2))
                //#line 711 GJavaParser.g
                );
            break;
            }
            //
            // Rule 301:  SwitchBlockStatementGroup ::= SwitchLabels BlockStatements
            //
            case 301: {
                //#line 713 "GJavaParser.g"
                setResult(
                    //#line 713 GJavaParser.g
                    new SwitchBlockStatementGroup(getLeftIToken(), getRightIToken(),
                                                  //#line 713 GJavaParser.g
                                                  (ISwitchLabels)getRhsSym(1),
                                                  //#line 713 GJavaParser.g
                                                  (IBlockStatements)getRhsSym(2))
                //#line 713 GJavaParser.g
                );
            break;
            }
            //
            // Rule 302:  SwitchLabels ::= SwitchLabel
            //
            case 302:
                break;
            //
            // Rule 303:  SwitchLabels ::= SwitchLabels SwitchLabel
            //
            case 303: {
                //#line 716 "GJavaParser.g"
                setResult(
                    //#line 716 GJavaParser.g
                    new SwitchLabels(getLeftIToken(), getRightIToken(),
                                     //#line 716 GJavaParser.g
                                     (ISwitchLabels)getRhsSym(1),
                                     //#line 716 GJavaParser.g
                                     (ISwitchLabel)getRhsSym(2))
                //#line 716 GJavaParser.g
                );
            break;
            }
            //
            // Rule 304:  SwitchLabel ::= case ConstantExpression :
            //
            case 304: {
                //#line 718 "GJavaParser.g"
                setResult(
                    //#line 718 GJavaParser.g
                    new SwitchLabel0(getLeftIToken(), getRightIToken(),
                                     //#line 718 GJavaParser.g
                                     new AstToken(getRhsIToken(1)),
                                     //#line 718 GJavaParser.g
                                     (IConstantExpression)getRhsSym(2),
                                     //#line 718 GJavaParser.g
                                     new AstToken(getRhsIToken(3)))
                //#line 718 GJavaParser.g
                );
            break;
            }
            //
            // Rule 305:  SwitchLabel ::= case EnumConstant :
            //
            case 305: {
                //#line 719 "GJavaParser.g"
                setResult(
                    //#line 719 GJavaParser.g
                    new SwitchLabel1(getLeftIToken(), getRightIToken(),
                                     //#line 719 GJavaParser.g
                                     new AstToken(getRhsIToken(1)),
                                     //#line 719 GJavaParser.g
                                     (IEnumConstant)getRhsSym(2),
                                     //#line 719 GJavaParser.g
                                     new AstToken(getRhsIToken(3)))
                //#line 719 GJavaParser.g
                );
            break;
            }
            //
            // Rule 306:  SwitchLabel ::= default :
            //
            case 306: {
                //#line 720 "GJavaParser.g"
                setResult(
                    //#line 720 GJavaParser.g
                    new SwitchLabel2(getLeftIToken(), getRightIToken(),
                                     //#line 720 GJavaParser.g
                                     new AstToken(getRhsIToken(1)),
                                     //#line 720 GJavaParser.g
                                     new AstToken(getRhsIToken(2)))
                //#line 720 GJavaParser.g
                );
            break;
            }
            //
            // Rule 307:  EnumConstant ::= identifier
            //
            case 307:
                break;
            //
            // Rule 308:  WhileStatement ::= while ( Expression ) Statement
            //
            case 308: {
                //#line 724 "GJavaParser.g"
                setResult(
                    //#line 724 GJavaParser.g
                    new WhileStatement(getLeftIToken(), getRightIToken(),
                                       //#line 724 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 724 GJavaParser.g
                                       new AstToken(getRhsIToken(2)),
                                       //#line 724 GJavaParser.g
                                       (IExpression)getRhsSym(3),
                                       //#line 724 GJavaParser.g
                                       new AstToken(getRhsIToken(4)),
                                       //#line 724 GJavaParser.g
                                       (IStatement)getRhsSym(5))
                //#line 724 GJavaParser.g
                );
            break;
            }
            //
            // Rule 309:  WhileStatementNoShortIf ::= while ( Expression ) StatementNoShortIf
            //
            case 309: {
                //#line 726 "GJavaParser.g"
                setResult(
                    //#line 726 GJavaParser.g
                    new WhileStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                                //#line 726 GJavaParser.g
                                                new AstToken(getRhsIToken(1)),
                                                //#line 726 GJavaParser.g
                                                new AstToken(getRhsIToken(2)),
                                                //#line 726 GJavaParser.g
                                                (IExpression)getRhsSym(3),
                                                //#line 726 GJavaParser.g
                                                new AstToken(getRhsIToken(4)),
                                                //#line 726 GJavaParser.g
                                                (IStatementNoShortIf)getRhsSym(5))
                //#line 726 GJavaParser.g
                );
            break;
            }
            //
            // Rule 310:  DoStatement ::= do Statement while ( Expression ) ;
            //
            case 310: {
                //#line 728 "GJavaParser.g"
                setResult(
                    //#line 728 GJavaParser.g
                    new DoStatement(getLeftIToken(), getRightIToken(),
                                    //#line 728 GJavaParser.g
                                    new AstToken(getRhsIToken(1)),
                                    //#line 728 GJavaParser.g
                                    (IStatement)getRhsSym(2),
                                    //#line 728 GJavaParser.g
                                    new AstToken(getRhsIToken(3)),
                                    //#line 728 GJavaParser.g
                                    new AstToken(getRhsIToken(4)),
                                    //#line 728 GJavaParser.g
                                    (IExpression)getRhsSym(5),
                                    //#line 728 GJavaParser.g
                                    new AstToken(getRhsIToken(6)),
                                    //#line 728 GJavaParser.g
                                    new AstToken(getRhsIToken(7)))
                //#line 728 GJavaParser.g
                );
            break;
            }
            //
            // Rule 311:  ForStatement ::= BasicForStatement
            //
            case 311:
                break;
            //
            // Rule 312:  ForStatement ::= EnhancedForStatement
            //
            case 312:
                break;
            //
            // Rule 313:  BasicForStatement ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) Statement
            //
            case 313: {
                //#line 733 "GJavaParser.g"
                setResult(
                    //#line 733 GJavaParser.g
                    new BasicForStatement(getLeftIToken(), getRightIToken(),
                                          //#line 733 GJavaParser.g
                                          new AstToken(getRhsIToken(1)),
                                          //#line 733 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 733 GJavaParser.g
                                          (IForInitopt)getRhsSym(3),
                                          //#line 733 GJavaParser.g
                                          new AstToken(getRhsIToken(4)),
                                          //#line 733 GJavaParser.g
                                          (IExpressionopt)getRhsSym(5),
                                          //#line 733 GJavaParser.g
                                          new AstToken(getRhsIToken(6)),
                                          //#line 733 GJavaParser.g
                                          (IForUpdateopt)getRhsSym(7),
                                          //#line 733 GJavaParser.g
                                          new AstToken(getRhsIToken(8)),
                                          //#line 733 GJavaParser.g
                                          (IStatement)getRhsSym(9))
                //#line 733 GJavaParser.g
                );
            break;
            }
            //
            // Rule 314:  ForStatementNoShortIf ::= for ( ForInitopt ; Expressionopt ; ForUpdateopt ) StatementNoShortIf
            //
            case 314: {
                //#line 735 "GJavaParser.g"
                setResult(
                    //#line 735 GJavaParser.g
                    new ForStatementNoShortIf(getLeftIToken(), getRightIToken(),
                                              //#line 735 GJavaParser.g
                                              new AstToken(getRhsIToken(1)),
                                              //#line 735 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 735 GJavaParser.g
                                              (IForInitopt)getRhsSym(3),
                                              //#line 735 GJavaParser.g
                                              new AstToken(getRhsIToken(4)),
                                              //#line 735 GJavaParser.g
                                              (IExpressionopt)getRhsSym(5),
                                              //#line 735 GJavaParser.g
                                              new AstToken(getRhsIToken(6)),
                                              //#line 735 GJavaParser.g
                                              (IForUpdateopt)getRhsSym(7),
                                              //#line 735 GJavaParser.g
                                              new AstToken(getRhsIToken(8)),
                                              //#line 735 GJavaParser.g
                                              (IStatementNoShortIf)getRhsSym(9))
                //#line 735 GJavaParser.g
                );
            break;
            }
            //
            // Rule 315:  ForInit ::= StatementExpressionList
            //
            case 315:
                break;
            //
            // Rule 316:  ForInit ::= LocalVariableDeclaration
            //
            case 316:
                break;
            //
            // Rule 317:  ForUpdate ::= StatementExpressionList
            //
            case 317:
                break;
            //
            // Rule 318:  StatementExpressionList ::= StatementExpression
            //
            case 318:
                break;
            //
            // Rule 319:  StatementExpressionList ::= StatementExpressionList , StatementExpression
            //
            case 319: {
                //#line 743 "GJavaParser.g"
                setResult(
                    //#line 743 GJavaParser.g
                    new StatementExpressionList(getLeftIToken(), getRightIToken(),
                                                //#line 743 GJavaParser.g
                                                (IStatementExpressionList)getRhsSym(1),
                                                //#line 743 GJavaParser.g
                                                new AstToken(getRhsIToken(2)),
                                                //#line 743 GJavaParser.g
                                                (IStatementExpression)getRhsSym(3))
                //#line 743 GJavaParser.g
                );
            break;
            }
            //
            // Rule 320:  EnhancedForStatement ::= for ( FormalParameter : Expression ) Statement
            //
            case 320: {
                //#line 745 "GJavaParser.g"
                setResult(
                    //#line 745 GJavaParser.g
                    new EnhancedForStatement(getLeftIToken(), getRightIToken(),
                                             //#line 745 GJavaParser.g
                                             new AstToken(getRhsIToken(1)),
                                             //#line 745 GJavaParser.g
                                             new AstToken(getRhsIToken(2)),
                                             //#line 745 GJavaParser.g
                                             (FormalParameter)getRhsSym(3),
                                             //#line 745 GJavaParser.g
                                             new AstToken(getRhsIToken(4)),
                                             //#line 745 GJavaParser.g
                                             (IExpression)getRhsSym(5),
                                             //#line 745 GJavaParser.g
                                             new AstToken(getRhsIToken(6)),
                                             //#line 745 GJavaParser.g
                                             (IStatement)getRhsSym(7))
                //#line 745 GJavaParser.g
                );
            break;
            }
            //
            // Rule 321:  BreakStatement ::= break identifieropt ;
            //
            case 321: {
                //#line 747 "GJavaParser.g"
                setResult(
                    //#line 747 GJavaParser.g
                    new BreakStatement(getLeftIToken(), getRightIToken(),
                                       //#line 747 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 747 GJavaParser.g
                                       (identifier)getRhsSym(2),
                                       //#line 747 GJavaParser.g
                                       new AstToken(getRhsIToken(3)))
                //#line 747 GJavaParser.g
                );
            break;
            }
            //
            // Rule 322:  ContinueStatement ::= continue identifieropt ;
            //
            case 322: {
                //#line 749 "GJavaParser.g"
                setResult(
                    //#line 749 GJavaParser.g
                    new ContinueStatement(getLeftIToken(), getRightIToken(),
                                          //#line 749 GJavaParser.g
                                          new AstToken(getRhsIToken(1)),
                                          //#line 749 GJavaParser.g
                                          (identifier)getRhsSym(2),
                                          //#line 749 GJavaParser.g
                                          new AstToken(getRhsIToken(3)))
                //#line 749 GJavaParser.g
                );
            break;
            }
            //
            // Rule 323:  ReturnStatement ::= return Expressionopt ;
            //
            case 323: {
                //#line 751 "GJavaParser.g"
                setResult(
                    //#line 751 GJavaParser.g
                    new ReturnStatement(getLeftIToken(), getRightIToken(),
                                        //#line 751 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 751 GJavaParser.g
                                        (IExpressionopt)getRhsSym(2),
                                        //#line 751 GJavaParser.g
                                        new AstToken(getRhsIToken(3)))
                //#line 751 GJavaParser.g
                );
            break;
            }
            //
            // Rule 324:  ThrowStatement ::= throw Expression ;
            //
            case 324: {
                //#line 753 "GJavaParser.g"
                setResult(
                    //#line 753 GJavaParser.g
                    new ThrowStatement(getLeftIToken(), getRightIToken(),
                                       //#line 753 GJavaParser.g
                                       new AstToken(getRhsIToken(1)),
                                       //#line 753 GJavaParser.g
                                       (IExpression)getRhsSym(2),
                                       //#line 753 GJavaParser.g
                                       new AstToken(getRhsIToken(3)))
                //#line 753 GJavaParser.g
                );
            break;
            }
            //
            // Rule 325:  SynchronizedStatement ::= synchronized ( Expression ) Block
            //
            case 325: {
                //#line 755 "GJavaParser.g"
                setResult(
                    //#line 755 GJavaParser.g
                    new SynchronizedStatement(getLeftIToken(), getRightIToken(),
                                              //#line 755 GJavaParser.g
                                              new AstToken(getRhsIToken(1)),
                                              //#line 755 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 755 GJavaParser.g
                                              (IExpression)getRhsSym(3),
                                              //#line 755 GJavaParser.g
                                              new AstToken(getRhsIToken(4)),
                                              //#line 755 GJavaParser.g
                                              (Block)getRhsSym(5))
                //#line 755 GJavaParser.g
                );
            break;
            }
            //
            // Rule 326:  TryStatement ::= try Block Catches
            //
            case 326: {
                //#line 757 "GJavaParser.g"
                setResult(
                    //#line 757 GJavaParser.g
                    new TryStatement0(getLeftIToken(), getRightIToken(),
                                      //#line 757 GJavaParser.g
                                      new AstToken(getRhsIToken(1)),
                                      //#line 757 GJavaParser.g
                                      (Block)getRhsSym(2),
                                      //#line 757 GJavaParser.g
                                      (ICatches)getRhsSym(3))
                //#line 757 GJavaParser.g
                );
            break;
            }
            //
            // Rule 327:  TryStatement ::= try Block Catchesopt Finally
            //
            case 327: {
                //#line 758 "GJavaParser.g"
                setResult(
                    //#line 758 GJavaParser.g
                    new TryStatement1(getLeftIToken(), getRightIToken(),
                                      //#line 758 GJavaParser.g
                                      new AstToken(getRhsIToken(1)),
                                      //#line 758 GJavaParser.g
                                      (Block)getRhsSym(2),
                                      //#line 758 GJavaParser.g
                                      (ICatchesopt)getRhsSym(3),
                                      //#line 758 GJavaParser.g
                                      (Finally)getRhsSym(4))
                //#line 758 GJavaParser.g
                );
            break;
            }
            //
            // Rule 328:  Catches ::= CatchClause
            //
            case 328:
                break;
            //
            // Rule 329:  Catches ::= Catches CatchClause
            //
            case 329: {
                //#line 761 "GJavaParser.g"
                setResult(
                    //#line 761 GJavaParser.g
                    new Catches(getLeftIToken(), getRightIToken(),
                                //#line 761 GJavaParser.g
                                (ICatches)getRhsSym(1),
                                //#line 761 GJavaParser.g
                                (CatchClause)getRhsSym(2))
                //#line 761 GJavaParser.g
                );
            break;
            }
            //
            // Rule 330:  CatchClause ::= catch ( FormalParameter ) Block
            //
            case 330: {
                //#line 763 "GJavaParser.g"
                setResult(
                    //#line 763 GJavaParser.g
                    new CatchClause(getLeftIToken(), getRightIToken(),
                                    //#line 763 GJavaParser.g
                                    new AstToken(getRhsIToken(1)),
                                    //#line 763 GJavaParser.g
                                    new AstToken(getRhsIToken(2)),
                                    //#line 763 GJavaParser.g
                                    (FormalParameter)getRhsSym(3),
                                    //#line 763 GJavaParser.g
                                    new AstToken(getRhsIToken(4)),
                                    //#line 763 GJavaParser.g
                                    (Block)getRhsSym(5))
                //#line 763 GJavaParser.g
                );
            break;
            }
            //
            // Rule 331:  Finally ::= finally Block
            //
            case 331: {
                //#line 765 "GJavaParser.g"
                setResult(
                    //#line 765 GJavaParser.g
                    new Finally(getLeftIToken(), getRightIToken(),
                                //#line 765 GJavaParser.g
                                new AstToken(getRhsIToken(1)),
                                //#line 765 GJavaParser.g
                                (Block)getRhsSym(2))
                //#line 765 GJavaParser.g
                );
            break;
            }
            //
            // Rule 332:  Primary ::= PrimaryNoNewArray
            //
            case 332:
                break;
            //
            // Rule 333:  Primary ::= ArrayCreationExpression
            //
            case 333:
                break;
            //
            // Rule 334:  PrimaryNoNewArray ::= Literal
            //
            case 334:
                break;
            //
            // Rule 335:  PrimaryNoNewArray ::= Type . class
            //
            case 335: {
                //#line 781 "GJavaParser.g"
                setResult(
                    //#line 781 GJavaParser.g
                    new PrimaryNoNewArray0(getLeftIToken(), getRightIToken(),
                                           //#line 781 GJavaParser.g
                                           (IType)getRhsSym(1),
                                           //#line 781 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 781 GJavaParser.g
                                           new AstToken(getRhsIToken(3)))
                //#line 781 GJavaParser.g
                );
            break;
            }
            //
            // Rule 336:  PrimaryNoNewArray ::= void . class
            //
            case 336: {
                //#line 782 "GJavaParser.g"
                setResult(
                    //#line 782 GJavaParser.g
                    new PrimaryNoNewArray1(getLeftIToken(), getRightIToken(),
                                           //#line 782 GJavaParser.g
                                           new AstToken(getRhsIToken(1)),
                                           //#line 782 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 782 GJavaParser.g
                                           new AstToken(getRhsIToken(3)))
                //#line 782 GJavaParser.g
                );
            break;
            }
            //
            // Rule 337:  PrimaryNoNewArray ::= this
            //
            case 337: {
                //#line 783 "GJavaParser.g"
                setResult(
                    //#line 783 GJavaParser.g
                    new PrimaryNoNewArray2(getRhsIToken(1))
                //#line 783 GJavaParser.g
                );
            break;
            }
            //
            // Rule 338:  PrimaryNoNewArray ::= ClassName . this
            //
            case 338: {
                //#line 784 "GJavaParser.g"
                setResult(
                    //#line 784 GJavaParser.g
                    new PrimaryNoNewArray3(getLeftIToken(), getRightIToken(),
                                           //#line 784 GJavaParser.g
                                           (IClassName)getRhsSym(1),
                                           //#line 784 GJavaParser.g
                                           new AstToken(getRhsIToken(2)),
                                           //#line 784 GJavaParser.g
                                           new AstToken(getRhsIToken(3)))
                //#line 784 GJavaParser.g
                );
            break;
            }
            //
            // Rule 339:  PrimaryNoNewArray ::= ( Expression )
            //
            case 339: {
                //#line 785 "GJavaParser.g"
                setResult(
                    //#line 785 GJavaParser.g
                    new PrimaryNoNewArray4(getLeftIToken(), getRightIToken(),
                                           //#line 785 GJavaParser.g
                                           new AstToken(getRhsIToken(1)),
                                           //#line 785 GJavaParser.g
                                           (IExpression)getRhsSym(2),
                                           //#line 785 GJavaParser.g
                                           new AstToken(getRhsIToken(3)))
                //#line 785 GJavaParser.g
                );
            break;
            }
            //
            // Rule 340:  PrimaryNoNewArray ::= ClassInstanceCreationExpression
            //
            case 340:
                break;
            //
            // Rule 341:  PrimaryNoNewArray ::= FieldAccess
            //
            case 341:
                break;
            //
            // Rule 342:  PrimaryNoNewArray ::= MethodInvocation
            //
            case 342:
                break;
            //
            // Rule 343:  PrimaryNoNewArray ::= ArrayAccess
            //
            case 343:
                break;
            //
            // Rule 344:  Literal ::= IntegerLiteral
            //
            case 344: {
                //#line 791 "GJavaParser.g"
                setResult(
                    //#line 791 GJavaParser.g
                    new Literal0(getRhsIToken(1))
                //#line 791 GJavaParser.g
                );
            break;
            }
            //
            // Rule 345:  Literal ::= LongLiteral
            //
            case 345: {
                //#line 792 "GJavaParser.g"
                setResult(
                    //#line 792 GJavaParser.g
                    new Literal1(getRhsIToken(1))
                //#line 792 GJavaParser.g
                );
            break;
            }
            //
            // Rule 346:  Literal ::= FloatingPointLiteral
            //
            case 346: {
                //#line 793 "GJavaParser.g"
                setResult(
                    //#line 793 GJavaParser.g
                    new Literal2(getRhsIToken(1))
                //#line 793 GJavaParser.g
                );
            break;
            }
            //
            // Rule 347:  Literal ::= DoubleLiteral
            //
            case 347: {
                //#line 794 "GJavaParser.g"
                setResult(
                    //#line 794 GJavaParser.g
                    new Literal3(getRhsIToken(1))
                //#line 794 GJavaParser.g
                );
            break;
            }
            //
            // Rule 348:  Literal ::= BooleanLiteral
            //
            case 348:
                break;
            //
            // Rule 349:  Literal ::= CharacterLiteral
            //
            case 349: {
                //#line 796 "GJavaParser.g"
                setResult(
                    //#line 796 GJavaParser.g
                    new Literal4(getRhsIToken(1))
                //#line 796 GJavaParser.g
                );
            break;
            }
            //
            // Rule 350:  Literal ::= StringLiteral
            //
            case 350: {
                //#line 797 "GJavaParser.g"
                setResult(
                    //#line 797 GJavaParser.g
                    new Literal5(getRhsIToken(1))
                //#line 797 GJavaParser.g
                );
            break;
            }
            //
            // Rule 351:  Literal ::= null
            //
            case 351: {
                //#line 798 "GJavaParser.g"
                setResult(
                    //#line 798 GJavaParser.g
                    new Literal6(getRhsIToken(1))
                //#line 798 GJavaParser.g
                );
            break;
            }
            //
            // Rule 352:  BooleanLiteral ::= true
            //
            case 352: {
                //#line 800 "GJavaParser.g"
                setResult(
                    //#line 800 GJavaParser.g
                    new BooleanLiteral0(getRhsIToken(1))
                //#line 800 GJavaParser.g
                );
            break;
            }
            //
            // Rule 353:  BooleanLiteral ::= false
            //
            case 353: {
                //#line 801 "GJavaParser.g"
                setResult(
                    //#line 801 GJavaParser.g
                    new BooleanLiteral1(getRhsIToken(1))
                //#line 801 GJavaParser.g
                );
            break;
            }
            //
            // Rule 354:  ClassInstanceCreationExpression ::= new TypeArgumentsopt ClassOrInterfaceType TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 354: {
                //#line 808 "GJavaParser.g"
                setResult(
                    //#line 808 GJavaParser.g
                    new ClassInstanceCreationExpression0(getLeftIToken(), getRightIToken(),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(getRhsIToken(1)),
                                                         //#line 808 GJavaParser.g
                                                         (TypeArguments)getRhsSym(2),
                                                         //#line 808 GJavaParser.g
                                                         (ClassType)getRhsSym(3),
                                                         //#line 808 GJavaParser.g
                                                         (TypeArguments)getRhsSym(4),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(getRhsIToken(5)),
                                                         //#line 808 GJavaParser.g
                                                         (IArgumentListopt)getRhsSym(6),
                                                         //#line 808 GJavaParser.g
                                                         new AstToken(getRhsIToken(7)),
                                                         //#line 808 GJavaParser.g
                                                         (ClassBody)getRhsSym(8))
                //#line 808 GJavaParser.g
                );
            break;
            }
            //
            // Rule 355:  ClassInstanceCreationExpression ::= Primary . new TypeArgumentsopt identifier TypeArgumentsopt ( ArgumentListopt ) ClassBodyopt
            //
            case 355: {
                //#line 809 "GJavaParser.g"
                setResult(
                    //#line 809 GJavaParser.g
                    new ClassInstanceCreationExpression1(getLeftIToken(), getRightIToken(),
                                                         //#line 809 GJavaParser.g
                                                         (IPrimary)getRhsSym(1),
                                                         //#line 809 GJavaParser.g
                                                         new AstToken(getRhsIToken(2)),
                                                         //#line 809 GJavaParser.g
                                                         new AstToken(getRhsIToken(3)),
                                                         //#line 809 GJavaParser.g
                                                         (TypeArguments)getRhsSym(4),
                                                         //#line 809 GJavaParser.g
                                                         (identifier)getRhsSym(5),
                                                         //#line 809 GJavaParser.g
                                                         (TypeArguments)getRhsSym(6),
                                                         //#line 809 GJavaParser.g
                                                         new AstToken(getRhsIToken(7)),
                                                         //#line 809 GJavaParser.g
                                                         (IArgumentListopt)getRhsSym(8),
                                                         //#line 809 GJavaParser.g
                                                         new AstToken(getRhsIToken(9)),
                                                         //#line 809 GJavaParser.g
                                                         (ClassBody)getRhsSym(10))
                //#line 809 GJavaParser.g
                );
            break;
            }
            //
            // Rule 356:  ArgumentList ::= Expression
            //
            case 356:
                break;
            //
            // Rule 357:  ArgumentList ::= ArgumentList , Expression
            //
            case 357: {
                //#line 813 "GJavaParser.g"
                setResult(
                    //#line 813 GJavaParser.g
                    new ArgumentList(getLeftIToken(), getRightIToken(),
                                     //#line 813 GJavaParser.g
                                     (IArgumentList)getRhsSym(1),
                                     //#line 813 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 813 GJavaParser.g
                                     (IExpression)getRhsSym(3))
                //#line 813 GJavaParser.g
                );
            break;
            }
            //
            // Rule 358:  ArrayCreationExpression ::= new PrimitiveType DimExprs Dimsopt
            //
            case 358: {
                //#line 823 "GJavaParser.g"
                setResult(
                    //#line 823 GJavaParser.g
                    new ArrayCreationExpression0(getLeftIToken(), getRightIToken(),
                                                 //#line 823 GJavaParser.g
                                                 new AstToken(getRhsIToken(1)),
                                                 //#line 823 GJavaParser.g
                                                 (IPrimitiveType)getRhsSym(2),
                                                 //#line 823 GJavaParser.g
                                                 (IDimExprs)getRhsSym(3),
                                                 //#line 823 GJavaParser.g
                                                 (IDimsopt)getRhsSym(4))
                //#line 823 GJavaParser.g
                );
            break;
            }
            //
            // Rule 359:  ArrayCreationExpression ::= new ClassOrInterfaceType DimExprs Dimsopt
            //
            case 359: {
                //#line 824 "GJavaParser.g"
                setResult(
                    //#line 824 GJavaParser.g
                    new ArrayCreationExpression1(getLeftIToken(), getRightIToken(),
                                                 //#line 824 GJavaParser.g
                                                 new AstToken(getRhsIToken(1)),
                                                 //#line 824 GJavaParser.g
                                                 (ClassType)getRhsSym(2),
                                                 //#line 824 GJavaParser.g
                                                 (IDimExprs)getRhsSym(3),
                                                 //#line 824 GJavaParser.g
                                                 (IDimsopt)getRhsSym(4))
                //#line 824 GJavaParser.g
                );
            break;
            }
            //
            // Rule 360:  ArrayCreationExpression ::= new PrimitiveType Dims ArrayInitializer
            //
            case 360: {
                //#line 825 "GJavaParser.g"
                setResult(
                    //#line 825 GJavaParser.g
                    new ArrayCreationExpression2(getLeftIToken(), getRightIToken(),
                                                 //#line 825 GJavaParser.g
                                                 new AstToken(getRhsIToken(1)),
                                                 //#line 825 GJavaParser.g
                                                 (IPrimitiveType)getRhsSym(2),
                                                 //#line 825 GJavaParser.g
                                                 (IDims)getRhsSym(3),
                                                 //#line 825 GJavaParser.g
                                                 (ArrayInitializer)getRhsSym(4))
                //#line 825 GJavaParser.g
                );
            break;
            }
            //
            // Rule 361:  ArrayCreationExpression ::= new ClassOrInterfaceType Dims ArrayInitializer
            //
            case 361: {
                //#line 826 "GJavaParser.g"
                setResult(
                    //#line 826 GJavaParser.g
                    new ArrayCreationExpression3(getLeftIToken(), getRightIToken(),
                                                 //#line 826 GJavaParser.g
                                                 new AstToken(getRhsIToken(1)),
                                                 //#line 826 GJavaParser.g
                                                 (ClassType)getRhsSym(2),
                                                 //#line 826 GJavaParser.g
                                                 (IDims)getRhsSym(3),
                                                 //#line 826 GJavaParser.g
                                                 (ArrayInitializer)getRhsSym(4))
                //#line 826 GJavaParser.g
                );
            break;
            }
            //
            // Rule 362:  DimExprs ::= DimExpr
            //
            case 362:
                break;
            //
            // Rule 363:  DimExprs ::= DimExprs DimExpr
            //
            case 363: {
                //#line 829 "GJavaParser.g"
                setResult(
                    //#line 829 GJavaParser.g
                    new DimExprs(getLeftIToken(), getRightIToken(),
                                 //#line 829 GJavaParser.g
                                 (IDimExprs)getRhsSym(1),
                                 //#line 829 GJavaParser.g
                                 (DimExpr)getRhsSym(2))
                //#line 829 GJavaParser.g
                );
            break;
            }
            //
            // Rule 364:  DimExpr ::= [ Expression ]
            //
            case 364: {
                //#line 831 "GJavaParser.g"
                setResult(
                    //#line 831 GJavaParser.g
                    new DimExpr(getLeftIToken(), getRightIToken(),
                                //#line 831 GJavaParser.g
                                new AstToken(getRhsIToken(1)),
                                //#line 831 GJavaParser.g
                                (IExpression)getRhsSym(2),
                                //#line 831 GJavaParser.g
                                new AstToken(getRhsIToken(3)))
                //#line 831 GJavaParser.g
                );
            break;
            }
            //
            // Rule 365:  Dims ::= [ ]
            //
            case 365: {
                //#line 833 "GJavaParser.g"
                setResult(
                    //#line 833 GJavaParser.g
                    new Dims0(getLeftIToken(), getRightIToken(),
                              //#line 833 GJavaParser.g
                              new AstToken(getRhsIToken(1)),
                              //#line 833 GJavaParser.g
                              new AstToken(getRhsIToken(2)))
                //#line 833 GJavaParser.g
                );
            break;
            }
            //
            // Rule 366:  Dims ::= Dims [ ]
            //
            case 366: {
                //#line 834 "GJavaParser.g"
                setResult(
                    //#line 834 GJavaParser.g
                    new Dims1(getLeftIToken(), getRightIToken(),
                              //#line 834 GJavaParser.g
                              (IDims)getRhsSym(1),
                              //#line 834 GJavaParser.g
                              new AstToken(getRhsIToken(2)),
                              //#line 834 GJavaParser.g
                              new AstToken(getRhsIToken(3)))
                //#line 834 GJavaParser.g
                );
            break;
            }
            //
            // Rule 367:  FieldAccess ::= Primary . identifier
            //
            case 367: {
                //#line 836 "GJavaParser.g"
                setResult(
                    //#line 836 GJavaParser.g
                    new FieldAccess0(getLeftIToken(), getRightIToken(),
                                     //#line 836 GJavaParser.g
                                     (IPrimary)getRhsSym(1),
                                     //#line 836 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 836 GJavaParser.g
                                     (identifier)getRhsSym(3))
                //#line 836 GJavaParser.g
                );
            break;
            }
            //
            // Rule 368:  FieldAccess ::= super . identifier
            //
            case 368: {
                //#line 837 "GJavaParser.g"
                setResult(
                    //#line 837 GJavaParser.g
                    new FieldAccess1(getLeftIToken(), getRightIToken(),
                                     //#line 837 GJavaParser.g
                                     new AstToken(getRhsIToken(1)),
                                     //#line 837 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 837 GJavaParser.g
                                     (identifier)getRhsSym(3))
                //#line 837 GJavaParser.g
                );
            break;
            }
            //
            // Rule 369:  FieldAccess ::= ClassName . super . identifier
            //
            case 369: {
                //#line 838 "GJavaParser.g"
                setResult(
                    //#line 838 GJavaParser.g
                    new FieldAccess2(getLeftIToken(), getRightIToken(),
                                     //#line 838 GJavaParser.g
                                     (IClassName)getRhsSym(1),
                                     //#line 838 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 838 GJavaParser.g
                                     new AstToken(getRhsIToken(3)),
                                     //#line 838 GJavaParser.g
                                     new AstToken(getRhsIToken(4)),
                                     //#line 838 GJavaParser.g
                                     (identifier)getRhsSym(5))
                //#line 838 GJavaParser.g
                );
            break;
            }
            //
            // Rule 370:  MethodInvocation ::= MethodName ( ArgumentListopt )
            //
            case 370: {
                //#line 840 "GJavaParser.g"
                setResult(
                    //#line 840 GJavaParser.g
                    new MethodInvocation0(getLeftIToken(), getRightIToken(),
                                          //#line 840 GJavaParser.g
                                          (IMethodName)getRhsSym(1),
                                          //#line 840 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 840 GJavaParser.g
                                          (IArgumentListopt)getRhsSym(3),
                                          //#line 840 GJavaParser.g
                                          new AstToken(getRhsIToken(4)))
                //#line 840 GJavaParser.g
                );
            break;
            }
            //
            // Rule 371:  MethodInvocation ::= Primary . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 371: {
                //#line 841 "GJavaParser.g"
                setResult(
                    //#line 841 GJavaParser.g
                    new MethodInvocation1(getLeftIToken(), getRightIToken(),
                                          //#line 841 GJavaParser.g
                                          (IPrimary)getRhsSym(1),
                                          //#line 841 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 841 GJavaParser.g
                                          (TypeArguments)getRhsSym(3),
                                          //#line 841 GJavaParser.g
                                          (identifier)getRhsSym(4),
                                          //#line 841 GJavaParser.g
                                          new AstToken(getRhsIToken(5)),
                                          //#line 841 GJavaParser.g
                                          (IArgumentListopt)getRhsSym(6),
                                          //#line 841 GJavaParser.g
                                          new AstToken(getRhsIToken(7)))
                //#line 841 GJavaParser.g
                );
            break;
            }
            //
            // Rule 372:  MethodInvocation ::= super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 372: {
                //#line 842 "GJavaParser.g"
                setResult(
                    //#line 842 GJavaParser.g
                    new MethodInvocation2(getLeftIToken(), getRightIToken(),
                                          //#line 842 GJavaParser.g
                                          new AstToken(getRhsIToken(1)),
                                          //#line 842 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 842 GJavaParser.g
                                          (TypeArguments)getRhsSym(3),
                                          //#line 842 GJavaParser.g
                                          (identifier)getRhsSym(4),
                                          //#line 842 GJavaParser.g
                                          new AstToken(getRhsIToken(5)),
                                          //#line 842 GJavaParser.g
                                          (IArgumentListopt)getRhsSym(6),
                                          //#line 842 GJavaParser.g
                                          new AstToken(getRhsIToken(7)))
                //#line 842 GJavaParser.g
                );
            break;
            }
            //
            // Rule 373:  MethodInvocation ::= ClassName . super . TypeArgumentsopt identifier ( ArgumentListopt )
            //
            case 373: {
                //#line 843 "GJavaParser.g"
                setResult(
                    //#line 843 GJavaParser.g
                    new MethodInvocation3(getLeftIToken(), getRightIToken(),
                                          //#line 843 GJavaParser.g
                                          (IClassName)getRhsSym(1),
                                          //#line 843 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 843 GJavaParser.g
                                          new AstToken(getRhsIToken(3)),
                                          //#line 843 GJavaParser.g
                                          new AstToken(getRhsIToken(4)),
                                          //#line 843 GJavaParser.g
                                          (TypeArguments)getRhsSym(5),
                                          //#line 843 GJavaParser.g
                                          (identifier)getRhsSym(6),
                                          //#line 843 GJavaParser.g
                                          new AstToken(getRhsIToken(7)),
                                          //#line 843 GJavaParser.g
                                          (IArgumentListopt)getRhsSym(8),
                                          //#line 843 GJavaParser.g
                                          new AstToken(getRhsIToken(9)))
                //#line 843 GJavaParser.g
                );
            break;
            }
            //
            // Rule 374:  MethodInvocation ::= TypeName . TypeArguments identifier ( ArgumentListopt )
            //
            case 374: {
                //#line 844 "GJavaParser.g"
                setResult(
                    //#line 844 GJavaParser.g
                    new MethodInvocation4(getLeftIToken(), getRightIToken(),
                                          //#line 844 GJavaParser.g
                                          (ITypeName)getRhsSym(1),
                                          //#line 844 GJavaParser.g
                                          new AstToken(getRhsIToken(2)),
                                          //#line 844 GJavaParser.g
                                          (TypeArguments)getRhsSym(3),
                                          //#line 844 GJavaParser.g
                                          (identifier)getRhsSym(4),
                                          //#line 844 GJavaParser.g
                                          new AstToken(getRhsIToken(5)),
                                          //#line 844 GJavaParser.g
                                          (IArgumentListopt)getRhsSym(6),
                                          //#line 844 GJavaParser.g
                                          new AstToken(getRhsIToken(7)))
                //#line 844 GJavaParser.g
                );
            break;
            }
            //
            // Rule 375:  ArrayAccess ::= ExpressionName [ Expression ]
            //
            case 375: {
                //#line 852 "GJavaParser.g"
                setResult(
                    //#line 852 GJavaParser.g
                    new ArrayAccess0(getLeftIToken(), getRightIToken(),
                                     //#line 852 GJavaParser.g
                                     (IExpressionName)getRhsSym(1),
                                     //#line 852 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 852 GJavaParser.g
                                     (IExpression)getRhsSym(3),
                                     //#line 852 GJavaParser.g
                                     new AstToken(getRhsIToken(4)))
                //#line 852 GJavaParser.g
                );
            break;
            }
            //
            // Rule 376:  ArrayAccess ::= PrimaryNoNewArray [ Expression ]
            //
            case 376: {
                //#line 853 "GJavaParser.g"
                setResult(
                    //#line 853 GJavaParser.g
                    new ArrayAccess1(getLeftIToken(), getRightIToken(),
                                     //#line 853 GJavaParser.g
                                     (IPrimaryNoNewArray)getRhsSym(1),
                                     //#line 853 GJavaParser.g
                                     new AstToken(getRhsIToken(2)),
                                     //#line 853 GJavaParser.g
                                     (IExpression)getRhsSym(3),
                                     //#line 853 GJavaParser.g
                                     new AstToken(getRhsIToken(4)))
                //#line 853 GJavaParser.g
                );
            break;
            }
            //
            // Rule 377:  PostfixExpression ::= Primary
            //
            case 377:
                break;
            //
            // Rule 378:  PostfixExpression ::= ExpressionName
            //
            case 378:
                break;
            //
            // Rule 379:  PostfixExpression ::= PostIncrementExpression
            //
            case 379:
                break;
            //
            // Rule 380:  PostfixExpression ::= PostDecrementExpression
            //
            case 380:
                break;
            //
            // Rule 381:  PostIncrementExpression ::= PostfixExpression ++
            //
            case 381: {
                //#line 860 "GJavaParser.g"
                setResult(
                    //#line 860 GJavaParser.g
                    new PostIncrementExpression(getLeftIToken(), getRightIToken(),
                                                //#line 860 GJavaParser.g
                                                (IPostfixExpression)getRhsSym(1),
                                                //#line 860 GJavaParser.g
                                                new AstToken(getRhsIToken(2)))
                //#line 860 GJavaParser.g
                );
            break;
            }
            //
            // Rule 382:  PostDecrementExpression ::= PostfixExpression --
            //
            case 382: {
                //#line 862 "GJavaParser.g"
                setResult(
                    //#line 862 GJavaParser.g
                    new PostDecrementExpression(getLeftIToken(), getRightIToken(),
                                                //#line 862 GJavaParser.g
                                                (IPostfixExpression)getRhsSym(1),
                                                //#line 862 GJavaParser.g
                                                new AstToken(getRhsIToken(2)))
                //#line 862 GJavaParser.g
                );
            break;
            }
            //
            // Rule 383:  UnaryExpression ::= PreIncrementExpression
            //
            case 383:
                break;
            //
            // Rule 384:  UnaryExpression ::= PreDecrementExpression
            //
            case 384:
                break;
            //
            // Rule 385:  UnaryExpression ::= + UnaryExpression
            //
            case 385: {
                //#line 866 "GJavaParser.g"
                setResult(
                    //#line 866 GJavaParser.g
                    new UnaryExpression0(getLeftIToken(), getRightIToken(),
                                         //#line 866 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 866 GJavaParser.g
                                         (IUnaryExpression)getRhsSym(2))
                //#line 866 GJavaParser.g
                );
            break;
            }
            //
            // Rule 386:  UnaryExpression ::= - UnaryExpression
            //
            case 386: {
                //#line 867 "GJavaParser.g"
                setResult(
                    //#line 867 GJavaParser.g
                    new UnaryExpression1(getLeftIToken(), getRightIToken(),
                                         //#line 867 GJavaParser.g
                                         new AstToken(getRhsIToken(1)),
                                         //#line 867 GJavaParser.g
                                         (IUnaryExpression)getRhsSym(2))
                //#line 867 GJavaParser.g
                );
            break;
            }
            //
            // Rule 387:  UnaryExpression ::= UnaryExpressionNotPlusMinus
            //
            case 387:
                break;
            //
            // Rule 388:  PreIncrementExpression ::= ++ UnaryExpression
            //
            case 388: {
                //#line 870 "GJavaParser.g"
                setResult(
                    //#line 870 GJavaParser.g
                    new PreIncrementExpression(getLeftIToken(), getRightIToken(),
                                               //#line 870 GJavaParser.g
                                               new AstToken(getRhsIToken(1)),
                                               //#line 870 GJavaParser.g
                                               (IUnaryExpression)getRhsSym(2))
                //#line 870 GJavaParser.g
                );
            break;
            }
            //
            // Rule 389:  PreDecrementExpression ::= -- UnaryExpression
            //
            case 389: {
                //#line 872 "GJavaParser.g"
                setResult(
                    //#line 872 GJavaParser.g
                    new PreDecrementExpression(getLeftIToken(), getRightIToken(),
                                               //#line 872 GJavaParser.g
                                               new AstToken(getRhsIToken(1)),
                                               //#line 872 GJavaParser.g
                                               (IUnaryExpression)getRhsSym(2))
                //#line 872 GJavaParser.g
                );
            break;
            }
            //
            // Rule 390:  UnaryExpressionNotPlusMinus ::= PostfixExpression
            //
            case 390:
                break;
            //
            // Rule 391:  UnaryExpressionNotPlusMinus ::= ~ UnaryExpression
            //
            case 391: {
                //#line 875 "GJavaParser.g"
                setResult(
                    //#line 875 GJavaParser.g
                    new UnaryExpressionNotPlusMinus0(getLeftIToken(), getRightIToken(),
                                                     //#line 875 GJavaParser.g
                                                     new AstToken(getRhsIToken(1)),
                                                     //#line 875 GJavaParser.g
                                                     (IUnaryExpression)getRhsSym(2))
                //#line 875 GJavaParser.g
                );
            break;
            }
            //
            // Rule 392:  UnaryExpressionNotPlusMinus ::= ! UnaryExpression
            //
            case 392: {
                //#line 876 "GJavaParser.g"
                setResult(
                    //#line 876 GJavaParser.g
                    new UnaryExpressionNotPlusMinus1(getLeftIToken(), getRightIToken(),
                                                     //#line 876 GJavaParser.g
                                                     new AstToken(getRhsIToken(1)),
                                                     //#line 876 GJavaParser.g
                                                     (IUnaryExpression)getRhsSym(2))
                //#line 876 GJavaParser.g
                );
            break;
            }
            //
            // Rule 393:  UnaryExpressionNotPlusMinus ::= CastExpression
            //
            case 393:
                break;
            //
            // Rule 394:  CastExpression ::= ( PrimitiveType Dimsopt ) UnaryExpression
            //
            case 394: {
                //#line 879 "GJavaParser.g"
                setResult(
                    //#line 879 GJavaParser.g
                    new CastExpression0(getLeftIToken(), getRightIToken(),
                                        //#line 879 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 879 GJavaParser.g
                                        (IPrimitiveType)getRhsSym(2),
                                        //#line 879 GJavaParser.g
                                        (IDimsopt)getRhsSym(3),
                                        //#line 879 GJavaParser.g
                                        new AstToken(getRhsIToken(4)),
                                        //#line 879 GJavaParser.g
                                        (IUnaryExpression)getRhsSym(5))
                //#line 879 GJavaParser.g
                );
            break;
            }
            //
            // Rule 395:  CastExpression ::= ( ReferenceType ) UnaryExpressionNotPlusMinus
            //
            case 395: {
                //#line 880 "GJavaParser.g"
                setResult(
                    //#line 880 GJavaParser.g
                    new CastExpression1(getLeftIToken(), getRightIToken(),
                                        //#line 880 GJavaParser.g
                                        new AstToken(getRhsIToken(1)),
                                        //#line 880 GJavaParser.g
                                        (IReferenceType)getRhsSym(2),
                                        //#line 880 GJavaParser.g
                                        new AstToken(getRhsIToken(3)),
                                        //#line 880 GJavaParser.g
                                        (IUnaryExpressionNotPlusMinus)getRhsSym(4))
                //#line 880 GJavaParser.g
                );
            break;
            }
            //
            // Rule 396:  MultiplicativeExpression ::= UnaryExpression
            //
            case 396:
                break;
            //
            // Rule 397:  MultiplicativeExpression ::= MultiplicativeExpression * UnaryExpression
            //
            case 397: {
                //#line 883 "GJavaParser.g"
                setResult(
                    //#line 883 GJavaParser.g
                    new MultiplicativeExpression0(getLeftIToken(), getRightIToken(),
                                                  //#line 883 GJavaParser.g
                                                  (IMultiplicativeExpression)getRhsSym(1),
                                                  //#line 883 GJavaParser.g
                                                  new AstToken(getRhsIToken(2)),
                                                  //#line 883 GJavaParser.g
                                                  (IUnaryExpression)getRhsSym(3))
                //#line 883 GJavaParser.g
                );
            break;
            }
            //
            // Rule 398:  MultiplicativeExpression ::= MultiplicativeExpression / UnaryExpression
            //
            case 398: {
                //#line 884 "GJavaParser.g"
                setResult(
                    //#line 884 GJavaParser.g
                    new MultiplicativeExpression1(getLeftIToken(), getRightIToken(),
                                                  //#line 884 GJavaParser.g
                                                  (IMultiplicativeExpression)getRhsSym(1),
                                                  //#line 884 GJavaParser.g
                                                  new AstToken(getRhsIToken(2)),
                                                  //#line 884 GJavaParser.g
                                                  (IUnaryExpression)getRhsSym(3))
                //#line 884 GJavaParser.g
                );
            break;
            }
            //
            // Rule 399:  MultiplicativeExpression ::= MultiplicativeExpression % UnaryExpression
            //
            case 399: {
                //#line 885 "GJavaParser.g"
                setResult(
                    //#line 885 GJavaParser.g
                    new MultiplicativeExpression2(getLeftIToken(), getRightIToken(),
                                                  //#line 885 GJavaParser.g
                                                  (IMultiplicativeExpression)getRhsSym(1),
                                                  //#line 885 GJavaParser.g
                                                  new AstToken(getRhsIToken(2)),
                                                  //#line 885 GJavaParser.g
                                                  (IUnaryExpression)getRhsSym(3))
                //#line 885 GJavaParser.g
                );
            break;
            }
            //
            // Rule 400:  AdditiveExpression ::= MultiplicativeExpression
            //
            case 400:
                break;
            //
            // Rule 401:  AdditiveExpression ::= AdditiveExpression + MultiplicativeExpression
            //
            case 401: {
                //#line 888 "GJavaParser.g"
                setResult(
                    //#line 888 GJavaParser.g
                    new AdditiveExpression0(getLeftIToken(), getRightIToken(),
                                            //#line 888 GJavaParser.g
                                            (IAdditiveExpression)getRhsSym(1),
                                            //#line 888 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 888 GJavaParser.g
                                            (IMultiplicativeExpression)getRhsSym(3))
                //#line 888 GJavaParser.g
                );
            break;
            }
            //
            // Rule 402:  AdditiveExpression ::= AdditiveExpression - MultiplicativeExpression
            //
            case 402: {
                //#line 889 "GJavaParser.g"
                setResult(
                    //#line 889 GJavaParser.g
                    new AdditiveExpression1(getLeftIToken(), getRightIToken(),
                                            //#line 889 GJavaParser.g
                                            (IAdditiveExpression)getRhsSym(1),
                                            //#line 889 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 889 GJavaParser.g
                                            (IMultiplicativeExpression)getRhsSym(3))
                //#line 889 GJavaParser.g
                );
            break;
            }
            //
            // Rule 403:  ShiftExpression ::= AdditiveExpression
            //
            case 403:
                break;
            //
            // Rule 404:  ShiftExpression ::= ShiftExpression << AdditiveExpression
            //
            case 404: {
                //#line 892 "GJavaParser.g"
                setResult(
                    //#line 892 GJavaParser.g
                    new ShiftExpression0(getLeftIToken(), getRightIToken(),
                                         //#line 892 GJavaParser.g
                                         (IShiftExpression)getRhsSym(1),
                                         //#line 892 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 892 GJavaParser.g
                                         (IAdditiveExpression)getRhsSym(3))
                //#line 892 GJavaParser.g
                );
            break;
            }
            //
            // Rule 405:  ShiftExpression ::= ShiftExpression > > AdditiveExpression
            //
            case 405: {
                //#line 893 "GJavaParser.g"
                setResult(
                    //#line 893 GJavaParser.g
                    new ShiftExpression1(getLeftIToken(), getRightIToken(),
                                         //#line 893 GJavaParser.g
                                         (IShiftExpression)getRhsSym(1),
                                         //#line 893 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 893 GJavaParser.g
                                         new AstToken(getRhsIToken(3)),
                                         //#line 893 GJavaParser.g
                                         (IAdditiveExpression)getRhsSym(4))
                //#line 893 GJavaParser.g
                );
            break;
            }
            //
            // Rule 406:  ShiftExpression ::= ShiftExpression > > > AdditiveExpression
            //
            case 406: {
                //#line 894 "GJavaParser.g"
                setResult(
                    //#line 894 GJavaParser.g
                    new ShiftExpression2(getLeftIToken(), getRightIToken(),
                                         //#line 894 GJavaParser.g
                                         (IShiftExpression)getRhsSym(1),
                                         //#line 894 GJavaParser.g
                                         new AstToken(getRhsIToken(2)),
                                         //#line 894 GJavaParser.g
                                         new AstToken(getRhsIToken(3)),
                                         //#line 894 GJavaParser.g
                                         new AstToken(getRhsIToken(4)),
                                         //#line 894 GJavaParser.g
                                         (IAdditiveExpression)getRhsSym(5))
                //#line 894 GJavaParser.g
                );
            break;
            }
            //
            // Rule 407:  RelationalExpression ::= ShiftExpression
            //
            case 407:
                break;
            //
            // Rule 408:  RelationalExpression ::= RelationalExpression < ShiftExpression
            //
            case 408: {
                //#line 897 "GJavaParser.g"
                setResult(
                    //#line 897 GJavaParser.g
                    new RelationalExpression0(getLeftIToken(), getRightIToken(),
                                              //#line 897 GJavaParser.g
                                              (IRelationalExpression)getRhsSym(1),
                                              //#line 897 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 897 GJavaParser.g
                                              (IShiftExpression)getRhsSym(3))
                //#line 897 GJavaParser.g
                );
            break;
            }
            //
            // Rule 409:  RelationalExpression ::= RelationalExpression > ShiftExpression
            //
            case 409: {
                //#line 898 "GJavaParser.g"
                setResult(
                    //#line 898 GJavaParser.g
                    new RelationalExpression1(getLeftIToken(), getRightIToken(),
                                              //#line 898 GJavaParser.g
                                              (IRelationalExpression)getRhsSym(1),
                                              //#line 898 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 898 GJavaParser.g
                                              (IShiftExpression)getRhsSym(3))
                //#line 898 GJavaParser.g
                );
            break;
            }
            //
            // Rule 410:  RelationalExpression ::= RelationalExpression <= ShiftExpression
            //
            case 410: {
                //#line 899 "GJavaParser.g"
                setResult(
                    //#line 899 GJavaParser.g
                    new RelationalExpression2(getLeftIToken(), getRightIToken(),
                                              //#line 899 GJavaParser.g
                                              (IRelationalExpression)getRhsSym(1),
                                              //#line 899 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 899 GJavaParser.g
                                              (IShiftExpression)getRhsSym(3))
                //#line 899 GJavaParser.g
                );
            break;
            }
            //
            // Rule 411:  RelationalExpression ::= RelationalExpression > = ShiftExpression
            //
            case 411: {
                //#line 900 "GJavaParser.g"
                setResult(
                    //#line 900 GJavaParser.g
                    new RelationalExpression3(getLeftIToken(), getRightIToken(),
                                              //#line 900 GJavaParser.g
                                              (IRelationalExpression)getRhsSym(1),
                                              //#line 900 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 900 GJavaParser.g
                                              new AstToken(getRhsIToken(3)),
                                              //#line 900 GJavaParser.g
                                              (IShiftExpression)getRhsSym(4))
                //#line 900 GJavaParser.g
                );
            break;
            }
            //
            // Rule 412:  RelationalExpression ::= RelationalExpression instanceof ReferenceType
            //
            case 412: {
                //#line 901 "GJavaParser.g"
                setResult(
                    //#line 901 GJavaParser.g
                    new RelationalExpression4(getLeftIToken(), getRightIToken(),
                                              //#line 901 GJavaParser.g
                                              (IRelationalExpression)getRhsSym(1),
                                              //#line 901 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 901 GJavaParser.g
                                              (IReferenceType)getRhsSym(3))
                //#line 901 GJavaParser.g
                );
            break;
            }
            //
            // Rule 413:  EqualityExpression ::= RelationalExpression
            //
            case 413:
                break;
            //
            // Rule 414:  EqualityExpression ::= EqualityExpression == RelationalExpression
            //
            case 414: {
                //#line 904 "GJavaParser.g"
                setResult(
                    //#line 904 GJavaParser.g
                    new EqualityExpression0(getLeftIToken(), getRightIToken(),
                                            //#line 904 GJavaParser.g
                                            (IEqualityExpression)getRhsSym(1),
                                            //#line 904 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 904 GJavaParser.g
                                            (IRelationalExpression)getRhsSym(3))
                //#line 904 GJavaParser.g
                );
            break;
            }
            //
            // Rule 415:  EqualityExpression ::= EqualityExpression != RelationalExpression
            //
            case 415: {
                //#line 905 "GJavaParser.g"
                setResult(
                    //#line 905 GJavaParser.g
                    new EqualityExpression1(getLeftIToken(), getRightIToken(),
                                            //#line 905 GJavaParser.g
                                            (IEqualityExpression)getRhsSym(1),
                                            //#line 905 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 905 GJavaParser.g
                                            (IRelationalExpression)getRhsSym(3))
                //#line 905 GJavaParser.g
                );
            break;
            }
            //
            // Rule 416:  AndExpression ::= EqualityExpression
            //
            case 416:
                break;
            //
            // Rule 417:  AndExpression ::= AndExpression & EqualityExpression
            //
            case 417: {
                //#line 908 "GJavaParser.g"
                setResult(
                    //#line 908 GJavaParser.g
                    new AndExpression(getLeftIToken(), getRightIToken(),
                                      //#line 908 GJavaParser.g
                                      (IAndExpression)getRhsSym(1),
                                      //#line 908 GJavaParser.g
                                      new AstToken(getRhsIToken(2)),
                                      //#line 908 GJavaParser.g
                                      (IEqualityExpression)getRhsSym(3))
                //#line 908 GJavaParser.g
                );
            break;
            }
            //
            // Rule 418:  ExclusiveOrExpression ::= AndExpression
            //
            case 418:
                break;
            //
            // Rule 419:  ExclusiveOrExpression ::= ExclusiveOrExpression ^ AndExpression
            //
            case 419: {
                //#line 911 "GJavaParser.g"
                setResult(
                    //#line 911 GJavaParser.g
                    new ExclusiveOrExpression(getLeftIToken(), getRightIToken(),
                                              //#line 911 GJavaParser.g
                                              (IExclusiveOrExpression)getRhsSym(1),
                                              //#line 911 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 911 GJavaParser.g
                                              (IAndExpression)getRhsSym(3))
                //#line 911 GJavaParser.g
                );
            break;
            }
            //
            // Rule 420:  InclusiveOrExpression ::= ExclusiveOrExpression
            //
            case 420:
                break;
            //
            // Rule 421:  InclusiveOrExpression ::= InclusiveOrExpression | ExclusiveOrExpression
            //
            case 421: {
                //#line 914 "GJavaParser.g"
                setResult(
                    //#line 914 GJavaParser.g
                    new InclusiveOrExpression(getLeftIToken(), getRightIToken(),
                                              //#line 914 GJavaParser.g
                                              (IInclusiveOrExpression)getRhsSym(1),
                                              //#line 914 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 914 GJavaParser.g
                                              (IExclusiveOrExpression)getRhsSym(3))
                //#line 914 GJavaParser.g
                );
            break;
            }
            //
            // Rule 422:  ConditionalAndExpression ::= InclusiveOrExpression
            //
            case 422:
                break;
            //
            // Rule 423:  ConditionalAndExpression ::= ConditionalAndExpression && InclusiveOrExpression
            //
            case 423: {
                //#line 917 "GJavaParser.g"
                setResult(
                    //#line 917 GJavaParser.g
                    new ConditionalAndExpression(getLeftIToken(), getRightIToken(),
                                                 //#line 917 GJavaParser.g
                                                 (IConditionalAndExpression)getRhsSym(1),
                                                 //#line 917 GJavaParser.g
                                                 new AstToken(getRhsIToken(2)),
                                                 //#line 917 GJavaParser.g
                                                 (IInclusiveOrExpression)getRhsSym(3))
                //#line 917 GJavaParser.g
                );
            break;
            }
            //
            // Rule 424:  ConditionalOrExpression ::= ConditionalAndExpression
            //
            case 424:
                break;
            //
            // Rule 425:  ConditionalOrExpression ::= ConditionalOrExpression || ConditionalAndExpression
            //
            case 425: {
                //#line 920 "GJavaParser.g"
                setResult(
                    //#line 920 GJavaParser.g
                    new ConditionalOrExpression(getLeftIToken(), getRightIToken(),
                                                //#line 920 GJavaParser.g
                                                (IConditionalOrExpression)getRhsSym(1),
                                                //#line 920 GJavaParser.g
                                                new AstToken(getRhsIToken(2)),
                                                //#line 920 GJavaParser.g
                                                (IConditionalAndExpression)getRhsSym(3))
                //#line 920 GJavaParser.g
                );
            break;
            }
            //
            // Rule 426:  ConditionalExpression ::= ConditionalOrExpression
            //
            case 426:
                break;
            //
            // Rule 427:  ConditionalExpression ::= ConditionalOrExpression ? Expression : ConditionalExpression
            //
            case 427: {
                //#line 923 "GJavaParser.g"
                setResult(
                    //#line 923 GJavaParser.g
                    new ConditionalExpression(getLeftIToken(), getRightIToken(),
                                              //#line 923 GJavaParser.g
                                              (IConditionalOrExpression)getRhsSym(1),
                                              //#line 923 GJavaParser.g
                                              new AstToken(getRhsIToken(2)),
                                              //#line 923 GJavaParser.g
                                              (IExpression)getRhsSym(3),
                                              //#line 923 GJavaParser.g
                                              new AstToken(getRhsIToken(4)),
                                              //#line 923 GJavaParser.g
                                              (IConditionalExpression)getRhsSym(5))
                //#line 923 GJavaParser.g
                );
            break;
            }
            //
            // Rule 428:  AssignmentExpression ::= ConditionalExpression
            //
            case 428:
                break;
            //
            // Rule 429:  AssignmentExpression ::= Assignment
            //
            case 429:
                break;
            //
            // Rule 430:  Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression
            //
            case 430: {
                //#line 928 "GJavaParser.g"
                setResult(
                    //#line 928 GJavaParser.g
                    new Assignment(getLeftIToken(), getRightIToken(),
                                   //#line 928 GJavaParser.g
                                   (ILeftHandSide)getRhsSym(1),
                                   //#line 928 GJavaParser.g
                                   (IAssignmentOperator)getRhsSym(2),
                                   //#line 928 GJavaParser.g
                                   (IAssignmentExpression)getRhsSym(3))
                //#line 928 GJavaParser.g
                );
            break;
            }
            //
            // Rule 431:  LeftHandSide ::= ExpressionName
            //
            case 431:
                break;
            //
            // Rule 432:  LeftHandSide ::= FieldAccess
            //
            case 432:
                break;
            //
            // Rule 433:  LeftHandSide ::= ArrayAccess
            //
            case 433:
                break;
            //
            // Rule 434:  AssignmentOperator ::= =
            //
            case 434: {
                //#line 934 "GJavaParser.g"
                setResult(
                    //#line 934 GJavaParser.g
                    new AssignmentOperator0(getRhsIToken(1))
                //#line 934 GJavaParser.g
                );
            break;
            }
            //
            // Rule 435:  AssignmentOperator ::= *=
            //
            case 435: {
                //#line 935 "GJavaParser.g"
                setResult(
                    //#line 935 GJavaParser.g
                    new AssignmentOperator1(getRhsIToken(1))
                //#line 935 GJavaParser.g
                );
            break;
            }
            //
            // Rule 436:  AssignmentOperator ::= /=
            //
            case 436: {
                //#line 936 "GJavaParser.g"
                setResult(
                    //#line 936 GJavaParser.g
                    new AssignmentOperator2(getRhsIToken(1))
                //#line 936 GJavaParser.g
                );
            break;
            }
            //
            // Rule 437:  AssignmentOperator ::= %=
            //
            case 437: {
                //#line 937 "GJavaParser.g"
                setResult(
                    //#line 937 GJavaParser.g
                    new AssignmentOperator3(getRhsIToken(1))
                //#line 937 GJavaParser.g
                );
            break;
            }
            //
            // Rule 438:  AssignmentOperator ::= +=
            //
            case 438: {
                //#line 938 "GJavaParser.g"
                setResult(
                    //#line 938 GJavaParser.g
                    new AssignmentOperator4(getRhsIToken(1))
                //#line 938 GJavaParser.g
                );
            break;
            }
            //
            // Rule 439:  AssignmentOperator ::= -=
            //
            case 439: {
                //#line 939 "GJavaParser.g"
                setResult(
                    //#line 939 GJavaParser.g
                    new AssignmentOperator5(getRhsIToken(1))
                //#line 939 GJavaParser.g
                );
            break;
            }
            //
            // Rule 440:  AssignmentOperator ::= <<=
            //
            case 440: {
                //#line 940 "GJavaParser.g"
                setResult(
                    //#line 940 GJavaParser.g
                    new AssignmentOperator6(getRhsIToken(1))
                //#line 940 GJavaParser.g
                );
            break;
            }
            //
            // Rule 441:  AssignmentOperator ::= > > =
            //
            case 441: {
                //#line 941 "GJavaParser.g"
                setResult(
                    //#line 941 GJavaParser.g
                    new AssignmentOperator7(getLeftIToken(), getRightIToken(),
                                            //#line 941 GJavaParser.g
                                            new AstToken(getRhsIToken(1)),
                                            //#line 941 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 941 GJavaParser.g
                                            new AstToken(getRhsIToken(3)))
                //#line 941 GJavaParser.g
                );
            break;
            }
            //
            // Rule 442:  AssignmentOperator ::= > > > =
            //
            case 442: {
                //#line 942 "GJavaParser.g"
                setResult(
                    //#line 942 GJavaParser.g
                    new AssignmentOperator8(getLeftIToken(), getRightIToken(),
                                            //#line 942 GJavaParser.g
                                            new AstToken(getRhsIToken(1)),
                                            //#line 942 GJavaParser.g
                                            new AstToken(getRhsIToken(2)),
                                            //#line 942 GJavaParser.g
                                            new AstToken(getRhsIToken(3)),
                                            //#line 942 GJavaParser.g
                                            new AstToken(getRhsIToken(4)))
                //#line 942 GJavaParser.g
                );
            break;
            }
            //
            // Rule 443:  AssignmentOperator ::= &=
            //
            case 443: {
                //#line 943 "GJavaParser.g"
                setResult(
                    //#line 943 GJavaParser.g
                    new AssignmentOperator9(getRhsIToken(1))
                //#line 943 GJavaParser.g
                );
            break;
            }
            //
            // Rule 444:  AssignmentOperator ::= ^=
            //
            case 444: {
                //#line 944 "GJavaParser.g"
                setResult(
                    //#line 944 GJavaParser.g
                    new AssignmentOperator10(getRhsIToken(1))
                //#line 944 GJavaParser.g
                );
            break;
            }
            //
            // Rule 445:  AssignmentOperator ::= |=
            //
            case 445: {
                //#line 945 "GJavaParser.g"
                setResult(
                    //#line 945 GJavaParser.g
                    new AssignmentOperator11(getRhsIToken(1))
                //#line 945 GJavaParser.g
                );
            break;
            }
            //
            // Rule 446:  Expression ::= AssignmentExpression
            //
            case 446:
                break;
            //
            // Rule 447:  ConstantExpression ::= Expression
            //
            case 447:
                break;
            //
            // Rule 448:  Dimsopt ::= $Empty
            //
            case 448: {
                //#line 954 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 449:  Dimsopt ::= Dims
            //
            case 449:
                break;
            //
            // Rule 450:  Catchesopt ::= $Empty
            //
            case 450: {
                //#line 957 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 451:  Catchesopt ::= Catches
            //
            case 451:
                break;
            //
            // Rule 452:  identifieropt ::= $Empty
            //
            case 452: {
                //#line 960 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 453:  identifieropt ::= identifier
            //
            case 453:
                break;
            //
            // Rule 454:  ForUpdateopt ::= $Empty
            //
            case 454: {
                //#line 963 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 455:  ForUpdateopt ::= ForUpdate
            //
            case 455:
                break;
            //
            // Rule 456:  Expressionopt ::= $Empty
            //
            case 456: {
                //#line 966 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 457:  Expressionopt ::= Expression
            //
            case 457:
                break;
            //
            // Rule 458:  ForInitopt ::= $Empty
            //
            case 458: {
                //#line 969 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 459:  ForInitopt ::= ForInit
            //
            case 459:
                break;
            //
            // Rule 460:  SwitchLabelsopt ::= $Empty
            //
            case 460: {
                //#line 972 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 461:  SwitchLabelsopt ::= SwitchLabels
            //
            case 461:
                break;
            //
            // Rule 462:  SwitchBlockStatementGroupsopt ::= $Empty
            //
            case 462: {
                //#line 975 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 463:  SwitchBlockStatementGroupsopt ::= SwitchBlockStatementGroups
            //
            case 463:
                break;
            //
            // Rule 464:  VariableModifiersopt ::= $Empty
            //
            case 464: {
                //#line 978 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 465:  VariableModifiersopt ::= VariableModifiers
            //
            case 465:
                break;
            //
            // Rule 466:  VariableInitializersopt ::= $Empty
            //
            case 466: {
                //#line 981 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 467:  VariableInitializersopt ::= VariableInitializers
            //
            case 467:
                break;
            //
            // Rule 468:  ElementValuesopt ::= $Empty
            //
            case 468: {
                //#line 984 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 469:  ElementValuesopt ::= ElementValues
            //
            case 469:
                break;
            //
            // Rule 470:  ElementValuePairsopt ::= $Empty
            //
            case 470: {
                //#line 987 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 471:  ElementValuePairsopt ::= ElementValuePairs
            //
            case 471:
                break;
            //
            // Rule 472:  DefaultValueopt ::= $Empty
            //
            case 472: {
                //#line 990 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 473:  DefaultValueopt ::= DefaultValue
            //
            case 473:
                break;
            //
            // Rule 474:  AnnotationTypeElementDeclarationsopt ::= $Empty
            //
            case 474: {
                //#line 993 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 475:  AnnotationTypeElementDeclarationsopt ::= AnnotationTypeElementDeclarations
            //
            case 475:
                break;
            //
            // Rule 476:  AbstractMethodModifiersopt ::= $Empty
            //
            case 476: {
                //#line 996 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 477:  AbstractMethodModifiersopt ::= AbstractMethodModifiers
            //
            case 477:
                break;
            //
            // Rule 478:  ConstantModifiersopt ::= $Empty
            //
            case 478: {
                //#line 999 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 479:  ConstantModifiersopt ::= ConstantModifiers
            //
            case 479:
                break;
            //
            // Rule 480:  InterfaceMemberDeclarationsopt ::= $Empty
            //
            case 480: {
                //#line 1002 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 481:  InterfaceMemberDeclarationsopt ::= InterfaceMemberDeclarations
            //
            case 481:
                break;
            //
            // Rule 482:  ExtendsInterfacesopt ::= $Empty
            //
            case 482: {
                //#line 1005 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 483:  ExtendsInterfacesopt ::= ExtendsInterfaces
            //
            case 483:
                break;
            //
            // Rule 484:  InterfaceModifiersopt ::= $Empty
            //
            case 484: {
                //#line 1008 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 485:  InterfaceModifiersopt ::= InterfaceModifiers
            //
            case 485:
                break;
            //
            // Rule 486:  ClassBodyopt ::= $Empty
            //
            case 486: {
                //#line 1011 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 487:  ClassBodyopt ::= ClassBody
            //
            case 487:
                break;
            //
            // Rule 488:  Argumentsopt ::= $Empty
            //
            case 488: {
                //#line 1014 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 489:  Argumentsopt ::= Arguments
            //
            case 489:
                break;
            //
            // Rule 490:  EnumBodyDeclarationsopt ::= $Empty
            //
            case 490: {
                //#line 1017 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 491:  EnumBodyDeclarationsopt ::= EnumBodyDeclarations
            //
            case 491:
                break;
            //
            // Rule 492:  ,opt ::= $Empty
            //
            case 492: {
                //#line 1020 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 493:  ,opt ::= ,
            //
            case 493: {
                //#line 1021 "GJavaParser.g"
                setResult(
                    //#line 1021 GJavaParser.g
                    new Commaopt(getRhsIToken(1))
                //#line 1021 GJavaParser.g
                );
            break;
            }
            //
            // Rule 494:  EnumConstantsopt ::= $Empty
            //
            case 494: {
                //#line 1023 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 495:  EnumConstantsopt ::= EnumConstants
            //
            case 495:
                break;
            //
            // Rule 496:  ArgumentListopt ::= $Empty
            //
            case 496: {
                //#line 1026 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 497:  ArgumentListopt ::= ArgumentList
            //
            case 497:
                break;
            //
            // Rule 498:  BlockStatementsopt ::= $Empty
            //
            case 498: {
                //#line 1029 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 499:  BlockStatementsopt ::= BlockStatements
            //
            case 499:
                break;
            //
            // Rule 500:  ExplicitConstructorInvocationopt ::= $Empty
            //
            case 500: {
                //#line 1032 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 501:  ExplicitConstructorInvocationopt ::= ExplicitConstructorInvocation
            //
            case 501:
                break;
            //
            // Rule 502:  ConstructorModifiersopt ::= $Empty
            //
            case 502: {
                //#line 1035 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 503:  ConstructorModifiersopt ::= ConstructorModifiers
            //
            case 503:
                break;
            //
            // Rule 504:  ...opt ::= $Empty
            //
            case 504: {
                //#line 1038 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 505:  ...opt ::= ...
            //
            case 505: {
                //#line 1039 "GJavaParser.g"
                setResult(
                    //#line 1039 GJavaParser.g
                    new Ellipsisopt(getRhsIToken(1))
                //#line 1039 GJavaParser.g
                );
            break;
            }
            //
            // Rule 506:  FormalParameterListopt ::= $Empty
            //
            case 506: {
                //#line 1041 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 507:  FormalParameterListopt ::= FormalParameterList
            //
            case 507:
                break;
            //
            // Rule 508:  Throwsopt ::= $Empty
            //
            case 508: {
                //#line 1044 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 509:  Throwsopt ::= Throws
            //
            case 509:
                break;
            //
            // Rule 510:  MethodModifiersopt ::= $Empty
            //
            case 510: {
                //#line 1047 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 511:  MethodModifiersopt ::= MethodModifiers
            //
            case 511:
                break;
            //
            // Rule 512:  FieldModifiersopt ::= $Empty
            //
            case 512: {
                //#line 1050 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 513:  FieldModifiersopt ::= FieldModifiers
            //
            case 513:
                break;
            //
            // Rule 514:  ClassBodyDeclarationsopt ::= $Empty
            //
            case 514: {
                //#line 1053 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 515:  ClassBodyDeclarationsopt ::= ClassBodyDeclarations
            //
            case 515:
                break;
            //
            // Rule 516:  Interfacesopt ::= $Empty
            //
            case 516: {
                //#line 1056 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 517:  Interfacesopt ::= Interfaces
            //
            case 517:
                break;
            //
            // Rule 518:  Superopt ::= $Empty
            //
            case 518: {
                //#line 1059 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 519:  Superopt ::= Super
            //
            case 519:
                break;
            //
            // Rule 520:  TypeParametersopt ::= $Empty
            //
            case 520: {
                //#line 1062 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 521:  TypeParametersopt ::= TypeParameters
            //
            case 521:
                break;
            //
            // Rule 522:  ClassModifiersopt ::= $Empty
            //
            case 522: {
                //#line 1065 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 523:  ClassModifiersopt ::= ClassModifiers
            //
            case 523:
                break;
            //
            // Rule 524:  Annotationsopt ::= $Empty
            //
            case 524: {
                //#line 1068 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 525:  Annotationsopt ::= Annotations
            //
            case 525:
                break;
            //
            // Rule 526:  TypeDeclarationsopt ::= $Empty
            //
            case 526: {
                //#line 1071 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 527:  TypeDeclarationsopt ::= TypeDeclarations
            //
            case 527:
                break;
            //
            // Rule 528:  ImportDeclarationsopt ::= $Empty
            //
            case 528: {
                //#line 1074 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 529:  ImportDeclarationsopt ::= ImportDeclarations
            //
            case 529:
                break;
            //
            // Rule 530:  PackageDeclarationopt ::= $Empty
            //
            case 530: {
                //#line 1077 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 531:  PackageDeclarationopt ::= PackageDeclaration
            //
            case 531:
                break;
            //
            // Rule 532:  WildcardBoundsOpt ::= $Empty
            //
            case 532: {
                //#line 1080 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 533:  WildcardBoundsOpt ::= WildcardBounds
            //
            case 533:
                break;
            //
            // Rule 534:  AdditionalBoundListopt ::= $Empty
            //
            case 534: {
                //#line 1083 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 535:  AdditionalBoundListopt ::= AdditionalBoundList
            //
            case 535:
                break;
            //
            // Rule 536:  TypeBoundopt ::= $Empty
            //
            case 536: {
                //#line 1086 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 537:  TypeBoundopt ::= TypeBound
            //
            case 537:
                break;
            //
            // Rule 538:  TypeArgumentsopt ::= $Empty
            //
            case 538: {
                //#line 1089 "GJavaParser.g"
                setResult(null);
            break;
            }
            //
            // Rule 539:  TypeArgumentsopt ::= TypeArguments
            //
            case 539:
                break;
    //#line 330 "dtParserTemplateF.gi

    
            default:
                break;
        }
        return;
    }
}
}
